{"ast":null,"code":"import { Mark, mergeAttributes, markInputRule, markPasteRule } from '@tiptap/core';\nvar starInputRegex = /(?:^|\\s)((?:\\*)((?:[^*]+))(?:\\*))$/gm;\nvar starPasteRegex = /(?:^|\\s)((?:\\*)((?:[^*]+))(?:\\*))/gm;\nvar underscoreInputRegex = /(?:^|\\s)((?:_)((?:[^_]+))(?:_))$/gm;\nvar underscorePasteRegex = /(?:^|\\s)((?:_)((?:[^_]+))(?:_))/gm;\nvar Italic = Mark.create({\n  name: 'italic',\n  defaultOptions: {\n    HTMLAttributes: {}\n  },\n  parseHTML: function parseHTML() {\n    return [{\n      tag: 'em'\n    }, {\n      tag: 'i',\n      getAttrs: function getAttrs(node) {\n        return node.style.fontStyle !== 'normal' && null;\n      }\n    }, {\n      style: 'font-style=italic'\n    }];\n  },\n  renderHTML: function renderHTML(_ref) {\n    var HTMLAttributes = _ref.HTMLAttributes;\n    return ['em', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n  addCommands: function addCommands() {\n    return {\n      setItalic: function setItalic() {\n        return function (_ref2) {\n          var commands = _ref2.commands;\n          return commands.setMark('italic');\n        };\n      },\n      toggleItalic: function toggleItalic() {\n        return function (_ref3) {\n          var commands = _ref3.commands;\n          return commands.toggleMark('italic');\n        };\n      },\n      unsetItalic: function unsetItalic() {\n        return function (_ref4) {\n          var commands = _ref4.commands;\n          return commands.unsetMark('italic');\n        };\n      }\n    };\n  },\n  addKeyboardShortcuts: function addKeyboardShortcuts() {\n    var _this = this;\n\n    return {\n      'Mod-i': function ModI() {\n        return _this.editor.commands.toggleItalic();\n      }\n    };\n  },\n  addInputRules: function addInputRules() {\n    return [markInputRule(starInputRegex, this.type), markInputRule(underscoreInputRegex, this.type)];\n  },\n  addPasteRules: function addPasteRules() {\n    return [markPasteRule(starPasteRegex, this.type), markPasteRule(underscorePasteRegex, this.type)];\n  }\n});\nexport default Italic;\nexport { Italic, starInputRegex, starPasteRegex, underscoreInputRegex, underscorePasteRegex };","map":{"version":3,"sources":["../src/italic.ts"],"names":[],"mappings":";IA+Ba,cAAc,GAAG,sC;IACjB,cAAc,GAAG,qC;IACjB,oBAAoB,GAAG,oC;IACvB,oBAAoB,GAAG,mC;IAEvB,MAAM,GAAG,IAAI,CAAC,MAAL,CAA2B;AAC/C,EAAA,IAAI,EAAE,QADyC;AAG/C,EAAA,cAAc,EAAE;AACd,IAAA,cAAc,EAAE;AADF,GAH+B;AAO/C,EAAA,SAP+C,uBAOtC;AACP,WAAO,CACL;AACE,MAAA,GAAG,EAAE;AADP,KADK,EAIL;AACE,MAAA,GAAG,EAAE,GADP;AAEE,MAAA,QAAQ,EAAE,kBAAA,IAAI;AAAA,eAAK,IAAoB,CAAC,KAArB,CAA2B,SAA3B,KAAyC,QAAzC,IAAqD,IAA1D;AAAA;AAFhB,KAJK,EAQL;AACE,MAAA,KAAK,EAAE;AADT,KARK,CAAP;AAYD,GApB8C;AAsB/C,EAAA,UAtB+C,4BAsBlB;AAAA,QAAhB,cAAgB,QAAhB,cAAgB;AAC3B,WAAO,CAAC,IAAD,EAAO,eAAe,CAAC,KAAK,OAAL,CAAa,cAAd,EAA8B,cAA9B,CAAtB,EAAqE,CAArE,CAAP;AACD,GAxB8C;AA0B/C,EAAA,WA1B+C,yBA0BpC;AACT,WAAO;AACL,MAAA,SAAS,EAAE;AAAA,eAAM,iBAAa;AAAA,cAAV,QAAU,SAAV,QAAU;AAC5B,iBAAO,QAAQ,CAAC,OAAT,CAAiB,QAAjB,CAAP;AACD,SAFU;AAAA,OADN;AAIL,MAAA,YAAY,EAAE;AAAA,eAAM,iBAAa;AAAA,cAAV,QAAU,SAAV,QAAU;AAC/B,iBAAO,QAAQ,CAAC,UAAT,CAAoB,QAApB,CAAP;AACD,SAFa;AAAA,OAJT;AAOL,MAAA,WAAW,EAAE;AAAA,eAAM,iBAAa;AAAA,cAAV,QAAU,SAAV,QAAU;AAC9B,iBAAO,QAAQ,CAAC,SAAT,CAAmB,QAAnB,CAAP;AACD,SAFY;AAAA;AAPR,KAAP;AAWD,GAtC8C;AAwC/C,EAAA,oBAxC+C,kCAwC3B;AAAA;;AAClB,WAAO;AACL,eAAS;AAAA,eAAM,KAAI,CAAC,MAAL,CAAY,QAAZ,CAAqB,YAArB,EAAN;AAAA;AADJ,KAAP;AAGD,GA5C8C;AA8C/C,EAAA,aA9C+C,2BA8ClC;AACX,WAAO,CACL,aAAa,CAAC,cAAD,EAAiB,KAAK,IAAtB,CADR,EAEL,aAAa,CAAC,oBAAD,EAAuB,KAAK,IAA5B,CAFR,CAAP;AAID,GAnD8C;AAqD/C,EAAA,aArD+C,2BAqDlC;AACX,WAAO,CACL,aAAa,CAAC,cAAD,EAAiB,KAAK,IAAtB,CADR,EAEL,aAAa,CAAC,oBAAD,EAAuB,KAAK,IAA5B,CAFR,CAAP;AAID;AA1D8C,CAA3B,C","sourcesContent":["import {\n  Command,\n  Mark,\n  markInputRule,\n  markPasteRule,\n  mergeAttributes,\n} from '@tiptap/core'\n\nexport interface ItalicOptions {\n  HTMLAttributes: Record<string, any>,\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands {\n    italic: {\n      /**\n       * Set an italic mark\n       */\n      setItalic: () => Command,\n      /**\n       * Toggle an italic mark\n       */\n      toggleItalic: () => Command,\n      /**\n       * Unset an italic mark\n       */\n      unsetItalic: () => Command,\n    }\n  }\n}\n\nexport const starInputRegex = /(?:^|\\s)((?:\\*)((?:[^*]+))(?:\\*))$/gm\nexport const starPasteRegex = /(?:^|\\s)((?:\\*)((?:[^*]+))(?:\\*))/gm\nexport const underscoreInputRegex = /(?:^|\\s)((?:_)((?:[^_]+))(?:_))$/gm\nexport const underscorePasteRegex = /(?:^|\\s)((?:_)((?:[^_]+))(?:_))/gm\n\nexport const Italic = Mark.create<ItalicOptions>({\n  name: 'italic',\n\n  defaultOptions: {\n    HTMLAttributes: {},\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: 'em',\n      },\n      {\n        tag: 'i',\n        getAttrs: node => (node as HTMLElement).style.fontStyle !== 'normal' && null,\n      },\n      {\n        style: 'font-style=italic',\n      },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['em', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      setItalic: () => ({ commands }) => {\n        return commands.setMark('italic')\n      },\n      toggleItalic: () => ({ commands }) => {\n        return commands.toggleMark('italic')\n      },\n      unsetItalic: () => ({ commands }) => {\n        return commands.unsetMark('italic')\n      },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-i': () => this.editor.commands.toggleItalic(),\n    }\n  },\n\n  addInputRules() {\n    return [\n      markInputRule(starInputRegex, this.type),\n      markInputRule(underscoreInputRegex, this.type),\n    ]\n  },\n\n  addPasteRules() {\n    return [\n      markPasteRule(starPasteRegex, this.type),\n      markPasteRule(underscorePasteRegex, this.type),\n    ]\n  },\n})\n"]},"metadata":{},"sourceType":"module"}