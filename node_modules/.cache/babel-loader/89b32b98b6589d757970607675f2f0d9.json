{"ast":null,"code":"import { Mark, mergeAttributes, markInputRule, markPasteRule } from '@tiptap/core';\nconst starInputRegex = /(?:^|\\s)((?:\\*)((?:[^*]+))(?:\\*))$/gm;\nconst starPasteRegex = /(?:^|\\s)((?:\\*)((?:[^*]+))(?:\\*))/gm;\nconst underscoreInputRegex = /(?:^|\\s)((?:_)((?:[^_]+))(?:_))$/gm;\nconst underscorePasteRegex = /(?:^|\\s)((?:_)((?:[^_]+))(?:_))/gm;\nconst Italic = Mark.create({\n  name: 'italic',\n  defaultOptions: {\n    HTMLAttributes: {}\n  },\n\n  parseHTML() {\n    return [{\n      tag: 'em'\n    }, {\n      tag: 'i',\n      getAttrs: node => node.style.fontStyle !== 'normal' && null\n    }, {\n      style: 'font-style=italic'\n    }];\n  },\n\n  renderHTML({\n    HTMLAttributes\n  }) {\n    return ['em', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n\n  addCommands() {\n    return {\n      setItalic: () => ({\n        commands\n      }) => {\n        return commands.setMark('italic');\n      },\n      toggleItalic: () => ({\n        commands\n      }) => {\n        return commands.toggleMark('italic');\n      },\n      unsetItalic: () => ({\n        commands\n      }) => {\n        return commands.unsetMark('italic');\n      }\n    };\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-i': () => this.editor.commands.toggleItalic()\n    };\n  },\n\n  addInputRules() {\n    return [markInputRule(starInputRegex, this.type), markInputRule(underscoreInputRegex, this.type)];\n  },\n\n  addPasteRules() {\n    return [markPasteRule(starPasteRegex, this.type), markPasteRule(underscorePasteRegex, this.type)];\n  }\n\n});\nexport default Italic;\nexport { Italic, starInputRegex, starPasteRegex, underscoreInputRegex, underscorePasteRegex };","map":{"version":3,"sources":["../src/italic.ts"],"names":[],"mappings":";MA+Ba,cAAc,GAAG,sC;MACjB,cAAc,GAAG,qC;MACjB,oBAAoB,GAAG,oC;MACvB,oBAAoB,GAAG,mC;MAEvB,MAAM,GAAG,IAAI,CAAC,MAAL,CAA2B;AAC/C,EAAA,IAAI,EAAE,QADyC;AAG/C,EAAA,cAAc,EAAE;AACd,IAAA,cAAc,EAAE;AADF,GAH+B;;AAO/C,EAAA,SAAS,GAAA;AACP,WAAO,CACL;AACE,MAAA,GAAG,EAAE;AADP,KADK,EAIL;AACE,MAAA,GAAG,EAAE,GADP;AAEE,MAAA,QAAQ,EAAE,IAAI,IAAK,IAAoB,CAAC,KAArB,CAA2B,SAA3B,KAAyC,QAAzC,IAAqD;AAF1E,KAJK,EAQL;AACE,MAAA,KAAK,EAAE;AADT,KARK,CAAP;AAYD,GApB8C;;AAsB/C,EAAA,UAAU,CAAC;AAAE,IAAA;AAAF,GAAD,EAAmB;AAC3B,WAAO,CAAC,IAAD,EAAO,eAAe,CAAC,KAAK,OAAL,CAAa,cAAd,EAA8B,cAA9B,CAAtB,EAAqE,CAArE,CAAP;AACD,GAxB8C;;AA0B/C,EAAA,WAAW,GAAA;AACT,WAAO;AACL,MAAA,SAAS,EAAE,MAAM,CAAC;AAAE,QAAA;AAAF,OAAD,KAAa;AAC5B,eAAO,QAAQ,CAAC,OAAT,CAAiB,QAAjB,CAAP;AACD,OAHI;AAIL,MAAA,YAAY,EAAE,MAAM,CAAC;AAAE,QAAA;AAAF,OAAD,KAAa;AAC/B,eAAO,QAAQ,CAAC,UAAT,CAAoB,QAApB,CAAP;AACD,OANI;AAOL,MAAA,WAAW,EAAE,MAAM,CAAC;AAAE,QAAA;AAAF,OAAD,KAAa;AAC9B,eAAO,QAAQ,CAAC,SAAT,CAAmB,QAAnB,CAAP;AACD;AATI,KAAP;AAWD,GAtC8C;;AAwC/C,EAAA,oBAAoB,GAAA;AAClB,WAAO;AACL,eAAS,MAAM,KAAK,MAAL,CAAY,QAAZ,CAAqB,YAArB;AADV,KAAP;AAGD,GA5C8C;;AA8C/C,EAAA,aAAa,GAAA;AACX,WAAO,CACL,aAAa,CAAC,cAAD,EAAiB,KAAK,IAAtB,CADR,EAEL,aAAa,CAAC,oBAAD,EAAuB,KAAK,IAA5B,CAFR,CAAP;AAID,GAnD8C;;AAqD/C,EAAA,aAAa,GAAA;AACX,WAAO,CACL,aAAa,CAAC,cAAD,EAAiB,KAAK,IAAtB,CADR,EAEL,aAAa,CAAC,oBAAD,EAAuB,KAAK,IAA5B,CAFR,CAAP;AAID;;AA1D8C,CAA3B,C","sourcesContent":["import {\n  Command,\n  Mark,\n  markInputRule,\n  markPasteRule,\n  mergeAttributes,\n} from '@tiptap/core'\n\nexport interface ItalicOptions {\n  HTMLAttributes: Record<string, any>,\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands {\n    italic: {\n      /**\n       * Set an italic mark\n       */\n      setItalic: () => Command,\n      /**\n       * Toggle an italic mark\n       */\n      toggleItalic: () => Command,\n      /**\n       * Unset an italic mark\n       */\n      unsetItalic: () => Command,\n    }\n  }\n}\n\nexport const starInputRegex = /(?:^|\\s)((?:\\*)((?:[^*]+))(?:\\*))$/gm\nexport const starPasteRegex = /(?:^|\\s)((?:\\*)((?:[^*]+))(?:\\*))/gm\nexport const underscoreInputRegex = /(?:^|\\s)((?:_)((?:[^_]+))(?:_))$/gm\nexport const underscorePasteRegex = /(?:^|\\s)((?:_)((?:[^_]+))(?:_))/gm\n\nexport const Italic = Mark.create<ItalicOptions>({\n  name: 'italic',\n\n  defaultOptions: {\n    HTMLAttributes: {},\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: 'em',\n      },\n      {\n        tag: 'i',\n        getAttrs: node => (node as HTMLElement).style.fontStyle !== 'normal' && null,\n      },\n      {\n        style: 'font-style=italic',\n      },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['em', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      setItalic: () => ({ commands }) => {\n        return commands.setMark('italic')\n      },\n      toggleItalic: () => ({ commands }) => {\n        return commands.toggleMark('italic')\n      },\n      unsetItalic: () => ({ commands }) => {\n        return commands.unsetMark('italic')\n      },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-i': () => this.editor.commands.toggleItalic(),\n    }\n  },\n\n  addInputRules() {\n    return [\n      markInputRule(starInputRegex, this.type),\n      markInputRule(underscoreInputRegex, this.type),\n    ]\n  },\n\n  addPasteRules() {\n    return [\n      markPasteRule(starPasteRegex, this.type),\n      markPasteRule(underscorePasteRegex, this.type),\n    ]\n  },\n})\n"]},"metadata":{},"sourceType":"module"}