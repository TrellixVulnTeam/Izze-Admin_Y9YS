{"ast":null,"code":"import { Mark, mergeAttributes, markInputRule, markPasteRule } from '@tiptap/core';\nconst inputRegex = /(?:^|\\s)((?:`)((?:[^`]+))(?:`))$/gm;\nconst pasteRegex = /(?:^|\\s)((?:`)((?:[^`]+))(?:`))/gm;\nconst Code = Mark.create({\n  name: 'code',\n  defaultOptions: {\n    HTMLAttributes: {}\n  },\n  excludes: '_',\n\n  parseHTML() {\n    return [{\n      tag: 'code'\n    }];\n  },\n\n  renderHTML({\n    HTMLAttributes\n  }) {\n    return ['code', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n\n  addCommands() {\n    return {\n      setCode: () => ({\n        commands\n      }) => {\n        return commands.setMark('code');\n      },\n      toggleCode: () => ({\n        commands\n      }) => {\n        return commands.toggleMark('code');\n      },\n      unsetCode: () => ({\n        commands\n      }) => {\n        return commands.unsetMark('code');\n      }\n    };\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-e': () => this.editor.commands.toggleCode()\n    };\n  },\n\n  addInputRules() {\n    return [markInputRule(inputRegex, this.type)];\n  },\n\n  addPasteRules() {\n    return [markPasteRule(inputRegex, this.type)];\n  }\n\n});\nexport default Code;\nexport { Code, inputRegex, pasteRegex };","map":{"version":3,"sources":["../src/code.ts"],"names":[],"mappings":";MA+Ba,UAAU,GAAG,oC;MACb,UAAU,GAAG,mC;MAEb,IAAI,GAAG,IAAI,CAAC,MAAL,CAAyB;AAC3C,EAAA,IAAI,EAAE,MADqC;AAG3C,EAAA,cAAc,EAAE;AACd,IAAA,cAAc,EAAE;AADF,GAH2B;AAO3C,EAAA,QAAQ,EAAE,GAPiC;;AAS3C,EAAA,SAAS,GAAA;AACP,WAAO,CACL;AAAE,MAAA,GAAG,EAAE;AAAP,KADK,CAAP;AAGD,GAb0C;;AAe3C,EAAA,UAAU,CAAC;AAAE,IAAA;AAAF,GAAD,EAAmB;AAC3B,WAAO,CAAC,MAAD,EAAS,eAAe,CAAC,KAAK,OAAL,CAAa,cAAd,EAA8B,cAA9B,CAAxB,EAAuE,CAAvE,CAAP;AACD,GAjB0C;;AAmB3C,EAAA,WAAW,GAAA;AACT,WAAO;AACL,MAAA,OAAO,EAAE,MAAM,CAAC;AAAE,QAAA;AAAF,OAAD,KAAa;AAC1B,eAAO,QAAQ,CAAC,OAAT,CAAiB,MAAjB,CAAP;AACD,OAHI;AAIL,MAAA,UAAU,EAAE,MAAM,CAAC;AAAE,QAAA;AAAF,OAAD,KAAa;AAC7B,eAAO,QAAQ,CAAC,UAAT,CAAoB,MAApB,CAAP;AACD,OANI;AAOL,MAAA,SAAS,EAAE,MAAM,CAAC;AAAE,QAAA;AAAF,OAAD,KAAa;AAC5B,eAAO,QAAQ,CAAC,SAAT,CAAmB,MAAnB,CAAP;AACD;AATI,KAAP;AAWD,GA/B0C;;AAiC3C,EAAA,oBAAoB,GAAA;AAClB,WAAO;AACL,eAAS,MAAM,KAAK,MAAL,CAAY,QAAZ,CAAqB,UAArB;AADV,KAAP;AAGD,GArC0C;;AAuC3C,EAAA,aAAa,GAAA;AACX,WAAO,CACL,aAAa,CAAC,UAAD,EAAa,KAAK,IAAlB,CADR,CAAP;AAGD,GA3C0C;;AA6C3C,EAAA,aAAa,GAAA;AACX,WAAO,CACL,aAAa,CAAC,UAAD,EAAa,KAAK,IAAlB,CADR,CAAP;AAGD;;AAjD0C,CAAzB,C","sourcesContent":["import {\n  Command,\n  Mark,\n  markInputRule,\n  markPasteRule,\n  mergeAttributes,\n} from '@tiptap/core'\n\nexport interface CodeOptions {\n  HTMLAttributes: Record<string, any>,\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands {\n    code: {\n      /**\n       * Set a code mark\n       */\n      setCode: () => Command,\n      /**\n       * Toggle inline code\n       */\n      toggleCode: () => Command,\n      /**\n       * Unset a code mark\n       */\n      unsetCode: () => Command,\n    }\n  }\n}\n\nexport const inputRegex = /(?:^|\\s)((?:`)((?:[^`]+))(?:`))$/gm\nexport const pasteRegex = /(?:^|\\s)((?:`)((?:[^`]+))(?:`))/gm\n\nexport const Code = Mark.create<CodeOptions>({\n  name: 'code',\n\n  defaultOptions: {\n    HTMLAttributes: {},\n  },\n\n  excludes: '_',\n\n  parseHTML() {\n    return [\n      { tag: 'code' },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['code', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      setCode: () => ({ commands }) => {\n        return commands.setMark('code')\n      },\n      toggleCode: () => ({ commands }) => {\n        return commands.toggleMark('code')\n      },\n      unsetCode: () => ({ commands }) => {\n        return commands.unsetMark('code')\n      },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-e': () => this.editor.commands.toggleCode(),\n    }\n  },\n\n  addInputRules() {\n    return [\n      markInputRule(inputRegex, this.type),\n    ]\n  },\n\n  addPasteRules() {\n    return [\n      markPasteRule(inputRegex, this.type),\n    ]\n  },\n})\n"]},"metadata":{},"sourceType":"module"}