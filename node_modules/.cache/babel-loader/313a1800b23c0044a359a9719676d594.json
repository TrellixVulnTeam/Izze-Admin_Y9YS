{"ast":null,"code":"import { Node, mergeAttributes, nodeInputRule } from '@tiptap/core';\nimport { TextSelection } from 'prosemirror-state';\nconst HorizontalRule = Node.create({\n  name: 'horizontalRule',\n  defaultOptions: {\n    HTMLAttributes: {}\n  },\n  group: 'block',\n\n  parseHTML() {\n    return [{\n      tag: 'hr'\n    }];\n  },\n\n  renderHTML({\n    HTMLAttributes\n  }) {\n    return ['hr', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes)];\n  },\n\n  addCommands() {\n    return {\n      setHorizontalRule: () => ({\n        chain\n      }) => {\n        return chain().insertContent({\n          type: this.name\n        }).command(({\n          tr,\n          dispatch\n        }) => {\n          var _a;\n\n          if (dispatch) {\n            const {\n              parent,\n              pos\n            } = tr.selection.$from;\n            const posAfter = pos + 1;\n            const nodeAfter = tr.doc.nodeAt(posAfter); // end of document\n\n            if (!nodeAfter) {\n              const node = (_a = parent.type.contentMatch.defaultType) === null || _a === void 0 ? void 0 : _a.create();\n\n              if (node) {\n                tr.insert(posAfter, node);\n                tr.setSelection(TextSelection.create(tr.doc, posAfter));\n              }\n            }\n\n            tr.scrollIntoView();\n          }\n\n          return true;\n        }).run();\n      }\n    };\n  },\n\n  addInputRules() {\n    return [nodeInputRule(/^(?:---|â€”-|___\\s|\\*\\*\\*\\s)$/, this.type)];\n  }\n\n});\nexport default HorizontalRule;\nexport { HorizontalRule };","map":null,"metadata":{},"sourceType":"module"}