{"ast":null,"code":"import { Mark, mergeAttributes, markInputRule, markPasteRule } from '@tiptap/core';\nvar inputRegex = /(?:^|\\s)((?:~~)((?:[^~]+))(?:~~))$/gm;\nvar pasteRegex = /(?:^|\\s)((?:~~)((?:[^~]+))(?:~~))/gm;\nvar Strike = Mark.create({\n  name: 'strike',\n  defaultOptions: {\n    HTMLAttributes: {}\n  },\n  parseHTML: function parseHTML() {\n    return [{\n      tag: 's'\n    }, {\n      tag: 'del'\n    }, {\n      tag: 'strike'\n    }, {\n      style: 'text-decoration',\n      consuming: false,\n      getAttrs: function getAttrs(style) {\n        return style.includes('line-through') ? {} : false;\n      }\n    }];\n  },\n  renderHTML: function renderHTML(_ref) {\n    var HTMLAttributes = _ref.HTMLAttributes;\n    return ['s', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n  addCommands: function addCommands() {\n    return {\n      setStrike: function setStrike() {\n        return function (_ref2) {\n          var commands = _ref2.commands;\n          return commands.setMark('strike');\n        };\n      },\n      toggleStrike: function toggleStrike() {\n        return function (_ref3) {\n          var commands = _ref3.commands;\n          return commands.toggleMark('strike');\n        };\n      },\n      unsetStrike: function unsetStrike() {\n        return function (_ref4) {\n          var commands = _ref4.commands;\n          return commands.unsetMark('strike');\n        };\n      }\n    };\n  },\n  addKeyboardShortcuts: function addKeyboardShortcuts() {\n    var _this = this;\n\n    return {\n      'Mod-Shift-x': function ModShiftX() {\n        return _this.editor.commands.toggleStrike();\n      }\n    };\n  },\n  addInputRules: function addInputRules() {\n    return [markInputRule(inputRegex, this.type)];\n  },\n  addPasteRules: function addPasteRules() {\n    return [markPasteRule(pasteRegex, this.type)];\n  }\n});\nexport default Strike;\nexport { Strike, inputRegex, pasteRegex };","map":{"version":3,"sources":["../src/strike.ts"],"names":[],"mappings":";IA+Ba,UAAU,GAAG,sC;IACb,UAAU,GAAG,qC;IAEb,MAAM,GAAG,IAAI,CAAC,MAAL,CAA2B;AAC/C,EAAA,IAAI,EAAE,QADyC;AAG/C,EAAA,cAAc,EAAE;AACd,IAAA,cAAc,EAAE;AADF,GAH+B;AAO/C,EAAA,SAP+C,uBAOtC;AACP,WAAO,CACL;AACE,MAAA,GAAG,EAAE;AADP,KADK,EAIL;AACE,MAAA,GAAG,EAAE;AADP,KAJK,EAOL;AACE,MAAA,GAAG,EAAE;AADP,KAPK,EAUL;AACE,MAAA,KAAK,EAAE,iBADT;AAEE,MAAA,SAAS,EAAE,KAFb;AAGE,MAAA,QAAQ,EAAE,kBAAA,KAAK;AAAA,eAAM,KAAgB,CAAC,QAAjB,CAA0B,cAA1B,IAA4C,EAA5C,GAAiD,KAAvD;AAAA;AAHjB,KAVK,CAAP;AAgBD,GAxB8C;AA0B/C,EAAA,UA1B+C,4BA0BlB;AAAA,QAAhB,cAAgB,QAAhB,cAAgB;AAC3B,WAAO,CAAC,GAAD,EAAM,eAAe,CAAC,KAAK,OAAL,CAAa,cAAd,EAA8B,cAA9B,CAArB,EAAoE,CAApE,CAAP;AACD,GA5B8C;AA8B/C,EAAA,WA9B+C,yBA8BpC;AACT,WAAO;AACL,MAAA,SAAS,EAAE;AAAA,eAAM,iBAAa;AAAA,cAAV,QAAU,SAAV,QAAU;AAC5B,iBAAO,QAAQ,CAAC,OAAT,CAAiB,QAAjB,CAAP;AACD,SAFU;AAAA,OADN;AAIL,MAAA,YAAY,EAAE;AAAA,eAAM,iBAAa;AAAA,cAAV,QAAU,SAAV,QAAU;AAC/B,iBAAO,QAAQ,CAAC,UAAT,CAAoB,QAApB,CAAP;AACD,SAFa;AAAA,OAJT;AAOL,MAAA,WAAW,EAAE;AAAA,eAAM,iBAAa;AAAA,cAAV,QAAU,SAAV,QAAU;AAC9B,iBAAO,QAAQ,CAAC,SAAT,CAAmB,QAAnB,CAAP;AACD,SAFY;AAAA;AAPR,KAAP;AAWD,GA1C8C;AA4C/C,EAAA,oBA5C+C,kCA4C3B;AAAA;;AAClB,WAAO;AACL,qBAAe;AAAA,eAAM,KAAI,CAAC,MAAL,CAAY,QAAZ,CAAqB,YAArB,EAAN;AAAA;AADV,KAAP;AAGD,GAhD8C;AAkD/C,EAAA,aAlD+C,2BAkDlC;AACX,WAAO,CACL,aAAa,CAAC,UAAD,EAAa,KAAK,IAAlB,CADR,CAAP;AAGD,GAtD8C;AAwD/C,EAAA,aAxD+C,2BAwDlC;AACX,WAAO,CACL,aAAa,CAAC,UAAD,EAAa,KAAK,IAAlB,CADR,CAAP;AAGD;AA5D8C,CAA3B,C","sourcesContent":["import {\n  Command,\n  Mark,\n  markInputRule,\n  markPasteRule,\n  mergeAttributes,\n} from '@tiptap/core'\n\nexport interface StrikeOptions {\n  HTMLAttributes: Record<string, any>,\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands {\n    strike: {\n      /**\n       * Set a strike mark\n       */\n      setStrike: () => Command,\n      /**\n       * Toggle a strike mark\n       */\n      toggleStrike: () => Command,\n      /**\n       * Unset a strike mark\n       */\n      unsetStrike: () => Command,\n    }\n  }\n}\n\nexport const inputRegex = /(?:^|\\s)((?:~~)((?:[^~]+))(?:~~))$/gm\nexport const pasteRegex = /(?:^|\\s)((?:~~)((?:[^~]+))(?:~~))/gm\n\nexport const Strike = Mark.create<StrikeOptions>({\n  name: 'strike',\n\n  defaultOptions: {\n    HTMLAttributes: {},\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: 's',\n      },\n      {\n        tag: 'del',\n      },\n      {\n        tag: 'strike',\n      },\n      {\n        style: 'text-decoration',\n        consuming: false,\n        getAttrs: style => ((style as string).includes('line-through') ? {} : false),\n      },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['s', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      setStrike: () => ({ commands }) => {\n        return commands.setMark('strike')\n      },\n      toggleStrike: () => ({ commands }) => {\n        return commands.toggleMark('strike')\n      },\n      unsetStrike: () => ({ commands }) => {\n        return commands.unsetMark('strike')\n      },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Shift-x': () => this.editor.commands.toggleStrike(),\n    }\n  },\n\n  addInputRules() {\n    return [\n      markInputRule(inputRegex, this.type),\n    ]\n  },\n\n  addPasteRules() {\n    return [\n      markPasteRule(pasteRegex, this.type),\n    ]\n  },\n})\n"]},"metadata":{},"sourceType":"module"}