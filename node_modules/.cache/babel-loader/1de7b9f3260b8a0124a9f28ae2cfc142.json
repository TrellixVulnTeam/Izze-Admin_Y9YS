{"ast":null,"code":"var _jsxFileName = \"D:\\\\Pyramidion\\\\WebApp\\\\Izze-Admin\\\\src\\\\pages\\\\NutritionIngredients\\\\NutritionIngredients.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useRef } from 'react';\nimport { Button, Dialog, DialogContent, Grid, makeStyles, TextField, Typography } from '@material-ui/core';\nimport AddIcon from '@material-ui/icons/Add';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport DialogTitle from '../../components/DialogTitlle/DialogTitle';\nimport Page from '../../components/Page/Page';\nimport ControlPointIcon from '@material-ui/icons/ControlPoint';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: theme.breakpoints.values.lg,\n    maxWidth: '100%',\n    margin: '0 auto',\n    padding: theme.spacing(3)\n  },\n  themeButton: {\n    color: theme.palette.white,\n    backgroundColor: theme.palette.green.main,\n    '&:hover': {\n      backgroundColor: theme.palette.green.dark\n    }\n  }\n}));\n\nfunction NutritionIngredients() {\n  _s();\n\n  const classes = useStyles();\n  const [addEditDialog, setAddEditDialog] = React.useState({\n    isOpen: false,\n    title: '',\n    okBtnText: '',\n    isEdit: false,\n    data: {}\n  });\n\n  const openAddDialog = () => {\n    setAddEditDialog(prevState => ({ ...prevState,\n      isOpen: true,\n      title: 'Add Nutrition Ingredients',\n      isEdit: false,\n      okBtnText: 'Save'\n    }));\n  };\n\n  const closeAddEditDialog = () => {\n    setAddEditDialog(prevState => ({ ...prevState,\n      isOpen: false\n    }));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.root,\n    children: [/*#__PURE__*/_jsxDEV(Page, {\n      title: \"Nutrition Ingredients\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      alignItems: \"flex-end\",\n      container: true,\n      justify: \"space-between\",\n      spacing: 3,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          component: \"h1\",\n          variant: \"h3\",\n          children: \"Nutrition Ingredients\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          onClick: () => openAddDialog(),\n          className: classes.themeButton,\n          startIcon: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 24\n          }, this),\n          children: \"Add\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ViewandEditDialogue, { ...addEditDialog,\n      onClose: closeAddEditDialog\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}\n\n_s(NutritionIngredients, \"s5o9kyFm5KAS0TTYVhpPTPgOC/g=\", false, function () {\n  return [useStyles];\n});\n\n_c = NutritionIngredients;\n\nconst ViewandEditDialogue = props => {\n  _s2();\n\n  const {\n    isEdit,\n    isOpen,\n    okBtnText = 'OK',\n    onClose,\n    data,\n    title,\n    onSuccess\n  } = props;\n  const classes = useStyles();\n  const formikRef = useRef(null);\n  const initialValues = {\n    nutrientName: '',\n    image: '',\n    quantity: '',\n    protien: '',\n    fat: '',\n    carbs: '',\n    calories: '',\n    benifits: [],\n    description: ''\n  };\n  const [initialFormValues, setInitialFormValues] = React.useState({ ...initialValues\n  });\n\n  const onSubmit = () => {\n    alert('done');\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Dialog, {\n      open: isOpen,\n      disableBackdropClick: true,\n      disableEscapeKeyDown: true,\n      fullWidth: true,\n      maxWidth: \"md\",\n      \"aria-labelledby\": \"dialog-title\",\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        id: \"dialog-title\",\n        onClose: onClose,\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Formik, {\n        innerRef: formikRef,\n        enableReinitialize: true,\n        initialValues: initialFormValues,\n        onSubmit: onSubmit,\n        validationSchema: Yup.object().shape({\n          nutrientName: Yup.string().trim().required('Name is required'),\n          quantity: Yup.string().trim().required('Quality is required'),\n          protien: Yup.string().trim().required('Protein is required'),\n          fat: Yup.string().trim().required('Fat is required'),\n          carbs: Yup.string().trim().required('Carbs is required'),\n          calories: Yup.string().trim().required('Calories is required'),\n          description: Yup.string().trim().required('Description is required')\n        }),\n        children: ({\n          values,\n          errors,\n          touched,\n          handleBlur,\n          handleChange,\n          submitForm,\n          isSubmitting\n        }) => /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(DialogContent, {\n            dividers: true,\n            children: /*#__PURE__*/_jsxDEV(Grid, {\n              container: true,\n              spacing: 2,\n              children: [/*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 12,\n                children: /*#__PURE__*/_jsxDEV(TextField, {\n                  fullWidth: true,\n                  label: \"Name\",\n                  name: \"nutrientName\",\n                  variant: \"outlined\",\n                  error: Boolean(touched.nutrientName && errors.nutrientName),\n                  helperText: touched.nutrientName && errors.nutrientName,\n                  value: values.nutrientName,\n                  onChange: handleChange,\n                  onBlur: handleBlur\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 144,\n                  columnNumber: 29\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 143,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 12,\n                children: /*#__PURE__*/_jsxDEV(TextField, {\n                  fullWidth: true,\n                  label: \"Quantity\",\n                  name: \"quantity\",\n                  variant: \"outlined\",\n                  error: Boolean(touched.quantity && errors.quantity),\n                  helperText: touched.quantity && errors.quantity,\n                  value: values.quantity,\n                  onChange: handleChange,\n                  onBlur: handleBlur\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 158,\n                  columnNumber: 29\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 157,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 6,\n                children: /*#__PURE__*/_jsxDEV(TextField, {\n                  fullWidth: true,\n                  label: \"Protien\",\n                  name: \"protien\",\n                  variant: \"outlined\",\n                  error: Boolean(touched.protien && errors.protien),\n                  helperText: touched.protien && errors.protien,\n                  value: values.protien,\n                  onChange: handleChange,\n                  onBlur: handleBlur\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 172,\n                  columnNumber: 29\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 171,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 6,\n                children: /*#__PURE__*/_jsxDEV(TextField, {\n                  fullWidth: true,\n                  label: \"Fat\",\n                  name: \"fat\",\n                  variant: \"outlined\",\n                  error: Boolean(touched.fat && errors.fat),\n                  helperText: touched.fat && errors.fat,\n                  value: values.fat,\n                  onChange: handleChange,\n                  onBlur: handleBlur\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 186,\n                  columnNumber: 29\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 185,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 6,\n                children: /*#__PURE__*/_jsxDEV(TextField, {\n                  fullWidth: true,\n                  label: \"Carbs\",\n                  name: \"carbs\",\n                  variant: \"outlined\",\n                  error: Boolean(touched.carbs && errors.carbs),\n                  helperText: touched.carbs && errors.carbs,\n                  value: values.carbs,\n                  onChange: handleChange,\n                  onBlur: handleBlur\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 200,\n                  columnNumber: 29\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 199,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 6,\n                children: /*#__PURE__*/_jsxDEV(TextField, {\n                  fullWidth: true,\n                  label: \"Calories\",\n                  name: \"calories\",\n                  variant: \"outlined\",\n                  error: Boolean(touched.calories && errors.calories),\n                  helperText: touched.calories && errors.calories,\n                  value: values.calories,\n                  onChange: handleChange,\n                  onBlur: handleBlur\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 214,\n                  columnNumber: 29\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 213,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 12,\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  fullWidth: true,\n                  className: classes.themeButton,\n                  variant: \"contained\",\n                  color: \"default\" // onClick={() => addIngredients(values, setFieldValue)}\n                  ,\n                  endIcon: /*#__PURE__*/_jsxDEV(ControlPointIcon, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 234,\n                    columnNumber: 40\n                  }, this),\n                  children: \"Add Ingredients\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 228,\n                  columnNumber: 30\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 227,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 17\n          }, this)\n        }, void 0, false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 8\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(ViewandEditDialogue, \"myIj+nYUlKZVGmFgWU//diqK9S8=\", false, function () {\n  return [useStyles];\n});\n\n_c2 = ViewandEditDialogue;\nexport default NutritionIngredients;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"NutritionIngredients\");\n$RefreshReg$(_c2, \"ViewandEditDialogue\");","map":{"version":3,"sources":["D:/Pyramidion/WebApp/Izze-Admin/src/pages/NutritionIngredients/NutritionIngredients.tsx"],"names":["React","useRef","Button","Dialog","DialogContent","Grid","makeStyles","TextField","Typography","AddIcon","Formik","Yup","DialogTitle","Page","ControlPointIcon","useStyles","theme","root","width","breakpoints","values","lg","maxWidth","margin","padding","spacing","themeButton","color","palette","white","backgroundColor","green","main","dark","NutritionIngredients","classes","addEditDialog","setAddEditDialog","useState","isOpen","title","okBtnText","isEdit","data","openAddDialog","prevState","closeAddEditDialog","ViewandEditDialogue","props","onClose","onSuccess","formikRef","initialValues","nutrientName","image","quantity","protien","fat","carbs","calories","benifits","description","initialFormValues","setInitialFormValues","onSubmit","alert","object","shape","string","trim","required","errors","touched","handleBlur","handleChange","submitForm","isSubmitting","Boolean"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport { Avatar, Button, Card, CardActions, CardContent, CircularProgress, Dialog, DialogActions, DialogContent, Grid, IconButton, makeStyles, Paper, Tab, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, TextField, Tooltip, Typography } from '@material-ui/core';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport CenterFocusStrongIcon from '@material-ui/icons/CenterFocusStrong';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport { Pagination, TabContext, TabList, TabPanel } from '@material-ui/lab';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport { Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport DialogTitle from '../../components/DialogTitlle/DialogTitle';\r\nimport { TableLoader, TableNoData } from '../../components/Loader/Loader';\r\nimport Page from '../../components/Page/Page';\r\nimport useConfModel from '../../hook/useConfModel';\r\nimport useService from '../../hook/useService';\r\nimport useSnackbar from '../../hook/useSnackbar';\r\nimport ControlPointIcon from '@material-ui/icons/ControlPoint';\r\n\r\n\r\nconst useStyles = makeStyles((theme: any) => ({\r\n    root: {\r\n      width: theme.breakpoints.values.lg,\r\n      maxWidth: '100%',\r\n      margin: '0 auto',\r\n      padding: theme.spacing(3),\r\n    },\r\n    themeButton: {\r\n        color: theme.palette.white,\r\n        backgroundColor: theme.palette.green.main,\r\n        '&:hover': {\r\n          backgroundColor: theme.palette.green.dark,\r\n        },\r\n      },\r\n  }));\r\n\r\nfunction NutritionIngredients() {\r\n  const classes = useStyles()\r\n  const [addEditDialog, setAddEditDialog] = React.useState({\r\n    isOpen: false,\r\n    title: '',\r\n    okBtnText: '',\r\n    isEdit: false,\r\n    data: {},\r\n  });\r\n\r\n  const openAddDialog = () => {\r\n    setAddEditDialog((prevState: any) => ({\r\n      ...prevState,\r\n      isOpen: true,\r\n      title: 'Add Nutrition Ingredients',\r\n      isEdit: false,\r\n      okBtnText: 'Save',\r\n    }));\r\n  };\r\n\r\n  const closeAddEditDialog = () =>{\r\n    setAddEditDialog((prevState: any) => ({ ...prevState, isOpen: false }));\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Page title='Nutrition Ingredients' />\r\n      <Grid alignItems='flex-end' container justify='space-between' spacing={3}>\r\n        <Grid item>\r\n          <Typography component='h1' variant='h3'>\r\n            Nutrition Ingredients\r\n          </Typography>\r\n        </Grid>\r\n        <Grid item>\r\n          <Button\r\n            variant='contained'\r\n            onClick={() => openAddDialog()}\r\n            className={classes.themeButton}\r\n            startIcon={<AddIcon />}\r\n          >\r\n            Add\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n      <ViewandEditDialogue {...addEditDialog}  onClose={closeAddEditDialog}/>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst ViewandEditDialogue = (props: any) =>{\r\n    const { isEdit, isOpen, okBtnText = 'OK', onClose,data, title, onSuccess} = props;\r\n    const classes = useStyles()\r\n    const formikRef = useRef<any>(null)\r\n    const initialValues = {\r\n        nutrientName : '',\r\n        image : '',\r\n        quantity : '',\r\n        protien : '',\r\n        fat : '',\r\n        carbs : '',\r\n        calories : '',\r\n        benifits : [],\r\n        description : ''\r\n    };\r\n    const [initialFormValues,setInitialFormValues] = React.useState({...initialValues});\r\n\r\n    const onSubmit = () =>{\r\n        alert('done')\r\n    }\r\n\r\n    return (\r\n    <div>\r\n       <Dialog \r\n        open={isOpen}\r\n        disableBackdropClick\r\n        disableEscapeKeyDown\r\n        fullWidth\r\n        maxWidth='md'\r\n        aria-labelledby='dialog-title' >\r\n\r\n        <DialogTitle id='dialog-title' onClose={onClose}>\r\n          {title}\r\n        </DialogTitle>\r\n        <Formik\r\n        innerRef={formikRef}\r\n        enableReinitialize\r\n        initialValues={initialFormValues}\r\n        onSubmit={onSubmit}\r\n        validationSchema={Yup.object().shape({\r\n            nutrientName: Yup.string().trim().required('Name is required'),\r\n            quantity : Yup.string().trim().required('Quality is required'),\r\n            protien : Yup.string().trim().required('Protein is required'),\r\n            fat : Yup.string().trim().required('Fat is required'),\r\n            carbs : Yup.string().trim().required('Carbs is required'),\r\n            calories : Yup.string().trim().required('Calories is required'),\r\n            description : Yup.string().trim().required('Description is required'),\r\n\r\n        })}\r\n        >\r\n            {({values, errors, touched, handleBlur,handleChange, submitForm, isSubmitting,})=>(\r\n                <>\r\n                <DialogContent dividers>\r\n                    <Grid container spacing = {2}>\r\n                        <Grid item xs={12}>\r\n                            <TextField\r\n                                fullWidth\r\n                                label='Name'\r\n                                name='nutrientName'\r\n                                variant='outlined'\r\n                                error={Boolean(touched.nutrientName && errors.nutrientName)}\r\n                                helperText={touched.nutrientName && errors.nutrientName}\r\n                                value={values.nutrientName}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                            />\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12}>\r\n                            <TextField\r\n                                fullWidth\r\n                                label='Quantity'\r\n                                name='quantity'\r\n                                variant='outlined'\r\n                                error={Boolean(touched.quantity && errors.quantity)}\r\n                                helperText={touched.quantity && errors.quantity}\r\n                                value={values.quantity}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                            />\r\n                        </Grid>\r\n\r\n                        <Grid item xs={6}>\r\n                            <TextField\r\n                                fullWidth\r\n                                label='Protien'\r\n                                name='protien'\r\n                                variant='outlined'\r\n                                error={Boolean(touched.protien && errors.protien)}\r\n                                helperText={touched.protien && errors.protien}\r\n                                value={values.protien}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                            />\r\n                        </Grid>\r\n\r\n                        <Grid item xs={6}>\r\n                            <TextField\r\n                                fullWidth\r\n                                label='Fat'\r\n                                name='fat'\r\n                                variant='outlined'\r\n                                error={Boolean(touched.fat && errors.fat)}\r\n                                helperText={touched.fat && errors.fat}\r\n                                value={values.fat}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                            />\r\n                        </Grid>\r\n\r\n                        <Grid item xs={6}>\r\n                            <TextField\r\n                                fullWidth\r\n                                label='Carbs'\r\n                                name='carbs'\r\n                                variant='outlined'\r\n                                error={Boolean(touched.carbs && errors.carbs)}\r\n                                helperText={touched.carbs && errors.carbs}\r\n                                value={values.carbs}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                            />\r\n                        </Grid>\r\n\r\n                        <Grid item xs={6}>\r\n                            <TextField\r\n                                fullWidth\r\n                                label='Calories'\r\n                                name='calories'\r\n                                variant='outlined'\r\n                                error={Boolean(touched.calories && errors.calories)}\r\n                                helperText={touched.calories && errors.calories}\r\n                                value={values.calories}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                            />\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12}>\r\n                             <Button\r\n                             fullWidth\r\n                              className={classes.themeButton}\r\n                              variant='contained'\r\n                              color='default'\r\n                              // onClick={() => addIngredients(values, setFieldValue)}\r\n                              endIcon={<ControlPointIcon />}\r\n                            >\r\n                              Add Ingredients\r\n                            </Button>\r\n                        </Grid>\r\n\r\n                        \r\n\r\n                    </Grid>\r\n                </DialogContent>\r\n                </>\r\n            )}\r\n        </Formik>\r\n\r\n       </Dialog>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default NutritionIngredients;\r\n"]},"metadata":{},"sourceType":"module"}