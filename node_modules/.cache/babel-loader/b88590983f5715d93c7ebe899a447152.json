{"ast":null,"code":"import { Node, mergeAttributes, nodeInputRule } from '@tiptap/core';\nimport { TextSelection } from 'prosemirror-state';\nvar HorizontalRule = Node.create({\n  name: 'horizontalRule',\n  defaultOptions: {\n    HTMLAttributes: {}\n  },\n  group: 'block',\n  parseHTML: function parseHTML() {\n    return [{\n      tag: 'hr'\n    }];\n  },\n  renderHTML: function renderHTML(_ref) {\n    var HTMLAttributes = _ref.HTMLAttributes;\n    return ['hr', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes)];\n  },\n  addCommands: function addCommands() {\n    var _this = this;\n\n    return {\n      setHorizontalRule: function setHorizontalRule() {\n        return function (_ref2) {\n          var chain = _ref2.chain;\n          return chain().insertContent({\n            type: _this.name\n          }).command(function (_ref3) {\n            var tr = _ref3.tr,\n                dispatch = _ref3.dispatch;\n\n            var _a;\n\n            if (dispatch) {\n              var _tr$selection$$from = tr.selection.$from,\n                  parent = _tr$selection$$from.parent,\n                  pos = _tr$selection$$from.pos;\n              var posAfter = pos + 1;\n              var nodeAfter = tr.doc.nodeAt(posAfter); // end of document\n\n              if (!nodeAfter) {\n                var node = (_a = parent.type.contentMatch.defaultType) === null || _a === void 0 ? void 0 : _a.create();\n\n                if (node) {\n                  tr.insert(posAfter, node);\n                  tr.setSelection(TextSelection.create(tr.doc, posAfter));\n                }\n              }\n\n              tr.scrollIntoView();\n            }\n\n            return true;\n          }).run();\n        };\n      }\n    };\n  },\n  addInputRules: function addInputRules() {\n    return [nodeInputRule(/^(?:---|—-|___\\s|\\*\\*\\*\\s)$/, this.type)];\n  }\n});\nexport default HorizontalRule;\nexport { HorizontalRule };","map":{"version":3,"sources":["../src/horizontal-rule.ts"],"names":[],"mappings":";;IAuBa,cAAc,GAAG,IAAI,CAAC,MAAL,CAAmC;AAC/D,EAAA,IAAI,EAAE,gBADyD;AAG/D,EAAA,cAAc,EAAE;AACd,IAAA,cAAc,EAAE;AADF,GAH+C;AAO/D,EAAA,KAAK,EAAE,OAPwD;AAS/D,EAAA,SAT+D,uBAStD;AACP,WAAO,CACL;AAAE,MAAA,GAAG,EAAE;AAAP,KADK,CAAP;AAGD,GAb8D;AAe/D,EAAA,UAf+D,4BAelC;AAAA,QAAhB,cAAgB,QAAhB,cAAgB;AAC3B,WAAO,CAAC,IAAD,EAAO,eAAe,CAAC,KAAK,OAAL,CAAa,cAAd,EAA8B,cAA9B,CAAtB,CAAP;AACD,GAjB8D;AAmB/D,EAAA,WAnB+D,yBAmBpD;AAAA;;AACT,WAAO;AACL,MAAA,iBAAiB,EAAE;AAAA,eAAM,iBAAU;AAAA,cAAP,KAAO,SAAP,KAAO;AACjC,iBAAO,KAAK,GACT,aADI,CACU;AAAE,YAAA,IAAI,EAAE,KAAI,CAAC;AAAb,WADV,EAEJ,OAFI,CAEI,iBAAiB;AAAA,gBAAd,EAAc,SAAd,EAAc;AAAA,gBAAV,QAAU,SAAV,QAAU;;;;AACxB,gBAAI,QAAJ,EAAc;AACZ,wCAAwB,EAAE,CAAC,SAAH,CAAa,KAArC;AAAA,kBAAQ,MAAR,uBAAQ,MAAR;AAAA,kBAAgB,GAAhB,uBAAgB,GAAhB;AACA,kBAAM,QAAQ,GAAG,GAAG,GAAG,CAAvB;AACA,kBAAM,SAAS,GAAG,EAAE,CAAC,GAAH,CAAO,MAAP,CAAc,QAAd,CAAlB,CAHY,C;;AAMZ,kBAAI,CAAC,SAAL,EAAgB;AACd,oBAAM,IAAI,GAAG,CAAA,EAAA,GAAA,MAAM,CAAC,IAAP,CAAY,YAAZ,CAAyB,WAAzB,MAAoC,IAApC,IAAoC,EAAA,KAAA,KAAA,CAApC,GAAoC,KAAA,CAApC,GAAoC,EAAA,CAAE,MAAF,EAAjD;;AAEA,oBAAI,IAAJ,EAAU;AACR,kBAAA,EAAE,CAAC,MAAH,CAAU,QAAV,EAAoB,IAApB;AACA,kBAAA,EAAE,CAAC,YAAH,CAAgB,aAAa,CAAC,MAAd,CAAqB,EAAE,CAAC,GAAxB,EAA6B,QAA7B,CAAhB;AACD;AACF;;AAED,cAAA,EAAE,CAAC,cAAH;AACD;;AAED,mBAAO,IAAP;AACD,WAtBI,EAuBJ,GAvBI,EAAP;AAwBD,SAzBkB;AAAA;AADd,KAAP;AA4BD,GAhD8D;AAkD/D,EAAA,aAlD+D,2BAkDlD;AACX,WAAO,CACL,aAAa,CAAC,6BAAD,EAAgC,KAAK,IAArC,CADR,CAAP;AAGD;AAtD8D,CAAnC,C","sourcesContent":["import {\n  Command,\n  Node,\n  nodeInputRule,\n  mergeAttributes,\n} from '@tiptap/core'\nimport { TextSelection } from 'prosemirror-state'\n\nexport interface HorizontalRuleOptions {\n  HTMLAttributes: Record<string, any>,\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands {\n    horizontalRule: {\n      /**\n       * Add a horizontal rule\n       */\n      setHorizontalRule: () => Command,\n    }\n  }\n}\n\nexport const HorizontalRule = Node.create<HorizontalRuleOptions>({\n  name: 'horizontalRule',\n\n  defaultOptions: {\n    HTMLAttributes: {},\n  },\n\n  group: 'block',\n\n  parseHTML() {\n    return [\n      { tag: 'hr' },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['hr', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes)]\n  },\n\n  addCommands() {\n    return {\n      setHorizontalRule: () => ({ chain }) => {\n        return chain()\n          .insertContent({ type: this.name })\n          .command(({ tr, dispatch }) => {\n            if (dispatch) {\n              const { parent, pos } = tr.selection.$from\n              const posAfter = pos + 1\n              const nodeAfter = tr.doc.nodeAt(posAfter)\n\n              // end of document\n              if (!nodeAfter) {\n                const node = parent.type.contentMatch.defaultType?.create()\n\n                if (node) {\n                  tr.insert(posAfter, node)\n                  tr.setSelection(TextSelection.create(tr.doc, posAfter))\n                }\n              }\n\n              tr.scrollIntoView()\n            }\n\n            return true\n          })\n          .run()\n      },\n    }\n  },\n\n  addInputRules() {\n    return [\n      nodeInputRule(/^(?:---|—-|___\\s|\\*\\*\\*\\s)$/, this.type),\n    ]\n  },\n})\n"]},"metadata":{},"sourceType":"module"}