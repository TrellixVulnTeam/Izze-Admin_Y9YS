{"ast":null,"code":"import _defineProperty from \"D:/Pyramidion/WebApp/Izze-Admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"D:/Pyramidion/WebApp/Izze-Admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { Node, mergeAttributes } from '@tiptap/core';\nimport { textblockTypeInputRule } from 'prosemirror-inputrules';\nvar Heading = Node.create({\n  name: 'heading',\n  defaultOptions: {\n    levels: [1, 2, 3, 4, 5, 6],\n    HTMLAttributes: {}\n  },\n  content: 'inline*',\n  group: 'block',\n  defining: true,\n  addAttributes: function addAttributes() {\n    return {\n      level: {\n        default: 1,\n        rendered: false\n      }\n    };\n  },\n  parseHTML: function parseHTML() {\n    return this.options.levels.map(function (level) {\n      return {\n        tag: \"h\".concat(level),\n        attrs: {\n          level: level\n        }\n      };\n    });\n  },\n  renderHTML: function renderHTML(_ref) {\n    var node = _ref.node,\n        HTMLAttributes = _ref.HTMLAttributes;\n    var hasLevel = this.options.levels.includes(node.attrs.level);\n    var level = hasLevel ? node.attrs.level : this.options.levels[0];\n    return [\"h\".concat(level), mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n  addCommands: function addCommands() {\n    var _this = this;\n\n    return {\n      setHeading: function setHeading(attributes) {\n        return function (_ref2) {\n          var commands = _ref2.commands;\n\n          if (!_this.options.levels.includes(attributes.level)) {\n            return false;\n          }\n\n          return commands.setNode('heading', attributes);\n        };\n      },\n      toggleHeading: function toggleHeading(attributes) {\n        return function (_ref3) {\n          var commands = _ref3.commands;\n\n          if (!_this.options.levels.includes(attributes.level)) {\n            return false;\n          }\n\n          return commands.toggleNode('heading', 'paragraph', attributes);\n        };\n      }\n    };\n  },\n  addKeyboardShortcuts: function addKeyboardShortcuts() {\n    var _this2 = this;\n\n    return this.options.levels.reduce(function (items, level) {\n      return _objectSpread(_objectSpread({}, items), _defineProperty({}, \"Mod-Alt-\".concat(level), function ModAlt() {\n        return _this2.editor.commands.toggleHeading({\n          level: level\n        });\n      }));\n    }, {});\n  },\n  addInputRules: function addInputRules() {\n    var _this3 = this;\n\n    return this.options.levels.map(function (level) {\n      return textblockTypeInputRule(new RegExp(\"^(#{1,\".concat(level, \"})\\\\s$\")), _this3.type, {\n        level: level\n      });\n    });\n  }\n});\nexport default Heading;\nexport { Heading };","map":{"version":3,"sources":["../src/heading.ts"],"names":[],"mappings":"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","sourcesContent":["import { Command, Node, mergeAttributes } from '@tiptap/core'\nimport { textblockTypeInputRule } from 'prosemirror-inputrules'\n\ntype Level = 1 | 2 | 3 | 4 | 5 | 6\n\nexport interface HeadingOptions {\n  levels: Level[],\n  HTMLAttributes: Record<string, any>,\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands {\n    heading: {\n      /**\n       * Set a heading node\n       */\n      setHeading: (attributes: { level: Level }) => Command,\n      /**\n       * Toggle a heading node\n       */\n      toggleHeading: (attributes: { level: Level }) => Command,\n    }\n  }\n}\n\nexport const Heading = Node.create<HeadingOptions>({\n  name: 'heading',\n\n  defaultOptions: {\n    levels: [1, 2, 3, 4, 5, 6],\n    HTMLAttributes: {},\n  },\n\n  content: 'inline*',\n\n  group: 'block',\n\n  defining: true,\n\n  addAttributes() {\n    return {\n      level: {\n        default: 1,\n        rendered: false,\n      },\n    }\n  },\n\n  parseHTML() {\n    return this.options.levels\n      .map((level: Level) => ({\n        tag: `h${level}`,\n        attrs: { level },\n      }))\n  },\n\n  renderHTML({ node, HTMLAttributes }) {\n    const hasLevel = this.options.levels.includes(node.attrs.level)\n    const level = hasLevel\n      ? node.attrs.level\n      : this.options.levels[0]\n\n    return [`h${level}`, mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      setHeading: attributes => ({ commands }) => {\n        if (!this.options.levels.includes(attributes.level)) {\n          return false\n        }\n\n        return commands.setNode('heading', attributes)\n      },\n      toggleHeading: attributes => ({ commands }) => {\n        if (!this.options.levels.includes(attributes.level)) {\n          return false\n        }\n\n        return commands.toggleNode('heading', 'paragraph', attributes)\n      },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return this.options.levels.reduce((items, level) => ({\n      ...items,\n      ...{\n        [`Mod-Alt-${level}`]: () => this.editor.commands.toggleHeading({ level }),\n      },\n    }), {})\n  },\n\n  addInputRules() {\n    return this.options.levels.map(level => {\n      return textblockTypeInputRule(new RegExp(`^(#{1,${level}})\\\\s$`), this.type, { level })\n    })\n  },\n})\n"]},"metadata":{},"sourceType":"module"}