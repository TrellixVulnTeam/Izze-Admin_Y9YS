{"ast":null,"code":"import _objectSpread from \"D:/Pyramidion/WebApp/Izze-Admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"D:/Pyramidion/WebApp/Izze-Admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:/Pyramidion/WebApp/Izze-Admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { posToDOMRect, Extension } from '@tiptap/core';\nimport { PluginKey, Plugin } from 'prosemirror-state';\nimport tippy from 'tippy.js';\n\nvar FloatingMenuView = /*#__PURE__*/function () {\n  function FloatingMenuView(_ref) {\n    var _this = this;\n\n    var editor = _ref.editor,\n        element = _ref.element,\n        view = _ref.view,\n        tippyOptions = _ref.tippyOptions;\n\n    _classCallCheck(this, FloatingMenuView);\n\n    this.preventHide = false;\n\n    this.mousedownHandler = function () {\n      _this.preventHide = true;\n    };\n\n    this.focusHandler = function () {\n      // we use `setTimeout` to make sure `selection` is already updated\n      setTimeout(function () {\n        return _this.update(_this.editor.view);\n      });\n    };\n\n    this.blurHandler = function (_ref2) {\n      var event = _ref2.event;\n\n      var _a;\n\n      if (_this.preventHide) {\n        _this.preventHide = false;\n        return;\n      }\n\n      if ((event === null || event === void 0 ? void 0 : event.relatedTarget) && ((_a = _this.element.parentNode) === null || _a === void 0 ? void 0 : _a.contains(event.relatedTarget))) {\n        return;\n      }\n\n      _this.hide();\n    };\n\n    this.editor = editor;\n    this.element = element;\n    this.view = view;\n    this.element.addEventListener('mousedown', this.mousedownHandler, {\n      capture: true\n    });\n    this.editor.on('focus', this.focusHandler);\n    this.editor.on('blur', this.blurHandler);\n    this.createTooltip(tippyOptions);\n    this.element.style.visibility = 'visible';\n  }\n\n  _createClass(FloatingMenuView, [{\n    key: \"createTooltip\",\n    value: function createTooltip() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.tippy = tippy(this.view.dom, _objectSpread({\n        duration: 0,\n        getReferenceClientRect: null,\n        content: this.element,\n        interactive: true,\n        trigger: 'manual',\n        placement: 'right',\n        hideOnClick: 'toggle'\n      }, options));\n    }\n  }, {\n    key: \"update\",\n    value: function update(view, oldState) {\n      var state = view.state,\n          composing = view.composing;\n      var doc = state.doc,\n          selection = state.selection;\n      var isSame = oldState && oldState.doc.eq(doc) && oldState.selection.eq(selection);\n\n      if (composing || isSame) {\n        return;\n      }\n\n      var $anchor = selection.$anchor,\n          empty = selection.empty,\n          from = selection.from,\n          to = selection.to;\n      var isRootDepth = $anchor.depth === 1;\n      var isNodeEmpty = !selection.$anchor.parent.isLeaf && !selection.$anchor.parent.textContent;\n      var isActive = isRootDepth && isNodeEmpty;\n\n      if (!empty || !isActive) {\n        this.hide();\n        return;\n      }\n\n      this.tippy.setProps({\n        getReferenceClientRect: function getReferenceClientRect() {\n          return posToDOMRect(view, from, to);\n        }\n      });\n      this.show();\n    }\n  }, {\n    key: \"show\",\n    value: function show() {\n      this.tippy.show();\n    }\n  }, {\n    key: \"hide\",\n    value: function hide() {\n      this.tippy.hide();\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.tippy.destroy();\n      this.element.removeEventListener('mousedown', this.mousedownHandler);\n      this.editor.off('focus', this.focusHandler);\n      this.editor.off('blur', this.blurHandler);\n    }\n  }]);\n\n  return FloatingMenuView;\n}();\n\nvar FloatingMenuPluginKey = new PluginKey('menuFloating');\n\nvar FloatingMenuPlugin = function FloatingMenuPlugin(options) {\n  return new Plugin({\n    key: FloatingMenuPluginKey,\n    view: function view(_view) {\n      return new FloatingMenuView(_objectSpread({\n        view: _view\n      }, options));\n    }\n  });\n};\n\nvar FloatingMenu = Extension.create({\n  name: 'bubbleMenu',\n  defaultOptions: {\n    element: null,\n    tippyOptions: {}\n  },\n  addProseMirrorPlugins: function addProseMirrorPlugins() {\n    if (!this.options.element) {\n      return [];\n    }\n\n    return [FloatingMenuPlugin({\n      editor: this.editor,\n      element: this.options.element,\n      tippyOptions: this.options.tippyOptions\n    })];\n  }\n});\nexport default FloatingMenu;\nexport { FloatingMenu, FloatingMenuPlugin, FloatingMenuPluginKey, FloatingMenuView };","map":null,"metadata":{},"sourceType":"module"}