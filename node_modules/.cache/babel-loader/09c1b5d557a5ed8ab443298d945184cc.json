{"ast":null,"code":"import { Node, mergeAttributes } from '@tiptap/core';\nimport { textblockTypeInputRule } from 'prosemirror-inputrules';\nconst Heading = Node.create({\n  name: 'heading',\n  defaultOptions: {\n    levels: [1, 2, 3, 4, 5, 6],\n    HTMLAttributes: {}\n  },\n  content: 'inline*',\n  group: 'block',\n  defining: true,\n\n  addAttributes() {\n    return {\n      level: {\n        default: 1,\n        rendered: false\n      }\n    };\n  },\n\n  parseHTML() {\n    return this.options.levels.map(level => ({\n      tag: `h${level}`,\n      attrs: {\n        level\n      }\n    }));\n  },\n\n  renderHTML({\n    node,\n    HTMLAttributes\n  }) {\n    const hasLevel = this.options.levels.includes(node.attrs.level);\n    const level = hasLevel ? node.attrs.level : this.options.levels[0];\n    return [`h${level}`, mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n\n  addCommands() {\n    return {\n      setHeading: attributes => ({\n        commands\n      }) => {\n        if (!this.options.levels.includes(attributes.level)) {\n          return false;\n        }\n\n        return commands.setNode('heading', attributes);\n      },\n      toggleHeading: attributes => ({\n        commands\n      }) => {\n        if (!this.options.levels.includes(attributes.level)) {\n          return false;\n        }\n\n        return commands.toggleNode('heading', 'paragraph', attributes);\n      }\n    };\n  },\n\n  addKeyboardShortcuts() {\n    return this.options.levels.reduce((items, level) => ({ ...items,\n      ...{\n        [`Mod-Alt-${level}`]: () => this.editor.commands.toggleHeading({\n          level\n        })\n      }\n    }), {});\n  },\n\n  addInputRules() {\n    return this.options.levels.map(level => {\n      return textblockTypeInputRule(new RegExp(`^(#{1,${level}})\\\\s$`), this.type, {\n        level\n      });\n    });\n  }\n\n});\nexport default Heading;\nexport { Heading };","map":null,"metadata":{},"sourceType":"module"}