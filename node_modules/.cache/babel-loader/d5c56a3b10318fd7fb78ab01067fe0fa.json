{"ast":null,"code":"import { Mark, mergeAttributes, markPasteRule } from '@tiptap/core';\nimport { Plugin, PluginKey } from 'prosemirror-state';\n/**\r\n * A regex that matches any string that contains a link\r\n */\n\nconst pasteRegex = /https?:\\/\\/(?:www\\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z]{2,}\\b(?:[-a-zA-Z0-9@:%._+~#=?!&/]*)(?:[-a-zA-Z0-9@:%._+~#=?!&/]*)/gi;\n/**\r\n * A regex that matches an url\r\n */\n\nconst pasteRegexExact = /^https?:\\/\\/(?:www\\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z]{2,}\\b(?:[-a-zA-Z0-9@:%._+~#=?!&/]*)(?:[-a-zA-Z0-9@:%._+~#=?!&/]*)$/gi;\nconst Link = Mark.create({\n  name: 'link',\n  priority: 1000,\n  inclusive: false,\n  defaultOptions: {\n    openOnClick: true,\n    linkOnPaste: true,\n    HTMLAttributes: {\n      target: '_blank',\n      rel: 'noopener noreferrer nofollow'\n    }\n  },\n\n  addAttributes() {\n    return {\n      href: {\n        default: null\n      },\n      target: {\n        default: this.options.HTMLAttributes.target\n      }\n    };\n  },\n\n  parseHTML() {\n    return [{\n      tag: 'a[href]'\n    }];\n  },\n\n  renderHTML({\n    HTMLAttributes\n  }) {\n    return ['a', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n\n  addCommands() {\n    return {\n      setLink: attributes => ({\n        commands\n      }) => {\n        return commands.setMark('link', attributes);\n      },\n      toggleLink: attributes => ({\n        commands\n      }) => {\n        return commands.toggleMark('link', attributes);\n      },\n      unsetLink: () => ({\n        commands\n      }) => {\n        return commands.unsetMark('link');\n      }\n    };\n  },\n\n  addPasteRules() {\n    return [markPasteRule(pasteRegex, this.type, match => ({\n      href: match[0]\n    }))];\n  },\n\n  addProseMirrorPlugins() {\n    const plugins = [];\n\n    if (this.options.openOnClick) {\n      plugins.push(new Plugin({\n        key: new PluginKey('handleClickLink'),\n        props: {\n          handleClick: (view, pos, event) => {\n            var _a;\n\n            const attrs = this.editor.getAttributes('link');\n            const link = (_a = event.target) === null || _a === void 0 ? void 0 : _a.closest('a');\n\n            if (link && attrs.href) {\n              window.open(attrs.href, attrs.target);\n              return true;\n            }\n\n            return false;\n          }\n        }\n      }));\n    }\n\n    if (this.options.linkOnPaste) {\n      plugins.push(new Plugin({\n        key: new PluginKey('handlePasteLink'),\n        props: {\n          handlePaste: (view, event, slice) => {\n            const {\n              state\n            } = view;\n            const {\n              selection\n            } = state;\n            const {\n              empty\n            } = selection;\n\n            if (empty) {\n              return false;\n            }\n\n            let textContent = '';\n            slice.content.forEach(node => {\n              textContent += node.textContent;\n            });\n\n            if (!textContent || !textContent.match(pasteRegexExact)) {\n              return false;\n            }\n\n            this.editor.commands.setMark(this.type, {\n              href: textContent\n            });\n            return true;\n          }\n        }\n      }));\n    }\n\n    return plugins;\n  }\n\n});\nexport default Link;\nexport { Link, pasteRegex, pasteRegexExact };","map":{"version":3,"sources":["../src/link.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Mark,\n  markPasteRule,\n  mergeAttributes,\n} from '@tiptap/core'\nimport { Plugin, PluginKey } from 'prosemirror-state'\n\nexport interface LinkOptions {\n  /**\n   * If enabled, links will be opened on click.\n   */\n  openOnClick: boolean,\n  /**\n   * Adds a link to the current selection if the pasted content only contains an url.\n   */\n  linkOnPaste: boolean,\n  /**\n   * A list of HTML attributes to be rendered.\n   */\n  HTMLAttributes: Record<string, any>,\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    link: {\n      /**\n       * Set a link mark\n       */\n      setLink: (attributes: { href: string, target?: string }) => ReturnType,\n      /**\n       * Toggle a link mark\n       */\n      toggleLink: (attributes: { href: string, target?: string }) => ReturnType,\n      /**\n       * Unset a link mark\n       */\n      unsetLink: () => ReturnType,\n    }\n  }\n}\n\n/**\n * A regex that matches any string that contains a link\n */\nexport const pasteRegex = /https?:\\/\\/(?:www\\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z]{2,}\\b(?:[-a-zA-Z0-9@:%._+~#=?!&/]*)(?:[-a-zA-Z0-9@:%._+~#=?!&/]*)/gi\n\n/**\n * A regex that matches an url\n */\nexport const pasteRegexExact = /^https?:\\/\\/(?:www\\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z]{2,}\\b(?:[-a-zA-Z0-9@:%._+~#=?!&/]*)(?:[-a-zA-Z0-9@:%._+~#=?!&/]*)$/gi\n\nexport const Link = Mark.create<LinkOptions>({\n  name: 'link',\n\n  priority: 1000,\n\n  inclusive: false,\n\n  defaultOptions: {\n    openOnClick: true,\n    linkOnPaste: true,\n    HTMLAttributes: {\n      target: '_blank',\n      rel: 'noopener noreferrer nofollow',\n    },\n  },\n\n  addAttributes() {\n    return {\n      href: {\n        default: null,\n      },\n      target: {\n        default: this.options.HTMLAttributes.target,\n      },\n    }\n  },\n\n  parseHTML() {\n    return [\n      { tag: 'a[href]' },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['a', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      setLink: attributes => ({ commands }) => {\n        return commands.setMark('link', attributes)\n      },\n      toggleLink: attributes => ({ commands }) => {\n        return commands.toggleMark('link', attributes)\n      },\n      unsetLink: () => ({ commands }) => {\n        return commands.unsetMark('link')\n      },\n    }\n  },\n\n  addPasteRules() {\n    return [\n      markPasteRule(pasteRegex, this.type, match => ({ href: match[0] })),\n    ]\n  },\n\n  addProseMirrorPlugins() {\n    const plugins = []\n\n    if (this.options.openOnClick) {\n      plugins.push(\n        new Plugin({\n          key: new PluginKey('handleClickLink'),\n          props: {\n            handleClick: (view, pos, event) => {\n              const attrs = this.editor.getAttributes('link')\n              const link = (event.target as HTMLElement)?.closest('a')\n\n              if (link && attrs.href) {\n                window.open(attrs.href, attrs.target)\n\n                return true\n              }\n\n              return false\n            },\n          },\n        }),\n      )\n    }\n\n    if (this.options.linkOnPaste) {\n      plugins.push(\n        new Plugin({\n          key: new PluginKey('handlePasteLink'),\n          props: {\n            handlePaste: (view, event, slice) => {\n              const { state } = view\n              const { selection } = state\n              const { empty } = selection\n\n              if (empty) {\n                return false\n              }\n\n              let textContent = ''\n\n              slice.content.forEach(node => {\n                textContent += node.textContent\n              })\n\n              if (!textContent || !textContent.match(pasteRegexExact)) {\n                return false\n              }\n\n              this.editor.commands.setMark(this.type, {\n                href: textContent,\n              })\n\n              return true\n            },\n          },\n        }),\n      )\n    }\n\n    return plugins\n  },\n})\n"]},"metadata":{},"sourceType":"module"}