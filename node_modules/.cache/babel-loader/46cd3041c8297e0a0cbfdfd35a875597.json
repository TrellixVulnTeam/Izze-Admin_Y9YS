{"ast":null,"code":"import _objectWithoutProperties from \"D:/Pyramidion/WebApp/Izze-Admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport { Node, mergeAttributes } from '@tiptap/core';\nimport { wrappingInputRule } from 'prosemirror-inputrules';\nvar inputRegex = /^(\\d+)\\.\\s$/;\nvar OrderedList = Node.create({\n  name: 'orderedList',\n  defaultOptions: {\n    HTMLAttributes: {}\n  },\n  group: 'block list',\n  content: 'listItem+',\n  addAttributes: function addAttributes() {\n    return {\n      start: {\n        default: 1,\n        parseHTML: function parseHTML(element) {\n          return {\n            start: element.hasAttribute('start') ? parseInt(element.getAttribute('start') || '', 10) : 1\n          };\n        }\n      }\n    };\n  },\n  parseHTML: function parseHTML() {\n    return [{\n      tag: 'ol'\n    }];\n  },\n  renderHTML: function renderHTML(_ref) {\n    var HTMLAttributes = _ref.HTMLAttributes;\n\n    var start = HTMLAttributes.start,\n        attributesWithoutStart = _objectWithoutProperties(HTMLAttributes, [\"start\"]);\n\n    return start === 1 ? ['ol', mergeAttributes(this.options.HTMLAttributes, attributesWithoutStart), 0] : ['ol', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n  addCommands: function addCommands() {\n    return {\n      toggleOrderedList: function toggleOrderedList() {\n        return function (_ref2) {\n          var commands = _ref2.commands;\n          return commands.toggleList('orderedList', 'listItem');\n        };\n      }\n    };\n  },\n  addKeyboardShortcuts: function addKeyboardShortcuts() {\n    var _this = this;\n\n    return {\n      'Mod-Shift-7': function ModShift7() {\n        return _this.editor.commands.toggleOrderedList();\n      }\n    };\n  },\n  addInputRules: function addInputRules() {\n    return [wrappingInputRule(inputRegex, this.type, function (match) {\n      return {\n        order: +match[1]\n      };\n    }, function (match, node) {\n      return node.childCount + node.attrs.order === +match[1];\n    })];\n  }\n});\nexport default OrderedList;\nexport { OrderedList, inputRegex };","map":{"version":3,"sources":["../src/ordered-list.ts"],"names":[],"mappings":";;;IAkBa,UAAU,GAAG,a;IAEb,WAAW,GAAG,IAAI,CAAC,MAAL,CAAgC;AACzD,EAAA,IAAI,EAAE,aADmD;AAGzD,EAAA,cAAc,EAAE;AACd,IAAA,cAAc,EAAE;AADF,GAHyC;AAOzD,EAAA,KAAK,EAAE,YAPkD;AASzD,EAAA,OAAO,EAAE,WATgD;AAWzD,EAAA,aAXyD,2BAW5C;AACX,WAAO;AACL,MAAA,KAAK,EAAE;AACL,QAAA,OAAO,EAAE,CADJ;AAEL,QAAA,SAAS,EAAE,mBAAA,OAAO;AAAA,iBAAK;AACrB,YAAA,KAAK,EAAE,OAAO,CAAC,YAAR,CAAqB,OAArB,IACH,QAAQ,CAAC,OAAO,CAAC,YAAR,CAAqB,OAArB,KAAiC,EAAlC,EAAsC,EAAtC,CADL,GAEH;AAHiB,WAAL;AAAA;AAFb;AADF,KAAP;AAUD,GAtBwD;AAwBzD,EAAA,SAxByD,uBAwBhD;AACP,WAAO,CACL;AACE,MAAA,GAAG,EAAE;AADP,KADK,CAAP;AAKD,GA9BwD;AAgCzD,EAAA,UAhCyD,4BAgC5B;AAAA,QAAhB,cAAgB,QAAhB,cAAgB;;AAC3B,QAAQ,KAAR,GAA6C,cAA7C,CAAQ,KAAR;AAAA,QAAkB,sBAAlB,4BAA6C,cAA7C;;AAEA,WAAO,KAAK,KAAK,CAAV,GACH,CAAC,IAAD,EAAO,eAAe,CAAC,KAAK,OAAL,CAAa,cAAd,EAA8B,sBAA9B,CAAtB,EAA6E,CAA7E,CADG,GAEH,CAAC,IAAD,EAAO,eAAe,CAAC,KAAK,OAAL,CAAa,cAAd,EAA8B,cAA9B,CAAtB,EAAqE,CAArE,CAFJ;AAGD,GAtCwD;AAwCzD,EAAA,WAxCyD,yBAwC9C;AACT,WAAO;AACL,MAAA,iBAAiB,EAAE;AAAA,eAAM,iBAAa;AAAA,cAAV,QAAU,SAAV,QAAU;AACpC,iBAAO,QAAQ,CAAC,UAAT,CAAoB,aAApB,EAAmC,UAAnC,CAAP;AACD,SAFkB;AAAA;AADd,KAAP;AAKD,GA9CwD;AAgDzD,EAAA,oBAhDyD,kCAgDrC;AAAA;;AAClB,WAAO;AACL,qBAAe;AAAA,eAAM,KAAI,CAAC,MAAL,CAAY,QAAZ,CAAqB,iBAArB,EAAN;AAAA;AADV,KAAP;AAGD,GApDwD;AAsDzD,EAAA,aAtDyD,2BAsD5C;AACX,WAAO,CACL,iBAAiB,CACf,UADe,EAEf,KAAK,IAFU,EAGf,UAAA,KAAK;AAAA,aAAK;AAAE,QAAA,KAAK,EAAE,CAAC,KAAK,CAAC,CAAD;AAAf,OAAL;AAAA,KAHU,EAIf,UAAC,KAAD,EAAQ,IAAR;AAAA,aAAiB,IAAI,CAAC,UAAL,GAAkB,IAAI,CAAC,KAAL,CAAW,KAA7B,KAAuC,CAAC,KAAK,CAAC,CAAD,CAA9D;AAAA,KAJe,CADZ,CAAP;AAQD;AA/DwD,CAAhC,C","sourcesContent":["import { Command, Node, mergeAttributes } from '@tiptap/core'\nimport { wrappingInputRule } from 'prosemirror-inputrules'\n\nexport interface OrderedListOptions {\n  HTMLAttributes: Record<string, any>,\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands {\n    orderedList: {\n      /**\n       * Toggle an ordered list\n       */\n      toggleOrderedList: () => Command,\n    }\n  }\n}\n\nexport const inputRegex = /^(\\d+)\\.\\s$/\n\nexport const OrderedList = Node.create<OrderedListOptions>({\n  name: 'orderedList',\n\n  defaultOptions: {\n    HTMLAttributes: {},\n  },\n\n  group: 'block list',\n\n  content: 'listItem+',\n\n  addAttributes() {\n    return {\n      start: {\n        default: 1,\n        parseHTML: element => ({\n          start: element.hasAttribute('start')\n            ? parseInt(element.getAttribute('start') || '', 10)\n            : 1,\n        }),\n      },\n    }\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: 'ol',\n      },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    const { start, ...attributesWithoutStart } = HTMLAttributes\n\n    return start === 1\n      ? ['ol', mergeAttributes(this.options.HTMLAttributes, attributesWithoutStart), 0]\n      : ['ol', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      toggleOrderedList: () => ({ commands }) => {\n        return commands.toggleList('orderedList', 'listItem')\n      },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Shift-7': () => this.editor.commands.toggleOrderedList(),\n    }\n  },\n\n  addInputRules() {\n    return [\n      wrappingInputRule(\n        inputRegex,\n        this.type,\n        match => ({ order: +match[1] }),\n        (match, node) => node.childCount + node.attrs.order === +match[1],\n      ),\n    ]\n  },\n})\n"]},"metadata":{},"sourceType":"module"}