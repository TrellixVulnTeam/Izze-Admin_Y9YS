{"ast":null,"code":"import { Mark, mergeAttributes, markPasteRule } from '@tiptap/core';\nimport { Plugin, PluginKey } from 'prosemirror-state';\n/**\r\n * A regex that matches any string that contains a link\r\n */\n\nvar pasteRegex = /https?:\\/\\/(?:www\\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z]{2,}\\b(?:[-a-zA-Z0-9@:%._+~#=?!&/]*)(?:[-a-zA-Z0-9@:%._+~#=?!&/]*)/gi;\n/**\r\n * A regex that matches an url\r\n */\n\nvar pasteRegexExact = /^https?:\\/\\/(?:www\\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z]{2,}\\b(?:[-a-zA-Z0-9@:%._+~#=?!&/]*)(?:[-a-zA-Z0-9@:%._+~#=?!&/]*)$/gi;\nvar Link = Mark.create({\n  name: 'link',\n  priority: 1000,\n  inclusive: false,\n  defaultOptions: {\n    openOnClick: true,\n    linkOnPaste: true,\n    HTMLAttributes: {\n      target: '_blank',\n      rel: 'noopener noreferrer nofollow'\n    }\n  },\n  addAttributes: function addAttributes() {\n    return {\n      href: {\n        default: null\n      },\n      target: {\n        default: this.options.HTMLAttributes.target\n      }\n    };\n  },\n  parseHTML: function parseHTML() {\n    return [{\n      tag: 'a[href]'\n    }];\n  },\n  renderHTML: function renderHTML(_ref) {\n    var HTMLAttributes = _ref.HTMLAttributes;\n    return ['a', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n  addCommands: function addCommands() {\n    return {\n      setLink: function setLink(attributes) {\n        return function (_ref2) {\n          var commands = _ref2.commands;\n          return commands.setMark('link', attributes);\n        };\n      },\n      toggleLink: function toggleLink(attributes) {\n        return function (_ref3) {\n          var commands = _ref3.commands;\n          return commands.toggleMark('link', attributes);\n        };\n      },\n      unsetLink: function unsetLink() {\n        return function (_ref4) {\n          var commands = _ref4.commands;\n          return commands.unsetMark('link');\n        };\n      }\n    };\n  },\n  addPasteRules: function addPasteRules() {\n    return [markPasteRule(pasteRegex, this.type, function (match) {\n      return {\n        href: match[0]\n      };\n    })];\n  },\n  addProseMirrorPlugins: function addProseMirrorPlugins() {\n    var _this = this;\n\n    var plugins = [];\n\n    if (this.options.openOnClick) {\n      plugins.push(new Plugin({\n        key: new PluginKey('handleClickLink'),\n        props: {\n          handleClick: function handleClick(view, pos, event) {\n            var _a;\n\n            var attrs = _this.editor.getAttributes('link');\n\n            var link = (_a = event.target) === null || _a === void 0 ? void 0 : _a.closest('a');\n\n            if (link && attrs.href) {\n              window.open(attrs.href, attrs.target);\n              return true;\n            }\n\n            return false;\n          }\n        }\n      }));\n    }\n\n    if (this.options.linkOnPaste) {\n      plugins.push(new Plugin({\n        key: new PluginKey('handlePasteLink'),\n        props: {\n          handlePaste: function handlePaste(view, event, slice) {\n            var state = view.state;\n            var selection = state.selection;\n            var empty = selection.empty;\n\n            if (empty) {\n              return false;\n            }\n\n            var textContent = '';\n            slice.content.forEach(function (node) {\n              textContent += node.textContent;\n            });\n\n            if (!textContent || !textContent.match(pasteRegexExact)) {\n              return false;\n            }\n\n            _this.editor.commands.setMark(_this.type, {\n              href: textContent\n            });\n\n            return true;\n          }\n        }\n      }));\n    }\n\n    return plugins;\n  }\n});\nexport default Link;\nexport { Link, pasteRegex, pasteRegexExact };","map":null,"metadata":{},"sourceType":"module"}