{"ast":null,"code":"const CLOUD_NAME = process.env.REACT_APP_CLOUDINARY_CLOUD_NAME;\nconst IMAGE_UPLOAD_URL = process.env.REACT_APP_CLOUDINARY_IMAGE_URL;\nconst UPLOAD_PRESENT = process.env.REACT_APP_CLOUDINARY_UPLOAD_PRESENT;\nexport const uploadImageCloudinary = file => {\n  const data = new FormData();\n  data.append(\"file\", file);\n  data.append(\"cloud_name\", CLOUD_NAME);\n  data.append(\"upload_preset\", UPLOAD_PRESENT);\n  return fetch(IMAGE_UPLOAD_URL, {\n    method: \"post\",\n    body: data\n  }).then(resp => resp.json()).then(({\n    public_id,\n    secure_url\n  }) => {\n    return {\n      public_id,\n      url: secure_url\n    };\n  });\n};\nexport const uploadNewImage = imageData => {\n  const {\n    isNew,\n    file\n  } = imageData;\n\n  if (isNew) {\n    return uploadImageCloudinary(file);\n  } else {\n    return Promise.resolve(file);\n  }\n};","map":{"version":3,"sources":["D:/Pyramidion/WebApp/Izze-Admin/src/utils/CloudinaryUtils.tsx"],"names":["CLOUD_NAME","process","env","REACT_APP_CLOUDINARY_CLOUD_NAME","IMAGE_UPLOAD_URL","REACT_APP_CLOUDINARY_IMAGE_URL","UPLOAD_PRESENT","REACT_APP_CLOUDINARY_UPLOAD_PRESENT","uploadImageCloudinary","file","data","FormData","append","fetch","method","body","then","resp","json","public_id","secure_url","url","uploadNewImage","imageData","isNew","Promise","resolve"],"mappings":"AACA,MAAMA,UAAkB,GAAGC,OAAO,CAACC,GAAR,CAAYC,+BAAvC;AACA,MAAMC,gBAAwB,GAAGH,OAAO,CAACC,GAAR,CAAYG,8BAA7C;AACA,MAAMC,cAAsB,GAAGL,OAAO,CAACC,GAAR,CAAYK,mCAA3C;AAEA,OAAO,MAAMC,qBAAqB,GAAIC,IAAD,IAAe;AAClD,QAAMC,IAAI,GAAG,IAAIC,QAAJ,EAAb;AACAD,EAAAA,IAAI,CAACE,MAAL,CAAY,MAAZ,EAAoBH,IAApB;AACAC,EAAAA,IAAI,CAACE,MAAL,CAAY,YAAZ,EAA0BZ,UAA1B;AACAU,EAAAA,IAAI,CAACE,MAAL,CAAY,eAAZ,EAA6BN,cAA7B;AACA,SAAOO,KAAK,CAACT,gBAAD,EAAmB;AAC7BU,IAAAA,MAAM,EAAE,MADqB;AAE7BC,IAAAA,IAAI,EAAEL;AAFuB,GAAnB,CAAL,CAGJM,IAHI,CAGCC,IAAI,IAAIA,IAAI,CAACC,IAAL,EAHT,EAIJF,IAJI,CAIC,CAAC;AAAEG,IAAAA,SAAF;AAAaC,IAAAA;AAAb,GAAD,KAA+B;AACnC,WAAO;AAAED,MAAAA,SAAF;AAAaE,MAAAA,GAAG,EAAED;AAAlB,KAAP;AACD,GANI,CAAP;AAOD,CAZM;AAcP,OAAO,MAAME,cAAc,GAAIC,SAAD,IAAoB;AAChD,QAAM;AAAEC,IAAAA,KAAF;AAASf,IAAAA;AAAT,MAAkBc,SAAxB;;AACA,MAAIC,KAAJ,EAAW;AACT,WAAOhB,qBAAqB,CAACC,IAAD,CAA5B;AACD,GAFD,MAEO;AACL,WAAOgB,OAAO,CAACC,OAAR,CAAgBjB,IAAhB,CAAP;AACD;AACF,CAPM","sourcesContent":["\r\nconst CLOUD_NAME: string = process.env.REACT_APP_CLOUDINARY_CLOUD_NAME as string;\r\nconst IMAGE_UPLOAD_URL: string = process.env.REACT_APP_CLOUDINARY_IMAGE_URL as string;\r\nconst UPLOAD_PRESENT: string = process.env.REACT_APP_CLOUDINARY_UPLOAD_PRESENT as string;\r\n\r\nexport const uploadImageCloudinary = (file: any) => {\r\n  const data = new FormData()\r\n  data.append(\"file\", file)\r\n  data.append(\"cloud_name\", CLOUD_NAME)\r\n  data.append(\"upload_preset\", UPLOAD_PRESENT)\r\n  return fetch(IMAGE_UPLOAD_URL, {\r\n    method: \"post\",\r\n    body: data\r\n  }).then(resp => resp.json())\r\n    .then(({ public_id, secure_url }) => {\r\n      return { public_id, url: secure_url }\r\n    })\r\n}\r\n\r\nexport const uploadNewImage = (imageData: any) => {\r\n  const { isNew, file } = imageData\r\n  if (isNew) {\r\n    return uploadImageCloudinary(file)\r\n  } else {\r\n    return Promise.resolve(file)\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}