{"ast":null,"code":"import _wrapRegExp from \"D:/Pyramidion/WebApp/Izze-Admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/wrapRegExp\";\nimport { Node } from '@tiptap/core';\nimport { textblockTypeInputRule } from 'prosemirror-inputrules';\n\nvar backtickInputRegex = /*#__PURE__*/_wrapRegExp(/^```([a-z]*)? $/, {\n  language: 1\n});\n\nvar tildeInputRegex = /*#__PURE__*/_wrapRegExp(/^~~~([a-z]*)? $/, {\n  language: 1\n});\n\nvar CodeBlock = Node.create({\n  name: 'codeBlock',\n  defaultOptions: {\n    languageClassPrefix: 'language-',\n    HTMLAttributes: {}\n  },\n  content: 'text*',\n  marks: '',\n  group: 'block',\n  code: true,\n  defining: true,\n  addAttributes: function addAttributes() {\n    var _this = this;\n\n    return {\n      language: {\n        default: null,\n        parseHTML: function parseHTML(element) {\n          var _a;\n\n          var classAttribute = (_a = element.firstElementChild) === null || _a === void 0 ? void 0 : _a.getAttribute('class');\n\n          if (!classAttribute) {\n            return null;\n          }\n\n          var regexLanguageClassPrefix = new RegExp(\"^(\".concat(_this.options.languageClassPrefix, \")\"));\n          return {\n            language: classAttribute.replace(regexLanguageClassPrefix, '')\n          };\n        },\n        renderHTML: function renderHTML(attributes) {\n          if (!attributes.language) {\n            return null;\n          }\n\n          return {\n            class: _this.options.languageClassPrefix + attributes.language\n          };\n        }\n      }\n    };\n  },\n  parseHTML: function parseHTML() {\n    return [{\n      tag: 'pre',\n      preserveWhitespace: 'full'\n    }];\n  },\n  renderHTML: function renderHTML(_ref) {\n    var HTMLAttributes = _ref.HTMLAttributes;\n    return ['pre', this.options.HTMLAttributes, ['code', HTMLAttributes, 0]];\n  },\n  addCommands: function addCommands() {\n    return {\n      setCodeBlock: function setCodeBlock(attributes) {\n        return function (_ref2) {\n          var commands = _ref2.commands;\n          return commands.setNode('codeBlock', attributes);\n        };\n      },\n      toggleCodeBlock: function toggleCodeBlock(attributes) {\n        return function (_ref3) {\n          var commands = _ref3.commands;\n          return commands.toggleNode('codeBlock', 'paragraph', attributes);\n        };\n      }\n    };\n  },\n  addKeyboardShortcuts: function addKeyboardShortcuts() {\n    var _this2 = this;\n\n    return {\n      'Mod-Alt-c': function ModAltC() {\n        return _this2.editor.commands.toggleCodeBlock();\n      },\n      // remove code block when at start of document or code block is empty\n      Backspace: function Backspace() {\n        var _this2$editor$state$s = _this2.editor.state.selection,\n            empty = _this2$editor$state$s.empty,\n            $anchor = _this2$editor$state$s.$anchor;\n        var isAtStart = $anchor.pos === 1;\n\n        if (!empty || $anchor.parent.type.name !== _this2.name) {\n          return false;\n        }\n\n        if (isAtStart || !$anchor.parent.textContent.length) {\n          return _this2.editor.commands.clearNodes();\n        }\n\n        return false;\n      }\n    };\n  },\n  addInputRules: function addInputRules() {\n    return [textblockTypeInputRule(backtickInputRegex, this.type, function (_ref4) {\n      var groups = _ref4.groups;\n      return groups;\n    }), textblockTypeInputRule(tildeInputRegex, this.type, function (_ref5) {\n      var groups = _ref5.groups;\n      return groups;\n    })];\n  }\n});\nexport default CodeBlock;\nexport { CodeBlock, backtickInputRegex, tildeInputRegex };","map":null,"metadata":{},"sourceType":"module"}