{"ast":null,"code":"import { Node, mergeAttributes } from '@tiptap/core';\nimport { wrappingInputRule } from 'prosemirror-inputrules';\nconst inputRegex = /^(\\d+)\\.\\s$/;\nconst OrderedList = Node.create({\n  name: 'orderedList',\n  defaultOptions: {\n    HTMLAttributes: {}\n  },\n  group: 'block list',\n  content: 'listItem+',\n\n  addAttributes() {\n    return {\n      start: {\n        default: 1,\n        parseHTML: element => ({\n          start: element.hasAttribute('start') ? parseInt(element.getAttribute('start') || '', 10) : 1\n        })\n      }\n    };\n  },\n\n  parseHTML() {\n    return [{\n      tag: 'ol'\n    }];\n  },\n\n  renderHTML({\n    HTMLAttributes\n  }) {\n    const {\n      start,\n      ...attributesWithoutStart\n    } = HTMLAttributes;\n    return start === 1 ? ['ol', mergeAttributes(this.options.HTMLAttributes, attributesWithoutStart), 0] : ['ol', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n\n  addCommands() {\n    return {\n      toggleOrderedList: () => ({\n        commands\n      }) => {\n        return commands.toggleList('orderedList', 'listItem');\n      }\n    };\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Shift-7': () => this.editor.commands.toggleOrderedList()\n    };\n  },\n\n  addInputRules() {\n    return [wrappingInputRule(inputRegex, this.type, match => ({\n      order: +match[1]\n    }), (match, node) => node.childCount + node.attrs.order === +match[1])];\n  }\n\n});\nexport default OrderedList;\nexport { OrderedList, inputRegex };","map":null,"metadata":{},"sourceType":"module"}