{"ast":null,"code":"import { Node, mergeAttributes } from '@tiptap/core';\nimport { wrappingInputRule } from 'prosemirror-inputrules';\nconst inputRegex = /^(\\d+)\\.\\s$/;\nconst OrderedList = Node.create({\n  name: 'orderedList',\n  defaultOptions: {\n    HTMLAttributes: {}\n  },\n  group: 'block list',\n  content: 'listItem+',\n\n  addAttributes() {\n    return {\n      start: {\n        default: 1,\n        parseHTML: element => ({\n          start: element.hasAttribute('start') ? parseInt(element.getAttribute('start') || '', 10) : 1\n        })\n      }\n    };\n  },\n\n  parseHTML() {\n    return [{\n      tag: 'ol'\n    }];\n  },\n\n  renderHTML({\n    HTMLAttributes\n  }) {\n    const {\n      start,\n      ...attributesWithoutStart\n    } = HTMLAttributes;\n    return start === 1 ? ['ol', mergeAttributes(this.options.HTMLAttributes, attributesWithoutStart), 0] : ['ol', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n\n  addCommands() {\n    return {\n      toggleOrderedList: () => ({\n        commands\n      }) => {\n        return commands.toggleList('orderedList', 'listItem');\n      }\n    };\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Shift-7': () => this.editor.commands.toggleOrderedList()\n    };\n  },\n\n  addInputRules() {\n    return [wrappingInputRule(inputRegex, this.type, match => ({\n      order: +match[1]\n    }), (match, node) => node.childCount + node.attrs.order === +match[1])];\n  }\n\n});\nexport default OrderedList;\nexport { OrderedList, inputRegex };","map":{"version":3,"sources":["../src/ordered-list.ts"],"names":[],"mappings":";;MAkBa,UAAU,GAAG,a;MAEb,WAAW,GAAG,IAAI,CAAC,MAAL,CAAgC;AACzD,EAAA,IAAI,EAAE,aADmD;AAGzD,EAAA,cAAc,EAAE;AACd,IAAA,cAAc,EAAE;AADF,GAHyC;AAOzD,EAAA,KAAK,EAAE,YAPkD;AASzD,EAAA,OAAO,EAAE,WATgD;;AAWzD,EAAA,aAAa,GAAA;AACX,WAAO;AACL,MAAA,KAAK,EAAE;AACL,QAAA,OAAO,EAAE,CADJ;AAEL,QAAA,SAAS,EAAE,OAAO,KAAK;AACrB,UAAA,KAAK,EAAE,OAAO,CAAC,YAAR,CAAqB,OAArB,IACH,QAAQ,CAAC,OAAO,CAAC,YAAR,CAAqB,OAArB,KAAiC,EAAlC,EAAsC,EAAtC,CADL,GAEH;AAHiB,SAAL;AAFb;AADF,KAAP;AAUD,GAtBwD;;AAwBzD,EAAA,SAAS,GAAA;AACP,WAAO,CACL;AACE,MAAA,GAAG,EAAE;AADP,KADK,CAAP;AAKD,GA9BwD;;AAgCzD,EAAA,UAAU,CAAC;AAAE,IAAA;AAAF,GAAD,EAAmB;AAC3B,UAAM;AAAE,MAAA,KAAF;AAAS,SAAG;AAAZ,QAAuC,cAA7C;AAEA,WAAO,KAAK,KAAK,CAAV,GACH,CAAC,IAAD,EAAO,eAAe,CAAC,KAAK,OAAL,CAAa,cAAd,EAA8B,sBAA9B,CAAtB,EAA6E,CAA7E,CADG,GAEH,CAAC,IAAD,EAAO,eAAe,CAAC,KAAK,OAAL,CAAa,cAAd,EAA8B,cAA9B,CAAtB,EAAqE,CAArE,CAFJ;AAGD,GAtCwD;;AAwCzD,EAAA,WAAW,GAAA;AACT,WAAO;AACL,MAAA,iBAAiB,EAAE,MAAM,CAAC;AAAE,QAAA;AAAF,OAAD,KAAa;AACpC,eAAO,QAAQ,CAAC,UAAT,CAAoB,aAApB,EAAmC,UAAnC,CAAP;AACD;AAHI,KAAP;AAKD,GA9CwD;;AAgDzD,EAAA,oBAAoB,GAAA;AAClB,WAAO;AACL,qBAAe,MAAM,KAAK,MAAL,CAAY,QAAZ,CAAqB,iBAArB;AADhB,KAAP;AAGD,GApDwD;;AAsDzD,EAAA,aAAa,GAAA;AACX,WAAO,CACL,iBAAiB,CACf,UADe,EAEf,KAAK,IAFU,EAGf,KAAK,KAAK;AAAE,MAAA,KAAK,EAAE,CAAC,KAAK,CAAC,CAAD;AAAf,KAAL,CAHU,EAIf,CAAC,KAAD,EAAQ,IAAR,KAAiB,IAAI,CAAC,UAAL,GAAkB,IAAI,CAAC,KAAL,CAAW,KAA7B,KAAuC,CAAC,KAAK,CAAC,CAAD,CAJ/C,CADZ,CAAP;AAQD;;AA/DwD,CAAhC,C","sourcesContent":["import { Command, Node, mergeAttributes } from '@tiptap/core'\nimport { wrappingInputRule } from 'prosemirror-inputrules'\n\nexport interface OrderedListOptions {\n  HTMLAttributes: Record<string, any>,\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands {\n    orderedList: {\n      /**\n       * Toggle an ordered list\n       */\n      toggleOrderedList: () => Command,\n    }\n  }\n}\n\nexport const inputRegex = /^(\\d+)\\.\\s$/\n\nexport const OrderedList = Node.create<OrderedListOptions>({\n  name: 'orderedList',\n\n  defaultOptions: {\n    HTMLAttributes: {},\n  },\n\n  group: 'block list',\n\n  content: 'listItem+',\n\n  addAttributes() {\n    return {\n      start: {\n        default: 1,\n        parseHTML: element => ({\n          start: element.hasAttribute('start')\n            ? parseInt(element.getAttribute('start') || '', 10)\n            : 1,\n        }),\n      },\n    }\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: 'ol',\n      },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    const { start, ...attributesWithoutStart } = HTMLAttributes\n\n    return start === 1\n      ? ['ol', mergeAttributes(this.options.HTMLAttributes, attributesWithoutStart), 0]\n      : ['ol', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      toggleOrderedList: () => ({ commands }) => {\n        return commands.toggleList('orderedList', 'listItem')\n      },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Shift-7': () => this.editor.commands.toggleOrderedList(),\n    }\n  },\n\n  addInputRules() {\n    return [\n      wrappingInputRule(\n        inputRegex,\n        this.type,\n        match => ({ order: +match[1] }),\n        (match, node) => node.childCount + node.attrs.order === +match[1],\n      ),\n    ]\n  },\n})\n"]},"metadata":{},"sourceType":"module"}