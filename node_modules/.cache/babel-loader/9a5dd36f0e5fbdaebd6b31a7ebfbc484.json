{"ast":null,"code":"import { Mark, mergeAttributes, markPasteRule } from '@tiptap/core';\nimport { Plugin, PluginKey } from 'prosemirror-state';\n/**\r\n * A regex that matches any string that contains a link\r\n */\n\nconst pasteRegex = /https?:\\/\\/(?:www\\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z]{2,}\\b(?:[-a-zA-Z0-9@:%._+~#=?!&/]*)(?:[-a-zA-Z0-9@:%._+~#=?!&/]*)/gi;\n/**\r\n * A regex that matches an url\r\n */\n\nconst pasteRegexExact = /^https?:\\/\\/(?:www\\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z]{2,}\\b(?:[-a-zA-Z0-9@:%._+~#=?!&/]*)(?:[-a-zA-Z0-9@:%._+~#=?!&/]*)$/gi;\nconst Link = Mark.create({\n  name: 'link',\n  priority: 1000,\n  inclusive: false,\n  defaultOptions: {\n    openOnClick: true,\n    linkOnPaste: true,\n    HTMLAttributes: {\n      target: '_blank',\n      rel: 'noopener noreferrer nofollow'\n    }\n  },\n\n  addAttributes() {\n    return {\n      href: {\n        default: null\n      },\n      target: {\n        default: this.options.HTMLAttributes.target\n      }\n    };\n  },\n\n  parseHTML() {\n    return [{\n      tag: 'a[href]'\n    }];\n  },\n\n  renderHTML({\n    HTMLAttributes\n  }) {\n    return ['a', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n\n  addCommands() {\n    return {\n      setLink: attributes => ({\n        commands\n      }) => {\n        return commands.setMark('link', attributes);\n      },\n      toggleLink: attributes => ({\n        commands\n      }) => {\n        return commands.toggleMark('link', attributes);\n      },\n      unsetLink: () => ({\n        commands\n      }) => {\n        return commands.unsetMark('link');\n      }\n    };\n  },\n\n  addPasteRules() {\n    return [markPasteRule(pasteRegex, this.type, match => ({\n      href: match[0]\n    }))];\n  },\n\n  addProseMirrorPlugins() {\n    const plugins = [];\n\n    if (this.options.openOnClick) {\n      plugins.push(new Plugin({\n        key: new PluginKey('handleClickLink'),\n        props: {\n          handleClick: (view, pos, event) => {\n            var _a;\n\n            const attrs = this.editor.getAttributes('link');\n            const link = (_a = event.target) === null || _a === void 0 ? void 0 : _a.closest('a');\n\n            if (link && attrs.href) {\n              window.open(attrs.href, attrs.target);\n              return true;\n            }\n\n            return false;\n          }\n        }\n      }));\n    }\n\n    if (this.options.linkOnPaste) {\n      plugins.push(new Plugin({\n        key: new PluginKey('handlePasteLink'),\n        props: {\n          handlePaste: (view, event, slice) => {\n            const {\n              state\n            } = view;\n            const {\n              selection\n            } = state;\n            const {\n              empty\n            } = selection;\n\n            if (empty) {\n              return false;\n            }\n\n            let textContent = '';\n            slice.content.forEach(node => {\n              textContent += node.textContent;\n            });\n\n            if (!textContent || !textContent.match(pasteRegexExact)) {\n              return false;\n            }\n\n            this.editor.commands.setMark(this.type, {\n              href: textContent\n            });\n            return true;\n          }\n        }\n      }));\n    }\n\n    return plugins;\n  }\n\n});\nexport default Link;\nexport { Link, pasteRegex, pasteRegexExact };","map":null,"metadata":{},"sourceType":"module"}