{"ast":null,"code":"import _wrapRegExp from \"D:/Pyramidion/WebApp/Izze-Admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/wrapRegExp\";\nimport { Node } from '@tiptap/core';\nimport { textblockTypeInputRule } from 'prosemirror-inputrules';\n\nvar backtickInputRegex = /*#__PURE__*/_wrapRegExp(/^```([a-z]*)? $/, {\n  language: 1\n});\n\nvar tildeInputRegex = /*#__PURE__*/_wrapRegExp(/^~~~([a-z]*)? $/, {\n  language: 1\n});\n\nvar CodeBlock = Node.create({\n  name: 'codeBlock',\n  defaultOptions: {\n    languageClassPrefix: 'language-',\n    HTMLAttributes: {}\n  },\n  content: 'text*',\n  marks: '',\n  group: 'block',\n  code: true,\n  defining: true,\n  addAttributes: function addAttributes() {\n    var _this = this;\n\n    return {\n      language: {\n        default: null,\n        parseHTML: function parseHTML(element) {\n          var _a;\n\n          var classAttribute = (_a = element.firstElementChild) === null || _a === void 0 ? void 0 : _a.getAttribute('class');\n\n          if (!classAttribute) {\n            return null;\n          }\n\n          var regexLanguageClassPrefix = new RegExp(\"^(\".concat(_this.options.languageClassPrefix, \")\"));\n          return {\n            language: classAttribute.replace(regexLanguageClassPrefix, '')\n          };\n        },\n        renderHTML: function renderHTML(attributes) {\n          if (!attributes.language) {\n            return null;\n          }\n\n          return {\n            class: _this.options.languageClassPrefix + attributes.language\n          };\n        }\n      }\n    };\n  },\n  parseHTML: function parseHTML() {\n    return [{\n      tag: 'pre',\n      preserveWhitespace: 'full'\n    }];\n  },\n  renderHTML: function renderHTML(_ref) {\n    var HTMLAttributes = _ref.HTMLAttributes;\n    return ['pre', this.options.HTMLAttributes, ['code', HTMLAttributes, 0]];\n  },\n  addCommands: function addCommands() {\n    return {\n      setCodeBlock: function setCodeBlock(attributes) {\n        return function (_ref2) {\n          var commands = _ref2.commands;\n          return commands.setNode('codeBlock', attributes);\n        };\n      },\n      toggleCodeBlock: function toggleCodeBlock(attributes) {\n        return function (_ref3) {\n          var commands = _ref3.commands;\n          return commands.toggleNode('codeBlock', 'paragraph', attributes);\n        };\n      }\n    };\n  },\n  addKeyboardShortcuts: function addKeyboardShortcuts() {\n    var _this2 = this;\n\n    return {\n      'Mod-Alt-c': function ModAltC() {\n        return _this2.editor.commands.toggleCodeBlock();\n      },\n      // remove code block when at start of document or code block is empty\n      Backspace: function Backspace() {\n        var _this2$editor$state$s = _this2.editor.state.selection,\n            empty = _this2$editor$state$s.empty,\n            $anchor = _this2$editor$state$s.$anchor;\n        var isAtStart = $anchor.pos === 1;\n\n        if (!empty || $anchor.parent.type.name !== _this2.name) {\n          return false;\n        }\n\n        if (isAtStart || !$anchor.parent.textContent.length) {\n          return _this2.editor.commands.clearNodes();\n        }\n\n        return false;\n      }\n    };\n  },\n  addInputRules: function addInputRules() {\n    return [textblockTypeInputRule(backtickInputRegex, this.type, function (_ref4) {\n      var groups = _ref4.groups;\n      return groups;\n    }), textblockTypeInputRule(tildeInputRegex, this.type, function (_ref5) {\n      var groups = _ref5.groups;\n      return groups;\n    })];\n  }\n});\nexport default CodeBlock;\nexport { CodeBlock, backtickInputRegex, tildeInputRegex };","map":{"version":3,"sources":["../src/code-block.ts"],"names":[],"mappings":";;;;IAuBa,kBAAkB,4BAAG,iBAAH;AAAA;AAAA,E;;IAClB,eAAe,4BAAG,iBAAH;AAAA;AAAA,E;;IAEf,SAAS,GAAG,IAAI,CAAC,MAAL,CAA8B;AACrD,EAAA,IAAI,EAAE,WAD+C;AAGrD,EAAA,cAAc,EAAE;AACd,IAAA,mBAAmB,EAAE,WADP;AAEd,IAAA,cAAc,EAAE;AAFF,GAHqC;AAQrD,EAAA,OAAO,EAAE,OAR4C;AAUrD,EAAA,KAAK,EAAE,EAV8C;AAYrD,EAAA,KAAK,EAAE,OAZ8C;AAcrD,EAAA,IAAI,EAAE,IAd+C;AAgBrD,EAAA,QAAQ,EAAE,IAhB2C;AAkBrD,EAAA,aAlBqD,2BAkBxC;AAAA;;AACX,WAAO;AACL,MAAA,QAAQ,EAAE;AACR,QAAA,OAAO,EAAE,IADD;AAER,QAAA,SAAS,EAAE,mBAAA,OAAO,EAAA;;;AAChB,cAAM,cAAc,GAAG,CAAA,EAAA,GAAA,OAAO,CAAC,iBAAR,MAAyB,IAAzB,IAAyB,EAAA,KAAA,KAAA,CAAzB,GAAyB,KAAA,CAAzB,GAAyB,EAAA,CAAE,YAAF,CAAe,OAAf,CAAhD;;AAEA,cAAI,CAAC,cAAL,EAAqB;AACnB,mBAAO,IAAP;AACD;;AAED,cAAM,wBAAwB,GAAG,IAAI,MAAJ,aAAgB,KAAI,CAAC,OAAL,CAAa,mBAA7B,OAAjC;AAEA,iBAAO;AACL,YAAA,QAAQ,EAAE,cAAc,CAAC,OAAf,CAAuB,wBAAvB,EAAiD,EAAjD;AADL,WAAP;AAGD,SAdO;AAeR,QAAA,UAAU,EAAE,oBAAA,UAAU,EAAA;AACpB,cAAI,CAAC,UAAU,CAAC,QAAhB,EAA0B;AACxB,mBAAO,IAAP;AACD;;AAED,iBAAO;AACL,YAAA,KAAK,EAAE,KAAI,CAAC,OAAL,CAAa,mBAAb,GAAmC,UAAU,CAAC;AADhD,WAAP;AAGD;AAvBO;AADL,KAAP;AA2BD,GA9CoD;AAgDrD,EAAA,SAhDqD,uBAgD5C;AACP,WAAO,CACL;AACE,MAAA,GAAG,EAAE,KADP;AAEE,MAAA,kBAAkB,EAAE;AAFtB,KADK,CAAP;AAMD,GAvDoD;AAyDrD,EAAA,UAzDqD,4BAyDxB;AAAA,QAAhB,cAAgB,QAAhB,cAAgB;AAC3B,WAAO,CAAC,KAAD,EAAQ,KAAK,OAAL,CAAa,cAArB,EAAqC,CAAC,MAAD,EAAS,cAAT,EAAyB,CAAzB,CAArC,CAAP;AACD,GA3DoD;AA6DrD,EAAA,WA7DqD,yBA6D1C;AACT,WAAO;AACL,MAAA,YAAY,EAAE,sBAAA,UAAU;AAAA,eAAI,iBAAa;AAAA,cAAV,QAAU,SAAV,QAAU;AACvC,iBAAO,QAAQ,CAAC,OAAT,CAAiB,WAAjB,EAA8B,UAA9B,CAAP;AACD,SAFuB;AAAA,OADnB;AAIL,MAAA,eAAe,EAAE,yBAAA,UAAU;AAAA,eAAI,iBAAa;AAAA,cAAV,QAAU,SAAV,QAAU;AAC1C,iBAAO,QAAQ,CAAC,UAAT,CAAoB,WAApB,EAAiC,WAAjC,EAA8C,UAA9C,CAAP;AACD,SAF0B;AAAA;AAJtB,KAAP;AAQD,GAtEoD;AAwErD,EAAA,oBAxEqD,kCAwEjC;AAAA;;AAClB,WAAO;AACL,mBAAa;AAAA,eAAM,MAAI,CAAC,MAAL,CAAY,QAAZ,CAAqB,eAArB,EAAN;AAAA,OADR;;AAIL,MAAA,SAAS,EAAE,qBAAA;AACT,oCAA2B,MAAI,CAAC,MAAL,CAAY,KAAZ,CAAkB,SAA7C;AAAA,YAAQ,KAAR,yBAAQ,KAAR;AAAA,YAAe,OAAf,yBAAe,OAAf;AACA,YAAM,SAAS,GAAG,OAAO,CAAC,GAAR,KAAgB,CAAlC;;AAEA,YAAI,CAAC,KAAD,IAAU,OAAO,CAAC,MAAR,CAAe,IAAf,CAAoB,IAApB,KAA6B,MAAI,CAAC,IAAhD,EAAsD;AACpD,iBAAO,KAAP;AACD;;AAED,YAAI,SAAS,IAAI,CAAC,OAAO,CAAC,MAAR,CAAe,WAAf,CAA2B,MAA7C,EAAqD;AACnD,iBAAO,MAAI,CAAC,MAAL,CAAY,QAAZ,CAAqB,UAArB,EAAP;AACD;;AAED,eAAO,KAAP;AACD;AAjBI,KAAP;AAmBD,GA5FoD;AA8FrD,EAAA,aA9FqD,2BA8FxC;AACX,WAAO,CACL,sBAAsB,CAAC,kBAAD,EAAqB,KAAK,IAA1B,EAAgC;AAAA,UAAG,MAAH,SAAG,MAAH;AAAA,aAAqB,MAArB;AAAA,KAAhC,CADjB,EAEL,sBAAsB,CAAC,eAAD,EAAkB,KAAK,IAAvB,EAA6B;AAAA,UAAG,MAAH,SAAG,MAAH;AAAA,aAAqB,MAArB;AAAA,KAA7B,CAFjB,CAAP;AAID;AAnGoD,CAA9B,C","sourcesContent":["import { Command, Node } from '@tiptap/core'\nimport { textblockTypeInputRule } from 'prosemirror-inputrules'\n\nexport interface CodeBlockOptions {\n  languageClassPrefix: string,\n  HTMLAttributes: Record<string, any>,\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands {\n    codeBlock: {\n      /**\n       * Set a code block\n       */\n      setCodeBlock: (attributes?: { language: string }) => Command,\n      /**\n       * Toggle a code block\n       */\n      toggleCodeBlock: (attributes?: { language: string }) => Command,\n    }\n  }\n}\n\nexport const backtickInputRegex = /^```(?<language>[a-z]*)? $/\nexport const tildeInputRegex = /^~~~(?<language>[a-z]*)? $/\n\nexport const CodeBlock = Node.create<CodeBlockOptions>({\n  name: 'codeBlock',\n\n  defaultOptions: {\n    languageClassPrefix: 'language-',\n    HTMLAttributes: {},\n  },\n\n  content: 'text*',\n\n  marks: '',\n\n  group: 'block',\n\n  code: true,\n\n  defining: true,\n\n  addAttributes() {\n    return {\n      language: {\n        default: null,\n        parseHTML: element => {\n          const classAttribute = element.firstElementChild?.getAttribute('class')\n\n          if (!classAttribute) {\n            return null\n          }\n\n          const regexLanguageClassPrefix = new RegExp(`^(${this.options.languageClassPrefix})`)\n\n          return {\n            language: classAttribute.replace(regexLanguageClassPrefix, ''),\n          }\n        },\n        renderHTML: attributes => {\n          if (!attributes.language) {\n            return null\n          }\n\n          return {\n            class: this.options.languageClassPrefix + attributes.language,\n          }\n        },\n      },\n    }\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: 'pre',\n        preserveWhitespace: 'full',\n      },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['pre', this.options.HTMLAttributes, ['code', HTMLAttributes, 0]]\n  },\n\n  addCommands() {\n    return {\n      setCodeBlock: attributes => ({ commands }) => {\n        return commands.setNode('codeBlock', attributes)\n      },\n      toggleCodeBlock: attributes => ({ commands }) => {\n        return commands.toggleNode('codeBlock', 'paragraph', attributes)\n      },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Alt-c': () => this.editor.commands.toggleCodeBlock(),\n\n      // remove code block when at start of document or code block is empty\n      Backspace: () => {\n        const { empty, $anchor } = this.editor.state.selection\n        const isAtStart = $anchor.pos === 1\n\n        if (!empty || $anchor.parent.type.name !== this.name) {\n          return false\n        }\n\n        if (isAtStart || !$anchor.parent.textContent.length) {\n          return this.editor.commands.clearNodes()\n        }\n\n        return false\n      },\n    }\n  },\n\n  addInputRules() {\n    return [\n      textblockTypeInputRule(backtickInputRegex, this.type, ({ groups }: any) => groups),\n      textblockTypeInputRule(tildeInputRegex, this.type, ({ groups }: any) => groups),\n    ]\n  },\n})\n"]},"metadata":{},"sourceType":"module"}