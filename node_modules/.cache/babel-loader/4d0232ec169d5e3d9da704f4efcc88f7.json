{"ast":null,"code":"var _jsxFileName = \"D:\\\\Pyramidion\\\\WebApp\\\\Izze-Admin\\\\src\\\\hook\\\\useService.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext } from 'react';\nimport MobxObserver from '../Mobx/Helpers/MobxObserver';\nimport { useStore } from '../Mobx/Helpers/UseStore';\nimport { PostApi } from '../utils/ApiService';\nimport { LogoutUser } from '../utils/FirebaseUtils';\nimport useSnackbar from './useSnackbar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ServiceContext = /*#__PURE__*/React.createContext(null);\nexport const ServiceProvider = MobxObserver(_c = _s(props => {\n  _s();\n\n  const {\n    children\n  } = props;\n  const {\n    UserStore\n  } = useStore();\n  const Snackbar = useSnackbar();\n\n  const PostService = (url, data = {}) => {\n    return new Promise((resolve, reject) => {\n      PostApi(url, data, UserStore.IdToken).then(resolve).catch(err => {\n        const {\n          statusCode\n        } = err;\n\n        if (statusCode == 401) {\n          Snackbar.show(err.message, 'error');\n          return LogoutUser();\n        }\n\n        return reject(err);\n      });\n    });\n  };\n\n  const ProviderValue = {\n    Post: PostService,\n    Logout: LogoutUser\n  };\n  return /*#__PURE__*/_jsxDEV(ServiceContext.Provider, {\n    value: ProviderValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}, \"MSpy6Kj0AP1OzKWzyPlL3d94RxE=\", false, function () {\n  return [useStore, useSnackbar];\n}));\n_c2 = ServiceProvider;\n\nconst useService = () => {\n  _s2();\n\n  return useContext(ServiceContext);\n};\n\n_s2(useService, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport default useService;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ServiceProvider$MobxObserver\");\n$RefreshReg$(_c2, \"ServiceProvider\");","map":{"version":3,"sources":["D:/Pyramidion/WebApp/Izze-Admin/src/hook/useService.tsx"],"names":["React","useContext","MobxObserver","useStore","PostApi","LogoutUser","useSnackbar","ServiceContext","createContext","ServiceProvider","props","children","UserStore","Snackbar","PostService","url","data","Promise","resolve","reject","IdToken","then","catch","err","statusCode","show","message","ProviderValue","Post","Logout","useService"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAA2D,OAA3D;AACA,OAAOC,YAAP,MAAyB,8BAAzB;AACA,SAASC,QAAT,QAAyB,0BAAzB;AACA,SAASC,OAAT,QAAwB,qBAAxB;AACA,SAASC,UAAT,QAA2B,wBAA3B;AACA,OAAOC,WAAP,MAAwB,eAAxB;;AAEA,OAAO,MAAMC,cAAc,gBAAGP,KAAK,CAACQ,aAAN,CAAyB,IAAzB,CAAvB;AAEP,OAAO,MAAMC,eAAe,GAAGP,YAAY,SAAEQ,KAAD,IAAgB;AAAA;;AAC1D,QAAM;AAAEC,IAAAA;AAAF,MAAeD,KAArB;AACA,QAAM;AAAEE,IAAAA;AAAF,MAAgBT,QAAQ,EAA9B;AACA,QAAMU,QAAQ,GAAGP,WAAW,EAA5B;;AAEA,QAAMQ,WAAW,GAAG,CAACC,GAAD,EAAcC,IAAS,GAAG,EAA1B,KAAiC;AACnD,WAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCf,MAAAA,OAAO,CAACW,GAAD,EAAMC,IAAN,EAAYJ,SAAS,CAACQ,OAAtB,CAAP,CACGC,IADH,CACQH,OADR,EAEGI,KAFH,CAEUC,GAAD,IAAc;AACnB,cAAM;AAAEC,UAAAA;AAAF,YAAiBD,GAAvB;;AACA,YAAIC,UAAU,IAAI,GAAlB,EAAuB;AACrBX,UAAAA,QAAQ,CAACY,IAAT,CAAcF,GAAG,CAACG,OAAlB,EAA2B,OAA3B;AACA,iBAAOrB,UAAU,EAAjB;AACD;;AACD,eAAOc,MAAM,CAACI,GAAD,CAAb;AACD,OATH;AAUD,KAXM,CAAP;AAYD,GAbD;;AAeA,QAAMI,aAAa,GAAG;AACpBC,IAAAA,IAAI,EAAEd,WADc;AAEpBe,IAAAA,MAAM,EAAExB;AAFY,GAAtB;AAIA,sBACE,QAAC,cAAD,CAAgB,QAAhB;AAAyB,IAAA,KAAK,EAAEsB,aAAhC;AAAA,cACGhB;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CA7B0C;AAAA,UAEnBR,QAFmB,EAGxBG,WAHwB;AAAA,GAApC;MAAMG,e;;AA+Bb,MAAMqB,UAAU,GAAG,MAAM;AAAA;;AACvB,SAAO7B,UAAU,CAACM,cAAD,CAAjB;AACD,CAFD;;IAAMuB,U;;AAIN,eAAeA,UAAf","sourcesContent":["import React, { useContext, createContext, useState } from 'react';\r\nimport MobxObserver from '../Mobx/Helpers/MobxObserver';\r\nimport { useStore } from '../Mobx/Helpers/UseStore';\r\nimport { PostApi } from '../utils/ApiService';\r\nimport { LogoutUser } from '../utils/FirebaseUtils';\r\nimport useSnackbar from './useSnackbar';\r\n\r\nexport const ServiceContext = React.createContext<any>(null);\r\n\r\nexport const ServiceProvider = MobxObserver((props: any) => {\r\n  const { children } = props;\r\n  const { UserStore } = useStore();\r\n  const Snackbar = useSnackbar();\r\n\r\n  const PostService = (url: string, data: any = {}) => {\r\n    return new Promise((resolve, reject) => {\r\n      PostApi(url, data, UserStore.IdToken)\r\n        .then(resolve)\r\n        .catch((err: any) => {\r\n          const { statusCode } = err\r\n          if (statusCode == 401) {\r\n            Snackbar.show(err.message, 'error');\r\n            return LogoutUser()\r\n          }\r\n          return reject(err)\r\n        })\r\n    })\r\n  };\r\n\r\n  const ProviderValue = {\r\n    Post: PostService,\r\n    Logout: LogoutUser,\r\n  };\r\n  return (\r\n    <ServiceContext.Provider value={ProviderValue}>\r\n      {children}\r\n    </ServiceContext.Provider>\r\n  );\r\n});\r\n\r\nconst useService = () => {\r\n  return useContext(ServiceContext);\r\n};\r\n\r\nexport default useService;\r\n"]},"metadata":{},"sourceType":"module"}