{"ast":null,"code":"var CLOUD_NAME=process.env.REACT_APP_CLOUDINARY_CLOUD_NAME;var IMAGE_UPLOAD_URL=process.env.REACT_APP_CLOUDINARY_IMAGE_URL;var UPLOAD_PRESENT=process.env.REACT_APP_CLOUDINARY_UPLOAD_PRESENT;export var uploadImageCloudinary=function uploadImageCloudinary(file){var data=new FormData();data.append(\"file\",file);data.append(\"cloud_name\",CLOUD_NAME);data.append(\"upload_preset\",UPLOAD_PRESENT);return fetch(IMAGE_UPLOAD_URL,{method:\"post\",body:data}).then(function(resp){return resp.json();}).then(function(_ref){var public_id=_ref.public_id,secure_url=_ref.secure_url;return{public_id:public_id,url:secure_url};});};export var uploadNewImage=function uploadNewImage(imageData){var isNew=imageData.isNew,file=imageData.file;if(isNew){return uploadImageCloudinary(file);}else{return Promise.resolve(file);}};","map":{"version":3,"sources":["D:/Pyramidion/WebApp/Izze-Admin/src/utils/CloudinaryUtils.tsx"],"names":["CLOUD_NAME","process","env","REACT_APP_CLOUDINARY_CLOUD_NAME","IMAGE_UPLOAD_URL","REACT_APP_CLOUDINARY_IMAGE_URL","UPLOAD_PRESENT","REACT_APP_CLOUDINARY_UPLOAD_PRESENT","uploadImageCloudinary","file","data","FormData","append","fetch","method","body","then","resp","json","public_id","secure_url","url","uploadNewImage","imageData","isNew","Promise","resolve"],"mappings":"AACA,GAAMA,CAAAA,UAAkB,CAAGC,OAAO,CAACC,GAAR,CAAYC,+BAAvC,CACA,GAAMC,CAAAA,gBAAwB,CAAGH,OAAO,CAACC,GAAR,CAAYG,8BAA7C,CACA,GAAMC,CAAAA,cAAsB,CAAGL,OAAO,CAACC,GAAR,CAAYK,mCAA3C,CAEA,MAAO,IAAMC,CAAAA,qBAAqB,CAAG,QAAxBA,CAAAA,qBAAwB,CAACC,IAAD,CAAe,CAClD,GAAMC,CAAAA,IAAI,CAAG,GAAIC,CAAAA,QAAJ,EAAb,CACAD,IAAI,CAACE,MAAL,CAAY,MAAZ,CAAoBH,IAApB,EACAC,IAAI,CAACE,MAAL,CAAY,YAAZ,CAA0BZ,UAA1B,EACAU,IAAI,CAACE,MAAL,CAAY,eAAZ,CAA6BN,cAA7B,EACA,MAAOO,CAAAA,KAAK,CAACT,gBAAD,CAAmB,CAC7BU,MAAM,CAAE,MADqB,CAE7BC,IAAI,CAAEL,IAFuB,CAAnB,CAAL,CAGJM,IAHI,CAGC,SAAAC,IAAI,QAAIA,CAAAA,IAAI,CAACC,IAAL,EAAJ,EAHL,EAIJF,IAJI,CAIC,cAA+B,IAA5BG,CAAAA,SAA4B,MAA5BA,SAA4B,CAAjBC,UAAiB,MAAjBA,UAAiB,CACnC,MAAO,CAAED,SAAS,CAATA,SAAF,CAAaE,GAAG,CAAED,UAAlB,CAAP,CACD,CANI,CAAP,CAOD,CAZM,CAcP,MAAO,IAAME,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAACC,SAAD,CAAoB,CAChD,GAAQC,CAAAA,KAAR,CAAwBD,SAAxB,CAAQC,KAAR,CAAef,IAAf,CAAwBc,SAAxB,CAAed,IAAf,CACA,GAAIe,KAAJ,CAAW,CACT,MAAOhB,CAAAA,qBAAqB,CAACC,IAAD,CAA5B,CACD,CAFD,IAEO,CACL,MAAOgB,CAAAA,OAAO,CAACC,OAAR,CAAgBjB,IAAhB,CAAP,CACD,CACF,CAPM","sourcesContent":["\r\nconst CLOUD_NAME: string = process.env.REACT_APP_CLOUDINARY_CLOUD_NAME as string;\r\nconst IMAGE_UPLOAD_URL: string = process.env.REACT_APP_CLOUDINARY_IMAGE_URL as string;\r\nconst UPLOAD_PRESENT: string = process.env.REACT_APP_CLOUDINARY_UPLOAD_PRESENT as string;\r\n\r\nexport const uploadImageCloudinary = (file: any) => {\r\n  const data = new FormData()\r\n  data.append(\"file\", file)\r\n  data.append(\"cloud_name\", CLOUD_NAME)\r\n  data.append(\"upload_preset\", UPLOAD_PRESENT)\r\n  return fetch(IMAGE_UPLOAD_URL, {\r\n    method: \"post\",\r\n    body: data\r\n  }).then(resp => resp.json())\r\n    .then(({ public_id, secure_url }) => {\r\n      return { public_id, url: secure_url }\r\n    })\r\n}\r\n\r\nexport const uploadNewImage = (imageData: any) => {\r\n  const { isNew, file } = imageData\r\n  if (isNew) {\r\n    return uploadImageCloudinary(file)\r\n  } else {\r\n    return Promise.resolve(file)\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}