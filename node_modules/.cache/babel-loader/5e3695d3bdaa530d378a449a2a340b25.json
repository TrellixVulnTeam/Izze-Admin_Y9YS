{"ast":null,"code":"import { Mark, mergeAttributes, markInputRule, markPasteRule } from '@tiptap/core';\nconst inputRegex = /(?:^|\\s)((?:~~)((?:[^~]+))(?:~~))$/gm;\nconst pasteRegex = /(?:^|\\s)((?:~~)((?:[^~]+))(?:~~))/gm;\nconst Strike = Mark.create({\n  name: 'strike',\n  defaultOptions: {\n    HTMLAttributes: {}\n  },\n\n  parseHTML() {\n    return [{\n      tag: 's'\n    }, {\n      tag: 'del'\n    }, {\n      tag: 'strike'\n    }, {\n      style: 'text-decoration',\n      consuming: false,\n      getAttrs: style => style.includes('line-through') ? {} : false\n    }];\n  },\n\n  renderHTML({\n    HTMLAttributes\n  }) {\n    return ['s', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n\n  addCommands() {\n    return {\n      setStrike: () => ({\n        commands\n      }) => {\n        return commands.setMark('strike');\n      },\n      toggleStrike: () => ({\n        commands\n      }) => {\n        return commands.toggleMark('strike');\n      },\n      unsetStrike: () => ({\n        commands\n      }) => {\n        return commands.unsetMark('strike');\n      }\n    };\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Shift-x': () => this.editor.commands.toggleStrike()\n    };\n  },\n\n  addInputRules() {\n    return [markInputRule(inputRegex, this.type)];\n  },\n\n  addPasteRules() {\n    return [markPasteRule(pasteRegex, this.type)];\n  }\n\n});\nexport default Strike;\nexport { Strike, inputRegex, pasteRegex };","map":{"version":3,"sources":["../src/strike.ts"],"names":[],"mappings":";MA+Ba,UAAU,GAAG,sC;MACb,UAAU,GAAG,qC;MAEb,MAAM,GAAG,IAAI,CAAC,MAAL,CAA2B;AAC/C,EAAA,IAAI,EAAE,QADyC;AAG/C,EAAA,cAAc,EAAE;AACd,IAAA,cAAc,EAAE;AADF,GAH+B;;AAO/C,EAAA,SAAS,GAAA;AACP,WAAO,CACL;AACE,MAAA,GAAG,EAAE;AADP,KADK,EAIL;AACE,MAAA,GAAG,EAAE;AADP,KAJK,EAOL;AACE,MAAA,GAAG,EAAE;AADP,KAPK,EAUL;AACE,MAAA,KAAK,EAAE,iBADT;AAEE,MAAA,SAAS,EAAE,KAFb;AAGE,MAAA,QAAQ,EAAE,KAAK,IAAM,KAAgB,CAAC,QAAjB,CAA0B,cAA1B,IAA4C,EAA5C,GAAiD;AAHxE,KAVK,CAAP;AAgBD,GAxB8C;;AA0B/C,EAAA,UAAU,CAAC;AAAE,IAAA;AAAF,GAAD,EAAmB;AAC3B,WAAO,CAAC,GAAD,EAAM,eAAe,CAAC,KAAK,OAAL,CAAa,cAAd,EAA8B,cAA9B,CAArB,EAAoE,CAApE,CAAP;AACD,GA5B8C;;AA8B/C,EAAA,WAAW,GAAA;AACT,WAAO;AACL,MAAA,SAAS,EAAE,MAAM,CAAC;AAAE,QAAA;AAAF,OAAD,KAAa;AAC5B,eAAO,QAAQ,CAAC,OAAT,CAAiB,QAAjB,CAAP;AACD,OAHI;AAIL,MAAA,YAAY,EAAE,MAAM,CAAC;AAAE,QAAA;AAAF,OAAD,KAAa;AAC/B,eAAO,QAAQ,CAAC,UAAT,CAAoB,QAApB,CAAP;AACD,OANI;AAOL,MAAA,WAAW,EAAE,MAAM,CAAC;AAAE,QAAA;AAAF,OAAD,KAAa;AAC9B,eAAO,QAAQ,CAAC,SAAT,CAAmB,QAAnB,CAAP;AACD;AATI,KAAP;AAWD,GA1C8C;;AA4C/C,EAAA,oBAAoB,GAAA;AAClB,WAAO;AACL,qBAAe,MAAM,KAAK,MAAL,CAAY,QAAZ,CAAqB,YAArB;AADhB,KAAP;AAGD,GAhD8C;;AAkD/C,EAAA,aAAa,GAAA;AACX,WAAO,CACL,aAAa,CAAC,UAAD,EAAa,KAAK,IAAlB,CADR,CAAP;AAGD,GAtD8C;;AAwD/C,EAAA,aAAa,GAAA;AACX,WAAO,CACL,aAAa,CAAC,UAAD,EAAa,KAAK,IAAlB,CADR,CAAP;AAGD;;AA5D8C,CAA3B,C","sourcesContent":["import {\n  Command,\n  Mark,\n  markInputRule,\n  markPasteRule,\n  mergeAttributes,\n} from '@tiptap/core'\n\nexport interface StrikeOptions {\n  HTMLAttributes: Record<string, any>,\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands {\n    strike: {\n      /**\n       * Set a strike mark\n       */\n      setStrike: () => Command,\n      /**\n       * Toggle a strike mark\n       */\n      toggleStrike: () => Command,\n      /**\n       * Unset a strike mark\n       */\n      unsetStrike: () => Command,\n    }\n  }\n}\n\nexport const inputRegex = /(?:^|\\s)((?:~~)((?:[^~]+))(?:~~))$/gm\nexport const pasteRegex = /(?:^|\\s)((?:~~)((?:[^~]+))(?:~~))/gm\n\nexport const Strike = Mark.create<StrikeOptions>({\n  name: 'strike',\n\n  defaultOptions: {\n    HTMLAttributes: {},\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: 's',\n      },\n      {\n        tag: 'del',\n      },\n      {\n        tag: 'strike',\n      },\n      {\n        style: 'text-decoration',\n        consuming: false,\n        getAttrs: style => ((style as string).includes('line-through') ? {} : false),\n      },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['s', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      setStrike: () => ({ commands }) => {\n        return commands.setMark('strike')\n      },\n      toggleStrike: () => ({ commands }) => {\n        return commands.toggleMark('strike')\n      },\n      unsetStrike: () => ({ commands }) => {\n        return commands.unsetMark('strike')\n      },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Shift-x': () => this.editor.commands.toggleStrike(),\n    }\n  },\n\n  addInputRules() {\n    return [\n      markInputRule(inputRegex, this.type),\n    ]\n  },\n\n  addPasteRules() {\n    return [\n      markPasteRule(pasteRegex, this.type),\n    ]\n  },\n})\n"]},"metadata":{},"sourceType":"module"}