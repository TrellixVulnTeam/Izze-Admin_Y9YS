{"ast":null,"code":"import { Node, mergeAttributes } from '@tiptap/core';\nimport { wrappingInputRule } from 'prosemirror-inputrules';\nvar inputRegex = /^\\s*>\\s$/gm;\nvar Blockquote = Node.create({\n  name: 'blockquote',\n  defaultOptions: {\n    HTMLAttributes: {}\n  },\n  content: 'block*',\n  group: 'block',\n  defining: true,\n  parseHTML: function parseHTML() {\n    return [{\n      tag: 'blockquote'\n    }];\n  },\n  renderHTML: function renderHTML(_ref) {\n    var HTMLAttributes = _ref.HTMLAttributes;\n    return ['blockquote', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n  addCommands: function addCommands() {\n    return {\n      setBlockquote: function setBlockquote() {\n        return function (_ref2) {\n          var commands = _ref2.commands;\n          return commands.wrapIn('blockquote');\n        };\n      },\n      toggleBlockquote: function toggleBlockquote() {\n        return function (_ref3) {\n          var commands = _ref3.commands;\n          return commands.toggleWrap('blockquote');\n        };\n      },\n      unsetBlockquote: function unsetBlockquote() {\n        return function (_ref4) {\n          var commands = _ref4.commands;\n          return commands.lift('blockquote');\n        };\n      }\n    };\n  },\n  addKeyboardShortcuts: function addKeyboardShortcuts() {\n    var _this = this;\n\n    return {\n      'Mod-Shift-b': function ModShiftB() {\n        return _this.editor.commands.toggleBlockquote();\n      }\n    };\n  },\n  addInputRules: function addInputRules() {\n    return [wrappingInputRule(inputRegex, this.type)];\n  }\n});\nexport default Blockquote;\nexport { Blockquote, inputRegex };","map":{"version":3,"sources":["../src/blockquote.ts"],"names":[],"mappings":";;IA0Ba,UAAU,GAAG,Y;IAEb,UAAU,GAAG,IAAI,CAAC,MAAL,CAA+B;AAEvD,EAAA,IAAI,EAAE,YAFiD;AAIvD,EAAA,cAAc,EAAE;AACd,IAAA,cAAc,EAAE;AADF,GAJuC;AAQvD,EAAA,OAAO,EAAE,QAR8C;AAUvD,EAAA,KAAK,EAAE,OAVgD;AAYvD,EAAA,QAAQ,EAAE,IAZ6C;AAcvD,EAAA,SAduD,uBAc9C;AACP,WAAO,CACL;AAAE,MAAA,GAAG,EAAE;AAAP,KADK,CAAP;AAGD,GAlBsD;AAoBvD,EAAA,UApBuD,4BAoB1B;AAAA,QAAhB,cAAgB,QAAhB,cAAgB;AAC3B,WAAO,CAAC,YAAD,EAAe,eAAe,CAAC,KAAK,OAAL,CAAa,cAAd,EAA8B,cAA9B,CAA9B,EAA6E,CAA7E,CAAP;AACD,GAtBsD;AAwBvD,EAAA,WAxBuD,yBAwB5C;AACT,WAAO;AACL,MAAA,aAAa,EAAE;AAAA,eAAM,iBAAa;AAAA,cAAV,QAAU,SAAV,QAAU;AAChC,iBAAO,QAAQ,CAAC,MAAT,CAAgB,YAAhB,CAAP;AACD,SAFc;AAAA,OADV;AAIL,MAAA,gBAAgB,EAAE;AAAA,eAAM,iBAAa;AAAA,cAAV,QAAU,SAAV,QAAU;AACnC,iBAAO,QAAQ,CAAC,UAAT,CAAoB,YAApB,CAAP;AACD,SAFiB;AAAA,OAJb;AAOL,MAAA,eAAe,EAAE;AAAA,eAAM,iBAAa;AAAA,cAAV,QAAU,SAAV,QAAU;AAClC,iBAAO,QAAQ,CAAC,IAAT,CAAc,YAAd,CAAP;AACD,SAFgB;AAAA;AAPZ,KAAP;AAWD,GApCsD;AAsCvD,EAAA,oBAtCuD,kCAsCnC;AAAA;;AAClB,WAAO;AACL,qBAAe;AAAA,eAAM,KAAI,CAAC,MAAL,CAAY,QAAZ,CAAqB,gBAArB,EAAN;AAAA;AADV,KAAP;AAGD,GA1CsD;AA4CvD,EAAA,aA5CuD,2BA4C1C;AACX,WAAO,CACL,iBAAiB,CAAC,UAAD,EAAa,KAAK,IAAlB,CADZ,CAAP;AAGD;AAhDsD,CAA/B,C","sourcesContent":["import { Command, Node, mergeAttributes } from '@tiptap/core'\nimport { wrappingInputRule } from 'prosemirror-inputrules'\n\nexport interface BlockquoteOptions {\n  HTMLAttributes: Record<string, any>,\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands {\n    blockQuote: {\n      /**\n       * Set a blockquote node\n       */\n      setBlockquote: () => Command,\n      /**\n       * Toggle a blockquote node\n       */\n      toggleBlockquote: () => Command,\n      /**\n       * Unset a blockquote node\n       */\n      unsetBlockquote: () => Command,\n    }\n  }\n}\n\nexport const inputRegex = /^\\s*>\\s$/gm\n\nexport const Blockquote = Node.create<BlockquoteOptions>({\n\n  name: 'blockquote',\n\n  defaultOptions: {\n    HTMLAttributes: {},\n  },\n\n  content: 'block*',\n\n  group: 'block',\n\n  defining: true,\n\n  parseHTML() {\n    return [\n      { tag: 'blockquote' },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['blockquote', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      setBlockquote: () => ({ commands }) => {\n        return commands.wrapIn('blockquote')\n      },\n      toggleBlockquote: () => ({ commands }) => {\n        return commands.toggleWrap('blockquote')\n      },\n      unsetBlockquote: () => ({ commands }) => {\n        return commands.lift('blockquote')\n      },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Shift-b': () => this.editor.commands.toggleBlockquote(),\n    }\n  },\n\n  addInputRules() {\n    return [\n      wrappingInputRule(inputRegex, this.type),\n    ]\n  },\n})\n"]},"metadata":{},"sourceType":"module"}