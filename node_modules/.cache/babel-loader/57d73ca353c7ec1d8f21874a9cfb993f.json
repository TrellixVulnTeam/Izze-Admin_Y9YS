{"ast":null,"code":"import { Node } from '@tiptap/core';\nimport { textblockTypeInputRule } from 'prosemirror-inputrules';\nconst backtickInputRegex = /^```(?<language>[a-z]*)? $/;\nconst tildeInputRegex = /^~~~(?<language>[a-z]*)? $/;\nconst CodeBlock = Node.create({\n  name: 'codeBlock',\n  defaultOptions: {\n    languageClassPrefix: 'language-',\n    HTMLAttributes: {}\n  },\n  content: 'text*',\n  marks: '',\n  group: 'block',\n  code: true,\n  defining: true,\n\n  addAttributes() {\n    return {\n      language: {\n        default: null,\n        parseHTML: element => {\n          var _a;\n\n          const classAttribute = (_a = element.firstElementChild) === null || _a === void 0 ? void 0 : _a.getAttribute('class');\n\n          if (!classAttribute) {\n            return null;\n          }\n\n          const regexLanguageClassPrefix = new RegExp(`^(${this.options.languageClassPrefix})`);\n          return {\n            language: classAttribute.replace(regexLanguageClassPrefix, '')\n          };\n        },\n        renderHTML: attributes => {\n          if (!attributes.language) {\n            return null;\n          }\n\n          return {\n            class: this.options.languageClassPrefix + attributes.language\n          };\n        }\n      }\n    };\n  },\n\n  parseHTML() {\n    return [{\n      tag: 'pre',\n      preserveWhitespace: 'full'\n    }];\n  },\n\n  renderHTML({\n    HTMLAttributes\n  }) {\n    return ['pre', this.options.HTMLAttributes, ['code', HTMLAttributes, 0]];\n  },\n\n  addCommands() {\n    return {\n      setCodeBlock: attributes => ({\n        commands\n      }) => {\n        return commands.setNode('codeBlock', attributes);\n      },\n      toggleCodeBlock: attributes => ({\n        commands\n      }) => {\n        return commands.toggleNode('codeBlock', 'paragraph', attributes);\n      }\n    };\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Alt-c': () => this.editor.commands.toggleCodeBlock(),\n      // remove code block when at start of document or code block is empty\n      Backspace: () => {\n        const {\n          empty,\n          $anchor\n        } = this.editor.state.selection;\n        const isAtStart = $anchor.pos === 1;\n\n        if (!empty || $anchor.parent.type.name !== this.name) {\n          return false;\n        }\n\n        if (isAtStart || !$anchor.parent.textContent.length) {\n          return this.editor.commands.clearNodes();\n        }\n\n        return false;\n      }\n    };\n  },\n\n  addInputRules() {\n    return [textblockTypeInputRule(backtickInputRegex, this.type, ({\n      groups\n    }) => groups), textblockTypeInputRule(tildeInputRegex, this.type, ({\n      groups\n    }) => groups)];\n  }\n\n});\nexport default CodeBlock;\nexport { CodeBlock, backtickInputRegex, tildeInputRegex };","map":null,"metadata":{},"sourceType":"module"}