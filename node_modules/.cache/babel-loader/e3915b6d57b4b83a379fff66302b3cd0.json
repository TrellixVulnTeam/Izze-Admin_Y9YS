{"ast":null,"code":"var _jsxFileName = \"D:\\\\Pyramidion\\\\WebApp\\\\Izze-Admin\\\\src\\\\pages\\\\AppUsers\\\\AppSkinCare.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport React, { useEffect, useLayoutEffect, useRef, useState } from 'react';\nimport { Button, Card, CircularProgress, Grid, Table, TableBody, TableCell, TableRow, TextField } from '@material-ui/core';\nimport { Autocomplete } from '@material-ui/lab';\nimport { makeStyles } from '@material-ui/styles';\nimport { Formik } from 'formik';\nimport clsx from 'clsx';\nimport * as Yup from 'yup';\nimport getDropValues, { CurrentClimateDrop, getSubSkinIrregular, NoOption, SkinIrregularDrop, SkinTextureDrop, SkinTypeDrop } from '../../utils/PlanDropdowns';\nimport useSnackbar from '../../hook/useSnackbar';\nimport useService from '../../hook/useService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  editCardRoot: {\n    padding: theme.spacing(2)\n  },\n  marginLeft1: {\n    marginLeft: theme.spacing(1)\n  },\n  themeButton: {\n    color: theme.palette.white,\n    backgroundColor: theme.palette.green.main,\n    '&:hover': {\n      backgroundColor: theme.palette.green.dark\n    }\n  },\n  actionGrid: {\n    display: 'flex',\n    alignItems: \"center\",\n    justifyContent: \"flex-end\"\n  },\n  editButtonDiv: {\n    display: 'flex',\n    alignItems: \"center\",\n    justifyContent: \"flex-end\",\n    paddingBottom: theme.spacing(2)\n  }\n}));\n\nconst AppNutrition = props => {\n  _s();\n\n  const classes = useStyles();\n  const [isEdit, setIsEdit] = useState(false);\n  const {\n    data,\n    onRefresh\n  } = props;\n  const [formData, setFormData] = useState(data);\n  useEffect(() => {\n    setFormData(props.data);\n  }, [props.data]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [!isEdit && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.editButtonDiv,\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => setIsEdit(true),\n        className: classes.themeButton,\n        variant: \"outlined\",\n        children: \"Edit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 19\n    }, this), !isEdit && /*#__PURE__*/_jsxDEV(ViewCard, {\n      data: formData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 19\n    }, this), isEdit && /*#__PURE__*/_jsxDEV(EditCard, {\n      data: formData,\n      onClose: () => setIsEdit(false),\n      onSuccess: () => onRefresh()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 18\n    }, this)]\n  }, void 0, true);\n};\n\n_s(AppNutrition, \"kOZqXWHspKKEaYMq3NYIuhfmNTM=\", false, function () {\n  return [useStyles];\n});\n\n_c = AppNutrition;\n\nconst EditCard = props => {\n  _s2();\n\n  const classes = useStyles();\n  const {\n    onClose,\n    onSuccess\n  } = props;\n  const formikRef = useRef(null);\n  const Snackbar = useSnackbar();\n  const {\n    Post\n  } = useService();\n  const formInitialValue = {\n    id: \"\",\n    skin_type: \"\",\n    current_climate: \"\",\n    skin_irregular: \"\",\n    skin_irregular_sub: \"\",\n    skin_texture: \"\"\n  };\n  const [initialValue, setInitialValue] = useState(formInitialValue);\n\n  const onSubmit = (value, {\n    setSubmitting,\n    resetForm\n  }) => {\n    setSubmitting(true);\n    Post('app/updateSkincarePlan', value).then(res => {\n      Snackbar.show(res.message, 'success');\n      setSubmitting(false);\n      resetForm();\n      onClose();\n      onSuccess();\n    }).catch(err => {\n      setSubmitting(false);\n      Snackbar.show(err.message, 'error');\n    });\n  };\n\n  useLayoutEffect(() => {\n    const {\n      _id,\n      skin_type,\n      current_climate,\n      skin_irregular,\n      skin_irregular_sub,\n      skin_texture\n    } = props.data;\n    setInitialValue(prevState => ({ ...prevState,\n      id: _id,\n      skin_type,\n      current_climate,\n      skin_irregular,\n      skin_irregular_sub,\n      skin_texture\n    }));\n  }, [props.data]);\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: classes.editCardRoot,\n    children: /*#__PURE__*/_jsxDEV(Formik, {\n      innerRef: formikRef,\n      enableReinitialize: true,\n      initialValues: initialValue,\n      validationSchema: Yup.object().shape({\n        skin_type: Yup.string().trim().required('Skin Type is required'),\n        current_climate: Yup.string().trim().required('Current Climate is required'),\n        skin_irregular: Yup.string().trim().required('Skin Irregularites is required'),\n        skin_irregular_sub: Yup.string().trim().required('Sub Skin Irregularites is required'),\n        skin_texture: Yup.string().trim().required('Skin Texture is required')\n      }),\n      onSubmit: onSubmit,\n      children: ({\n        values,\n        errors,\n        touched,\n        handleChange,\n        handleBlur,\n        setFieldValue,\n        submitForm,\n        isSubmitting\n      }) => /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 2,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 4,\n            children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n              options: SkinTypeDrop,\n              value: SkinTypeDrop.find(data => data.id == values.skin_type) || NoOption,\n              getOptionLabel: option => option.name,\n              getOptionSelected: option => option.id == values.skin_type,\n              onChange: (event, newValue) => {\n                setFieldValue('skin_type', (newValue === null || newValue === void 0 ? void 0 : newValue.id) || '');\n              },\n              onBlur: handleBlur,\n              renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n                label: \"Skin Type\",\n                variant: \"outlined\",\n                error: Boolean(touched.skin_type && errors.skin_type),\n                helperText: touched.skin_type && errors.skin_type,\n                inputProps: { ...params.inputProps\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 141,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 4,\n            children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n              options: CurrentClimateDrop,\n              value: CurrentClimateDrop.find(data => data.id == values.current_climate) || NoOption,\n              getOptionLabel: option => option.name,\n              getOptionSelected: option => option.id == values.current_climate,\n              onChange: (event, newValue) => {\n                setFieldValue('current_climate', (newValue === null || newValue === void 0 ? void 0 : newValue.id) || '');\n              },\n              onBlur: handleBlur,\n              renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n                label: \"Current Climate\",\n                variant: \"outlined\",\n                error: Boolean(touched.current_climate && errors.current_climate),\n                helperText: touched.current_climate && errors.current_climate,\n                inputProps: { ...params.inputProps\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 166,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 4,\n            children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n              options: SkinTextureDrop,\n              value: SkinTextureDrop.find(data => data.id == values.skin_texture) || NoOption,\n              getOptionLabel: option => option.name,\n              getOptionSelected: option => option.id == values.skin_texture,\n              onChange: (event, newValue) => {\n                setFieldValue('skin_texture', (newValue === null || newValue === void 0 ? void 0 : newValue.id) || '');\n              },\n              onBlur: handleBlur,\n              renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n                label: \"Skin Texture\",\n                variant: \"outlined\",\n                error: Boolean(touched.skin_texture && errors.skin_texture),\n                helperText: touched.skin_texture && errors.skin_texture,\n                inputProps: { ...params.inputProps\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 191,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 181,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 6,\n            children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n              options: SkinIrregularDrop,\n              value: SkinIrregularDrop.find(data => data.id == values.skin_irregular) || NoOption,\n              getOptionLabel: option => option.name,\n              getOptionSelected: option => option.id == values.skin_irregular,\n              onChange: (event, newValue) => {\n                setFieldValue('skin_irregular', (newValue === null || newValue === void 0 ? void 0 : newValue.id) || '');\n                setFieldValue('skin_irregular_sub', '');\n              },\n              onBlur: handleBlur,\n              renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n                label: \"Skin Irregularites\",\n                variant: \"outlined\",\n                error: Boolean(touched.skin_irregular && errors.skin_irregular),\n                helperText: touched.skin_irregular && errors.skin_irregular,\n                inputProps: { ...params.inputProps\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 217,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 206,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 6,\n            children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n              options: getSubSkinIrregular(values.skin_irregular),\n              value: getSubSkinIrregular(values.skin_irregular).find(data => data.id == values.skin_irregular_sub) || NoOption,\n              getOptionLabel: option => option.name,\n              getOptionSelected: option => option.id == values.skin_irregular_sub,\n              onChange: (event, newValue) => {\n                setFieldValue('skin_irregular_sub', (newValue === null || newValue === void 0 ? void 0 : newValue.id) || '');\n              },\n              onBlur: handleBlur,\n              renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n                label: \"Sub Skin Irregularites\",\n                variant: \"outlined\",\n                error: Boolean(touched.skin_irregular_sub && errors.skin_irregular_sub),\n                helperText: touched.skin_irregular_sub && errors.skin_irregular_sub,\n                inputProps: { ...params.inputProps\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 242,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 232,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            className: classes.actionGrid,\n            item: true,\n            xs: 12,\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              onClick: () => onClose(),\n              variant: \"outlined\",\n              color: \"secondary\",\n              children: \"Cancel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 257,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              className: clsx(classes.themeButton, classes.marginLeft1),\n              onClick: () => submitForm(),\n              disabled: isSubmitting,\n              variant: \"outlined\",\n              children: isSubmitting ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n                size: 24,\n                style: {\n                  color: 'white'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 267,\n                columnNumber: 21\n              }, this) : 'Update'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 260,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 13\n        }, this)\n      }, void 0, false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(EditCard, \"N2Q4wQEx04Yo3H/ingRFpIIl5NQ=\", false, function () {\n  return [useStyles, useSnackbar, useService];\n});\n\n_c2 = EditCard;\n\nconst ViewCard = props => {\n  _s3();\n\n  const classes = useStyles();\n  const {\n    data\n  } = props;\n  const [formData, setFormData] = useState({});\n  useEffect(() => {\n    setFormData(data);\n  }, [props]);\n  return /*#__PURE__*/_jsxDEV(Card, {\n    children: /*#__PURE__*/_jsxDEV(Table, {\n      children: /*#__PURE__*/_jsxDEV(TableBody, {\n        children: [/*#__PURE__*/_jsxDEV(TableRow, {\n          children: [/*#__PURE__*/_jsxDEV(TableCell, {\n            children: \"Skin Type\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: getDropValues(SkinTypeDrop, formData === null || formData === void 0 ? void 0 : formData.skin_type)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 294,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TableRow, {\n          children: [/*#__PURE__*/_jsxDEV(TableCell, {\n            children: \"Current Climate\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 297,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: getDropValues(CurrentClimateDrop, formData === null || formData === void 0 ? void 0 : formData.current_climate)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 298,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TableRow, {\n          children: [/*#__PURE__*/_jsxDEV(TableCell, {\n            children: \"Skin Irregularities\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 301,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: getDropValues(SkinIrregularDrop, formData === null || formData === void 0 ? void 0 : formData.skin_irregular)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 302,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TableRow, {\n          children: [/*#__PURE__*/_jsxDEV(TableCell, {\n            children: \"Sub Skin Irregularities\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 305,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: getDropValues(getSubSkinIrregular(formData === null || formData === void 0 ? void 0 : formData.skin_irregular), formData === null || formData === void 0 ? void 0 : formData.skin_irregular_sub)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 306,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TableRow, {\n          children: [/*#__PURE__*/_jsxDEV(TableCell, {\n            children: \"Skin Texture\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 309,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: getDropValues(SkinTextureDrop, formData === null || formData === void 0 ? void 0 : formData.skin_texture)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 310,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 289,\n    columnNumber: 5\n  }, this);\n};\n\n_s3(ViewCard, \"/JjL4q6hbvUkM8aIr5aZAnfsDh0=\", false, function () {\n  return [useStyles];\n});\n\n_c3 = ViewCard;\nexport default AppNutrition;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"AppNutrition\");\n$RefreshReg$(_c2, \"EditCard\");\n$RefreshReg$(_c3, \"ViewCard\");","map":{"version":3,"sources":["D:/Pyramidion/WebApp/Izze-Admin/src/pages/AppUsers/AppSkinCare.tsx"],"names":["React","useEffect","useLayoutEffect","useRef","useState","Button","Card","CircularProgress","Grid","Table","TableBody","TableCell","TableRow","TextField","Autocomplete","makeStyles","Formik","clsx","Yup","getDropValues","CurrentClimateDrop","getSubSkinIrregular","NoOption","SkinIrregularDrop","SkinTextureDrop","SkinTypeDrop","useSnackbar","useService","useStyles","theme","editCardRoot","padding","spacing","marginLeft1","marginLeft","themeButton","color","palette","white","backgroundColor","green","main","dark","actionGrid","display","alignItems","justifyContent","editButtonDiv","paddingBottom","AppNutrition","props","classes","isEdit","setIsEdit","data","onRefresh","formData","setFormData","EditCard","onClose","onSuccess","formikRef","Snackbar","Post","formInitialValue","id","skin_type","current_climate","skin_irregular","skin_irregular_sub","skin_texture","initialValue","setInitialValue","onSubmit","value","setSubmitting","resetForm","then","res","show","message","catch","err","_id","prevState","object","shape","string","trim","required","values","errors","touched","handleChange","handleBlur","setFieldValue","submitForm","isSubmitting","find","option","name","event","newValue","params","Boolean","inputProps","ViewCard"],"mappings":"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","sourcesContent":["import React, { memo, useEffect, useLayoutEffect, useRef, useState } from 'react';\r\nimport {\r\n  Button,\r\n  Card, CircularProgress, Grid, Table, TableBody, TableCell,\r\n  TableRow,\r\n  TextField\r\n} from '@material-ui/core';\r\nimport { Autocomplete } from '@material-ui/lab';\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport { Formik } from 'formik';\r\nimport clsx from 'clsx';\r\nimport * as Yup from 'yup';\r\nimport getDropValues, { CurrentClimateDrop, DietTypeDrop, FitnessGoalDrop, getSubSkinIrregular, LifeStyleDrop, NoOption, SkinIrregularDrop, SkinTextureDrop, SkinTypeDrop } from '../../utils/PlanDropdowns';\r\nimport useSnackbar from '../../hook/useSnackbar';\r\nimport useService from '../../hook/useService';\r\n\r\nconst useStyles = makeStyles((theme: any) => ({\r\n  editCardRoot: {\r\n    padding: theme.spacing(2)\r\n  },\r\n  marginLeft1: {\r\n    marginLeft: theme.spacing(1),\r\n  },\r\n  themeButton: {\r\n    color: theme.palette.white,\r\n\r\n    backgroundColor: theme.palette.green.main,\r\n    '&:hover': {\r\n      backgroundColor: theme.palette.green.dark,\r\n    },\r\n  },\r\n  actionGrid: {\r\n    display: 'flex',\r\n    alignItems: \"center\",\r\n    justifyContent: \"flex-end\"\r\n  },\r\n  editButtonDiv: {\r\n    display: 'flex',\r\n    alignItems: \"center\",\r\n    justifyContent: \"flex-end\",\r\n    paddingBottom: theme.spacing(2)\r\n  }\r\n}));\r\n\r\nconst AppNutrition = (props: any) => {\r\n  const classes = useStyles();\r\n  const [isEdit, setIsEdit] = useState(false)\r\n  const { data, onRefresh } = props;\r\n  const [formData, setFormData] = useState<any>(data);\r\n  useEffect(() => {\r\n    setFormData(props.data)\r\n  }, [props.data]);\r\n\r\n  return (\r\n    <>\r\n      {!isEdit && <div className={classes.editButtonDiv}>\r\n        <Button onClick={() => setIsEdit(true)} className={classes.themeButton} variant='outlined'>\r\n          Edit\r\n        </Button>\r\n      </div>\r\n      }\r\n      {!isEdit && <ViewCard data={formData} />}\r\n      {isEdit && <EditCard data={formData} onClose={() => setIsEdit(false)} onSuccess={() => onRefresh()} />}\r\n    </>\r\n  );\r\n};\r\n\r\nconst EditCard = (props: any) => {\r\n  const classes = useStyles();\r\n  const { onClose, onSuccess } = props;\r\n  const formikRef = useRef<any>(null);\r\n  const Snackbar = useSnackbar();\r\n  const { Post } = useService();\r\n\r\n  const formInitialValue = {\r\n    id: \"\",\r\n    skin_type: \"\",\r\n    current_climate: \"\",\r\n    skin_irregular: \"\",\r\n    skin_irregular_sub: \"\",\r\n    skin_texture: \"\",\r\n\r\n  }\r\n\r\n  const [initialValue, setInitialValue] = useState<any>(formInitialValue);\r\n\r\n  const onSubmit = (value: any, { setSubmitting, resetForm }: any) => {\r\n    setSubmitting(true);\r\n\r\n    Post('app/updateSkincarePlan', value)\r\n      .then((res: any) => {\r\n        Snackbar.show(res.message, 'success');\r\n        setSubmitting(false);\r\n        resetForm();\r\n        onClose();\r\n        onSuccess();\r\n      })\r\n      .catch((err: any) => {\r\n        setSubmitting(false);\r\n        Snackbar.show(err.message, 'error');\r\n      });\r\n  };\r\n\r\n  useLayoutEffect(() => {\r\n    const { _id, skin_type, current_climate, skin_irregular, skin_irregular_sub, skin_texture } = props.data\r\n    setInitialValue((prevState: any) => ({ ...prevState, id: _id, skin_type, current_climate, skin_irregular, skin_irregular_sub, skin_texture }))\r\n  }, [props.data]);\r\n\r\n  return (\r\n    <Card className={classes.editCardRoot}>\r\n      <Formik\r\n        innerRef={formikRef}\r\n        enableReinitialize\r\n        initialValues={initialValue}\r\n        validationSchema={\r\n          Yup.object().shape({\r\n            skin_type: Yup.string().trim().required('Skin Type is required'),\r\n            current_climate: Yup.string().trim().required('Current Climate is required'),\r\n            skin_irregular: Yup.string().trim().required('Skin Irregularites is required'),\r\n            skin_irregular_sub: Yup.string().trim().required('Sub Skin Irregularites is required'),\r\n            skin_texture: Yup.string().trim().required('Skin Texture is required'),\r\n          })\r\n        }\r\n        onSubmit={onSubmit}\r\n      >\r\n        {({ values, errors, touched, handleChange, handleBlur, setFieldValue, submitForm, isSubmitting }) => (\r\n          <>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={4}>\r\n\r\n                <Autocomplete\r\n                  options={SkinTypeDrop}\r\n                  value={SkinTypeDrop.find((data: any) => data.id == values.skin_type) || NoOption}\r\n                  getOptionLabel={(option: any) => option.name}\r\n                  getOptionSelected={(option) => option.id == values.skin_type}\r\n                  onChange={(event: any, newValue: any) => {\r\n                    setFieldValue('skin_type', newValue?.id || '');\r\n                  }}\r\n                  onBlur={handleBlur}\r\n                  renderInput={(params: any) => (\r\n                    <TextField\r\n                      {...params}\r\n                      label='Skin Type'\r\n                      variant='outlined'\r\n                      error={Boolean(touched.skin_type && errors.skin_type)}\r\n                      helperText={touched.skin_type && errors.skin_type}\r\n                      inputProps={{\r\n                        ...params.inputProps,\r\n                      }}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              <Grid item xs={4}>\r\n                <Autocomplete\r\n                  options={CurrentClimateDrop}\r\n                  value={CurrentClimateDrop.find((data: any) => data.id == values.current_climate) || NoOption}\r\n                  getOptionLabel={(option: any) => option.name}\r\n                  getOptionSelected={(option) => option.id == values.current_climate}\r\n                  onChange={(event: any, newValue: any) => {\r\n                    setFieldValue('current_climate', newValue?.id || '');\r\n                  }}\r\n                  onBlur={handleBlur}\r\n                  renderInput={(params: any) => (\r\n                    <TextField\r\n                      {...params}\r\n                      label='Current Climate'\r\n                      variant='outlined'\r\n                      error={Boolean(touched.current_climate && errors.current_climate)}\r\n                      helperText={touched.current_climate && errors.current_climate}\r\n                      inputProps={{\r\n                        ...params.inputProps,\r\n                      }}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              <Grid item xs={4}>\r\n                <Autocomplete\r\n                  options={SkinTextureDrop}\r\n                  value={SkinTextureDrop.find((data: any) => data.id == values.skin_texture) || NoOption}\r\n                  getOptionLabel={(option: any) => option.name}\r\n                  getOptionSelected={(option) => option.id == values.skin_texture}\r\n                  onChange={(event: any, newValue: any) => {\r\n                    setFieldValue('skin_texture', newValue?.id || '');\r\n                  }}\r\n                  onBlur={handleBlur}\r\n                  renderInput={(params: any) => (\r\n                    <TextField\r\n                      {...params}\r\n                      label='Skin Texture'\r\n                      variant='outlined'\r\n                      error={Boolean(touched.skin_texture && errors.skin_texture)}\r\n                      helperText={touched.skin_texture && errors.skin_texture}\r\n                      inputProps={{\r\n                        ...params.inputProps,\r\n                      }}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              <Grid item xs={6}>\r\n                <Autocomplete\r\n                  options={SkinIrregularDrop}\r\n                  value={SkinIrregularDrop.find((data: any) => data.id == values.skin_irregular) || NoOption}\r\n                  getOptionLabel={(option: any) => option.name}\r\n                  getOptionSelected={(option) => option.id == values.skin_irregular}\r\n                  onChange={(event: any, newValue: any) => {\r\n                    setFieldValue('skin_irregular', newValue?.id || '');\r\n                    setFieldValue('skin_irregular_sub', '');\r\n                  }}\r\n                  onBlur={handleBlur}\r\n                  renderInput={(params: any) => (\r\n                    <TextField\r\n                      {...params}\r\n                      label='Skin Irregularites'\r\n                      variant='outlined'\r\n                      error={Boolean(touched.skin_irregular && errors.skin_irregular)}\r\n                      helperText={touched.skin_irregular && errors.skin_irregular}\r\n                      inputProps={{\r\n                        ...params.inputProps,\r\n                      }}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              <Grid item xs={6}>\r\n                <Autocomplete\r\n                  options={getSubSkinIrregular(values.skin_irregular)}\r\n                  value={getSubSkinIrregular(values.skin_irregular).find((data: any) => data.id == values.skin_irregular_sub) || NoOption}\r\n                  getOptionLabel={(option: any) => option.name}\r\n                  getOptionSelected={(option) => option.id == values.skin_irregular_sub}\r\n                  onChange={(event: any, newValue: any) => {\r\n                    setFieldValue('skin_irregular_sub', newValue?.id || '');\r\n                  }}\r\n                  onBlur={handleBlur}\r\n                  renderInput={(params: any) => (\r\n                    <TextField\r\n                      {...params}\r\n                      label='Sub Skin Irregularites'\r\n                      variant='outlined'\r\n                      error={Boolean(touched.skin_irregular_sub && errors.skin_irregular_sub)}\r\n                      helperText={touched.skin_irregular_sub && errors.skin_irregular_sub}\r\n                      inputProps={{\r\n                        ...params.inputProps,\r\n                      }}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              <Grid className={classes.actionGrid} item xs={12}>\r\n                <Button onClick={() => onClose()} variant='outlined' color='secondary'>\r\n                  Cancel\r\n                </Button>\r\n                <Button\r\n                  className={clsx(classes.themeButton, classes.marginLeft1)}\r\n                  onClick={() => submitForm()}\r\n                  disabled={isSubmitting}\r\n                  variant='outlined'\r\n                >\r\n                  {isSubmitting ? (\r\n                    <CircularProgress size={24} style={{ color: 'white' }} />\r\n                  ) : 'Update'}\r\n                </Button>\r\n              </Grid>\r\n            </Grid>\r\n          </>\r\n        )}\r\n      </Formik>\r\n    </Card>\r\n  );\r\n};\r\n\r\nconst ViewCard = (props: any) => {\r\n  const classes = useStyles();\r\n\r\n  const { data } = props;\r\n  const [formData, setFormData] = useState<any>({});\r\n  useEffect(() => {\r\n    setFormData(data)\r\n  }, [props]);\r\n\r\n  return (\r\n    <Card>\r\n      <Table>\r\n        <TableBody>\r\n          <TableRow >\r\n            <TableCell>Skin Type</TableCell>\r\n            <TableCell>{getDropValues(SkinTypeDrop, formData?.skin_type)}</TableCell>\r\n          </TableRow>\r\n          <TableRow >\r\n            <TableCell>Current Climate</TableCell>\r\n            <TableCell>{getDropValues(CurrentClimateDrop, formData?.current_climate)}</TableCell>\r\n          </TableRow>\r\n          <TableRow >\r\n            <TableCell>Skin Irregularities</TableCell>\r\n            <TableCell>{getDropValues(SkinIrregularDrop, formData?.skin_irregular)}</TableCell>\r\n          </TableRow>\r\n          <TableRow >\r\n            <TableCell>Sub Skin Irregularities</TableCell>\r\n            <TableCell>{getDropValues(getSubSkinIrregular(formData?.skin_irregular), formData?.skin_irregular_sub)}</TableCell>\r\n          </TableRow>\r\n          <TableRow >\r\n            <TableCell>Skin Texture</TableCell>\r\n            <TableCell>{getDropValues(SkinTextureDrop, formData?.skin_texture)}</TableCell>\r\n          </TableRow>\r\n        </TableBody>\r\n      </Table>\r\n    </Card>\r\n  );\r\n};\r\n\r\n\r\nexport default AppNutrition;\r\n"]},"metadata":{},"sourceType":"module"}