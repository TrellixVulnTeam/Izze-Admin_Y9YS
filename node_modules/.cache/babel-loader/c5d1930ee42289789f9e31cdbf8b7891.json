{"ast":null,"code":"import*as Yup from'yup';export var MealTime={isEdit:true,meal_time:'',order:0,recipe:[]};export var initialFormValues={diet_type:'',calories:'',meal_days:Array(10).fill(null).map(function(d,i){return{day:i+1,meals:[]};})};export var validation=Yup.object().shape({diet_type:Yup.string().trim().required('Diet type is required'),calories:Yup.number().required('Calories is required'),meal_days:Yup.array().of(Yup.object().shape({day:Yup.number().required('Day is required'),meals:Yup.array().of(Yup.object().shape({recipe:Yup.array().of(Yup.object().shape({id:Yup.string().trim().required('Recipe is Required')})).min(1,'Recipe is Required'),meal_time:Yup.string().required('Name is required')}))})).min(10,'Field is Required')});","map":{"version":3,"sources":["D:/Pyramidion/WebApp/Izze-Admin/src/pages/MealPlan/FormikValues.tsx"],"names":["Yup","MealTime","isEdit","meal_time","order","recipe","initialFormValues","diet_type","calories","meal_days","Array","fill","map","d","i","day","meals","validation","object","shape","string","trim","required","number","array","of","id","min"],"mappings":"AAAA,MAAO,GAAKA,CAAAA,GAAZ,KAAqB,KAArB,CA0BA,MAAO,IAAMC,CAAAA,QAAqB,CAAG,CACnCC,MAAM,CAAE,IAD2B,CAEnCC,SAAS,CAAE,EAFwB,CAGnCC,KAAK,CAAE,CAH4B,CAInCC,MAAM,CAAE,EAJ2B,CAA9B,CAOP,MAAO,IAAMC,CAAAA,iBAA2B,CAAG,CACzCC,SAAS,CAAE,EAD8B,CAEzCC,QAAQ,CAAE,EAF+B,CAGzCC,SAAS,CAAEC,KAAK,CAAC,EAAD,CAAL,CAAUC,IAAV,CAAe,IAAf,EAAqBC,GAArB,CAAyB,SAACC,CAAD,CAAIC,CAAJ,QAAW,CAAEC,GAAG,CAAED,CAAC,CAAG,CAAX,CAAcE,KAAK,CAAE,EAArB,CAAX,EAAzB,CAH8B,CAApC,CAMP,MAAO,IAAMC,CAAAA,UAAU,CAAGjB,GAAG,CAACkB,MAAJ,GAAaC,KAAb,CAAmB,CAC3CZ,SAAS,CAAEP,GAAG,CAACoB,MAAJ,GAAaC,IAAb,GAAoBC,QAApB,CAA6B,uBAA7B,CADgC,CAE3Cd,QAAQ,CAAER,GAAG,CAACuB,MAAJ,GAAaD,QAAb,CAAsB,sBAAtB,CAFiC,CAG3Cb,SAAS,CAAET,GAAG,CAACwB,KAAJ,GAAYC,EAAZ,CACTzB,GAAG,CAACkB,MAAJ,GAAaC,KAAb,CAAmB,CACjBJ,GAAG,CAAEf,GAAG,CAACuB,MAAJ,GAAaD,QAAb,CAAsB,iBAAtB,CADY,CAEjBN,KAAK,CAAEhB,GAAG,CAACwB,KAAJ,GAAYC,EAAZ,CACLzB,GAAG,CAACkB,MAAJ,GAAaC,KAAb,CAAmB,CACjBd,MAAM,CAAEL,GAAG,CAACwB,KAAJ,GAAYC,EAAZ,CACNzB,GAAG,CAACkB,MAAJ,GAAaC,KAAb,CAAmB,CACjBO,EAAE,CAAE1B,GAAG,CAACoB,MAAJ,GAAaC,IAAb,GAAoBC,QAApB,CAA6B,oBAA7B,CADa,CAAnB,CADM,EAGFK,GAHE,CAGE,CAHF,CAGK,oBAHL,CADS,CAKjBxB,SAAS,CAAEH,GAAG,CAACoB,MAAJ,GAAaE,QAAb,CAAsB,kBAAtB,CALM,CAAnB,CADK,CAFU,CAAnB,CADS,EAYLK,GAZK,CAYD,EAZC,CAYG,mBAZH,CAHgC,CAAnB,CAAnB","sourcesContent":["import * as Yup from 'yup';\r\n\r\ninterface IntRecipe {\r\n  id: string\r\n}\r\n\r\ninterface IntMealTime {\r\n  isEdit: Boolean,\r\n  meal_time: string,\r\n  order: number,\r\n  recipe: IntRecipe[],\r\n}\r\n\r\ninterface IntMealDays {\r\n  day: number,\r\n  meals: any\r\n}\r\n\r\ninterface MealPlan {\r\n  diet_type: string,\r\n  calories: string,\r\n  meal_days: IntMealDays[]\r\n}\r\n\r\n\r\n\r\nexport const MealTime: IntMealTime = {\r\n  isEdit: true,\r\n  meal_time: '',\r\n  order: 0,\r\n  recipe: []\r\n}\r\n\r\nexport const initialFormValues: MealPlan = {\r\n  diet_type: '',\r\n  calories: '',\r\n  meal_days: Array(10).fill(null).map((d, i) => ({ day: i + 1, meals: [] }))\r\n};\r\n\r\nexport const validation = Yup.object().shape({\r\n  diet_type: Yup.string().trim().required('Diet type is required'),\r\n  calories: Yup.number().required('Calories is required'),\r\n  meal_days: Yup.array().of(\r\n    Yup.object().shape({\r\n      day: Yup.number().required('Day is required'),\r\n      meals: Yup.array().of(\r\n        Yup.object().shape({\r\n          recipe: Yup.array().of(\r\n            Yup.object().shape({\r\n              id: Yup.string().trim().required('Recipe is Required'),\r\n            })).min(1, 'Recipe is Required'),\r\n          meal_time: Yup.string().required('Name is required'),\r\n        })\r\n      )\r\n    })).min(10, 'Field is Required')\r\n})\r\n"]},"metadata":{},"sourceType":"module"}