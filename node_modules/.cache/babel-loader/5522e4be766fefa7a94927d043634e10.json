{"ast":null,"code":"import { Mark, mergeAttributes, markInputRule, markPasteRule } from '@tiptap/core';\nconst inputRegex = /(?:^|\\s)((?:~~)((?:[^~]+))(?:~~))$/gm;\nconst pasteRegex = /(?:^|\\s)((?:~~)((?:[^~]+))(?:~~))/gm;\nconst Strike = Mark.create({\n  name: 'strike',\n  defaultOptions: {\n    HTMLAttributes: {}\n  },\n\n  parseHTML() {\n    return [{\n      tag: 's'\n    }, {\n      tag: 'del'\n    }, {\n      tag: 'strike'\n    }, {\n      style: 'text-decoration',\n      consuming: false,\n      getAttrs: style => style.includes('line-through') ? {} : false\n    }];\n  },\n\n  renderHTML({\n    HTMLAttributes\n  }) {\n    return ['s', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n\n  addCommands() {\n    return {\n      setStrike: () => ({\n        commands\n      }) => {\n        return commands.setMark('strike');\n      },\n      toggleStrike: () => ({\n        commands\n      }) => {\n        return commands.toggleMark('strike');\n      },\n      unsetStrike: () => ({\n        commands\n      }) => {\n        return commands.unsetMark('strike');\n      }\n    };\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Shift-x': () => this.editor.commands.toggleStrike()\n    };\n  },\n\n  addInputRules() {\n    return [markInputRule(inputRegex, this.type)];\n  },\n\n  addPasteRules() {\n    return [markPasteRule(pasteRegex, this.type)];\n  }\n\n});\nexport default Strike;\nexport { Strike, inputRegex, pasteRegex };","map":null,"metadata":{},"sourceType":"module"}