{"ast":null,"code":"import _objectWithoutProperties from \"D:/Pyramidion/WebApp/Izze-Admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _toConsumableArray from \"D:/Pyramidion/WebApp/Izze-Admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"D:/Pyramidion/WebApp/Izze-Admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _createClass from \"D:/Pyramidion/WebApp/Izze-Admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _slicedToArray from \"D:/Pyramidion/WebApp/Izze-Admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"D:/Pyramidion/WebApp/Izze-Admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _inherits from \"D:/Pyramidion/WebApp/Izze-Admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"D:/Pyramidion/WebApp/Izze-Admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Editor as Editor$1, NodeView } from '@tiptap/core';\nexport * from '@tiptap/core';\nimport React, { useRef, useEffect, useState, createContext, useContext } from 'react';\nimport { BubbleMenuPlugin, BubbleMenuPluginKey } from '@tiptap/extension-bubble-menu';\nimport { FloatingMenuPlugin, FloatingMenuPluginKey } from '@tiptap/extension-floating-menu';\nimport ReactDOM from 'react-dom';\n\nvar BubbleMenu = function BubbleMenu(props) {\n  var element = useRef(null);\n  useEffect(function () {\n    var editor = props.editor,\n        tippyOptions = props.tippyOptions;\n    editor.registerPlugin(BubbleMenuPlugin({\n      editor: editor,\n      element: element.current,\n      tippyOptions: tippyOptions\n    }));\n    return function () {\n      editor.unregisterPlugin(BubbleMenuPluginKey);\n    };\n  }, []);\n  return React.createElement(\"div\", {\n    ref: element,\n    className: props.className,\n    style: {\n      visibility: 'hidden'\n    }\n  }, props.children);\n};\n\nvar Editor = /*#__PURE__*/function (_Editor$) {\n  _inherits(Editor, _Editor$);\n\n  var _super = _createSuper(Editor);\n\n  function Editor() {\n    var _this;\n\n    _classCallCheck(this, Editor);\n\n    _this = _super.apply(this, arguments);\n    _this.contentComponent = null;\n    return _this;\n  }\n\n  return Editor;\n}(Editor$1);\n\nvar FloatingMenu = function FloatingMenu(props) {\n  var element = useRef(null);\n  useEffect(function () {\n    var editor = props.editor,\n        tippyOptions = props.tippyOptions;\n    editor.registerPlugin(FloatingMenuPlugin({\n      editor: editor,\n      element: element.current,\n      tippyOptions: tippyOptions\n    }));\n    return function () {\n      editor.unregisterPlugin(FloatingMenuPluginKey);\n    };\n  }, []);\n  return React.createElement(\"div\", {\n    ref: element,\n    className: props.className,\n    style: {\n      visibility: 'hidden'\n    }\n  }, props.children);\n};\n\nfunction useForceUpdate() {\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      setValue = _useState2[1];\n\n  return function () {\n    return setValue(function (value) {\n      return value + 1;\n    });\n  };\n}\n\nvar useEditor = function useEditor() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var deps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      editor = _useState4[0],\n      setEditor = _useState4[1];\n\n  var forceUpdate = useForceUpdate();\n  useEffect(function () {\n    var instance = new Editor(options);\n    setEditor(instance);\n    instance.on('transaction', forceUpdate);\n    return function () {\n      instance.destroy();\n    };\n  }, deps);\n  return editor;\n};\n\nfunction isClassComponent(Component) {\n  return !!(typeof Component === 'function' && Component.prototype && Component.prototype.isReactComponent);\n}\n\nvar ReactRenderer = /*#__PURE__*/function () {\n  function ReactRenderer(component, _ref) {\n    var editor = _ref.editor,\n        _ref$props = _ref.props,\n        props = _ref$props === void 0 ? {} : _ref$props,\n        _ref$as = _ref.as,\n        as = _ref$as === void 0 ? 'div' : _ref$as;\n\n    _classCallCheck(this, ReactRenderer);\n\n    this.ref = null;\n    this.id = Math.floor(Math.random() * 0xFFFFFFFF).toString();\n    this.component = component;\n    this.editor = editor;\n    this.props = props;\n    this.element = document.createElement(as);\n    this.element.classList.add('react-renderer');\n    this.render();\n  }\n\n  _createClass(ReactRenderer, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _a;\n\n      var Component = this.component;\n      var props = this.props;\n\n      if (isClassComponent(Component)) {\n        props.ref = function (ref) {\n          _this2.ref = ref;\n        };\n      }\n\n      this.reactElement = React.createElement(Component, _objectSpread({}, props));\n\n      if ((_a = this.editor) === null || _a === void 0 ? void 0 : _a.contentComponent) {\n        this.editor.contentComponent.setState({\n          renderers: this.editor.contentComponent.state.renderers.set(this.id, this)\n        });\n      }\n    }\n  }, {\n    key: \"updateProps\",\n    value: function updateProps() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.props = _objectSpread(_objectSpread({}, this.props), props);\n      this.render();\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      var _a;\n\n      if ((_a = this.editor) === null || _a === void 0 ? void 0 : _a.contentComponent) {\n        var renderers = this.editor.contentComponent.state.renderers;\n        renderers.delete(this.id);\n        this.editor.contentComponent.setState({\n          renderers: renderers\n        });\n      }\n    }\n  }]);\n\n  return ReactRenderer;\n}();\n\nvar ReactNodeViewContext = createContext({\n  onDragStart: undefined\n});\n\nvar useReactNodeView = function useReactNodeView() {\n  return useContext(ReactNodeViewContext);\n};\n\nvar ReactNodeView = /*#__PURE__*/function (_NodeView) {\n  _inherits(ReactNodeView, _NodeView);\n\n  var _super2 = _createSuper(ReactNodeView);\n\n  function ReactNodeView() {\n    _classCallCheck(this, ReactNodeView);\n\n    return _super2.apply(this, arguments);\n  }\n\n  _createClass(ReactNodeView, [{\n    key: \"mount\",\n    value: function mount() {\n      var _this3 = this;\n\n      var props = {\n        editor: this.editor,\n        node: this.node,\n        decorations: this.decorations,\n        selected: false,\n        extension: this.extension,\n        getPos: function getPos() {\n          return _this3.getPos();\n        },\n        updateAttributes: function updateAttributes() {\n          var attributes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n          return _this3.updateAttributes(attributes);\n        },\n        deleteNode: function deleteNode() {\n          return _this3.deleteNode();\n        }\n      };\n\n      if (!this.component.displayName) {\n        var capitalizeFirstChar = function capitalizeFirstChar(string) {\n          return string.charAt(0).toUpperCase() + string.substring(1);\n        };\n\n        this.component.displayName = capitalizeFirstChar(this.extension.name);\n      }\n\n      var ReactNodeViewProvider = function ReactNodeViewProvider(componentProps) {\n        var onDragStart = _this3.onDragStart.bind(_this3);\n\n        var Component = _this3.component;\n        return React.createElement(ReactNodeViewContext.Provider, {\n          value: {\n            onDragStart: onDragStart\n          }\n        }, React.createElement(Component, _objectSpread({}, componentProps)));\n      };\n\n      ReactNodeViewProvider.displayName = 'ReactNodeView';\n      this.contentDOMElement = this.node.isLeaf ? null : document.createElement(this.node.isInline ? 'span' : 'div');\n\n      if (this.contentDOMElement) {\n        // For some reason the whiteSpace prop is not inherited properly in Chrome and Safari\n        // With this fix it seems to work fine\n        // See: https://github.com/ueberdosis/tiptap/issues/1197\n        this.contentDOMElement.style.whiteSpace = 'inherit';\n      }\n\n      this.renderer = new ReactRenderer(ReactNodeViewProvider, {\n        editor: this.editor,\n        props: props,\n        as: this.node.isInline ? 'span' : 'div'\n      });\n    }\n  }, {\n    key: \"dom\",\n    get: function get() {\n      var _a;\n\n      if (this.renderer.element.firstElementChild && !((_a = this.renderer.element.firstElementChild) === null || _a === void 0 ? void 0 : _a.hasAttribute('data-node-view-wrapper'))) {\n        throw Error('Please use the NodeViewWrapper component for your node view.');\n      }\n\n      return this.renderer.element;\n    }\n  }, {\n    key: \"contentDOM\",\n    get: function get() {\n      if (this.node.isLeaf) {\n        return null;\n      }\n\n      this.maybeMoveContentDOM();\n      return this.contentDOMElement;\n    }\n  }, {\n    key: \"maybeMoveContentDOM\",\n    value: function maybeMoveContentDOM() {\n      var contentElement = this.dom.querySelector('[data-node-view-content]');\n\n      if (this.contentDOMElement && contentElement && !contentElement.contains(this.contentDOMElement)) {\n        contentElement.appendChild(this.contentDOMElement);\n      }\n    }\n  }, {\n    key: \"update\",\n    value: function update(node, decorations) {\n      if (typeof this.options.update === 'function') {\n        return this.options.update(node, decorations);\n      }\n\n      if (node.type !== this.node.type) {\n        return false;\n      }\n\n      if (node === this.node && this.decorations === decorations) {\n        return true;\n      }\n\n      this.node = node;\n      this.decorations = decorations;\n      this.renderer.updateProps({\n        node: node,\n        decorations: decorations\n      });\n      this.maybeMoveContentDOM();\n      return true;\n    }\n  }, {\n    key: \"selectNode\",\n    value: function selectNode() {\n      this.renderer.updateProps({\n        selected: true\n      });\n    }\n  }, {\n    key: \"deselectNode\",\n    value: function deselectNode() {\n      this.renderer.updateProps({\n        selected: false\n      });\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.renderer.destroy();\n      this.contentDOMElement = null;\n    }\n  }]);\n\n  return ReactNodeView;\n}(NodeView);\n\nfunction ReactNodeViewRenderer(component, options) {\n  return function (props) {\n    // try to get the parent component\n    // this is important for vue devtools to show the component hierarchy correctly\n    // maybe it’s `undefined` because <editor-content> isn’t rendered yet\n    if (!props.editor.contentComponent) {\n      return {};\n    }\n\n    return new ReactNodeView(component, props, options);\n  };\n}\n\nvar Portals = function Portals(_ref2) {\n  var renderers = _ref2.renderers;\n  return React.createElement(React.Fragment, null, Array.from(renderers).map(function (_ref3) {\n    var _ref4 = _slicedToArray(_ref3, 2),\n        key = _ref4[0],\n        renderer = _ref4[1];\n\n    return ReactDOM.createPortal(renderer.reactElement, renderer.element, key);\n  }));\n};\n\nvar PureEditorContent = /*#__PURE__*/function (_React$Component) {\n  _inherits(PureEditorContent, _React$Component);\n\n  var _super3 = _createSuper(PureEditorContent);\n\n  function PureEditorContent(props) {\n    var _this4;\n\n    _classCallCheck(this, PureEditorContent);\n\n    _this4 = _super3.call(this, props);\n    _this4.editorContentRef = React.createRef();\n    _this4.state = {\n      renderers: new Map()\n    };\n    return _this4;\n  }\n\n  _createClass(PureEditorContent, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.init();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.init();\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      var editor = this.props.editor;\n\n      if (editor && editor.options.element) {\n        if (editor.contentComponent) {\n          return;\n        }\n\n        var element = this.editorContentRef.current;\n        element.append.apply(element, _toConsumableArray(editor.options.element.childNodes));\n        editor.setOptions({\n          element: element\n        });\n        editor.contentComponent = this; // TODO: alternative to setTimeout?\n\n        setTimeout(function () {\n          return editor.createNodeViews();\n        }, 0);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var editor = this.props.editor;\n\n      if (!editor) {\n        return;\n      }\n\n      if (!editor.isDestroyed) {\n        editor.view.setProps({\n          nodeViews: {}\n        });\n      }\n\n      editor.contentComponent = null;\n\n      if (!editor.options.element.firstChild) {\n        return;\n      }\n\n      var newElement = document.createElement('div');\n      newElement.append.apply(newElement, _toConsumableArray(editor.options.element.childNodes));\n      editor.setOptions({\n        element: newElement\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          editor = _this$props.editor,\n          rest = _objectWithoutProperties(_this$props, [\"editor\"]);\n\n      return React.createElement(React.Fragment, null, React.createElement(\"div\", _objectSpread({\n        ref: this.editorContentRef\n      }, rest)), React.createElement(Portals, {\n        renderers: this.state.renderers\n      }));\n    }\n  }]);\n\n  return PureEditorContent;\n}(React.Component);\n\nvar EditorContent = React.memo(PureEditorContent);\n\nvar NodeViewWrapper = function NodeViewWrapper(props) {\n  var _useReactNodeView = useReactNodeView(),\n      onDragStart = _useReactNodeView.onDragStart;\n\n  var Tag = props.as || 'div';\n  return React.createElement(Tag, _objectSpread(_objectSpread({}, props), {}, {\n    \"data-node-view-wrapper\": \"\",\n    onDragStart: onDragStart,\n    style: _objectSpread(_objectSpread({}, props.style), {}, {\n      whiteSpace: 'normal'\n    })\n  }));\n};\n\nvar NodeViewContent = function NodeViewContent(props) {\n  var Tag = props.as || 'div';\n  return React.createElement(Tag, _objectSpread(_objectSpread({}, props), {}, {\n    \"data-node-view-content\": \"\",\n    style: _objectSpread(_objectSpread({}, props.style), {}, {\n      whiteSpace: 'pre-wrap'\n    })\n  }));\n};\n\nexport { BubbleMenu, Editor, EditorContent, FloatingMenu, NodeViewContent, NodeViewWrapper, PureEditorContent, ReactNodeViewRenderer, ReactRenderer, useEditor };","map":null,"metadata":{},"sourceType":"module"}