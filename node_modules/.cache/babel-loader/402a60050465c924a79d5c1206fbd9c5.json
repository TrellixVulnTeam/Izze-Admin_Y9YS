{"ast":null,"code":"import { Node, mergeAttributes, nodeInputRule } from '@tiptap/core';\nimport { TextSelection } from 'prosemirror-state';\nvar HorizontalRule = Node.create({\n  name: 'horizontalRule',\n  defaultOptions: {\n    HTMLAttributes: {}\n  },\n  group: 'block',\n  parseHTML: function parseHTML() {\n    return [{\n      tag: 'hr'\n    }];\n  },\n  renderHTML: function renderHTML(_ref) {\n    var HTMLAttributes = _ref.HTMLAttributes;\n    return ['hr', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes)];\n  },\n  addCommands: function addCommands() {\n    var _this = this;\n\n    return {\n      setHorizontalRule: function setHorizontalRule() {\n        return function (_ref2) {\n          var chain = _ref2.chain;\n          return chain().insertContent({\n            type: _this.name\n          }).command(function (_ref3) {\n            var tr = _ref3.tr,\n                dispatch = _ref3.dispatch;\n\n            var _a;\n\n            if (dispatch) {\n              var _tr$selection$$from = tr.selection.$from,\n                  parent = _tr$selection$$from.parent,\n                  pos = _tr$selection$$from.pos;\n              var posAfter = pos + 1;\n              var nodeAfter = tr.doc.nodeAt(posAfter); // end of document\n\n              if (!nodeAfter) {\n                var node = (_a = parent.type.contentMatch.defaultType) === null || _a === void 0 ? void 0 : _a.create();\n\n                if (node) {\n                  tr.insert(posAfter, node);\n                  tr.setSelection(TextSelection.create(tr.doc, posAfter));\n                }\n              }\n\n              tr.scrollIntoView();\n            }\n\n            return true;\n          }).run();\n        };\n      }\n    };\n  },\n  addInputRules: function addInputRules() {\n    return [nodeInputRule(/^(?:---|â€”-|___\\s|\\*\\*\\*\\s)$/, this.type)];\n  }\n});\nexport default HorizontalRule;\nexport { HorizontalRule };","map":null,"metadata":{},"sourceType":"module"}