{"ast":null,"code":"var _jsxFileName = \"D:\\\\Pyramidion\\\\WebApp\\\\Izze-Admin\\\\src\\\\hook\\\\useConfModel.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport Slide from '@material-ui/core/Slide';\nimport { createStyles, makeStyles } from \"@material-ui/core/styles\";\nimport React, { useContext, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => createStyles({\n  dialogRoot: {\n    'z-index': '3000 !important'\n  },\n  themeButton: {\n    color: theme.palette.white,\n    backgroundColor: theme.palette.green.main,\n    '&:hover': {\n      backgroundColor: theme.palette.green.dark\n    }\n  },\n  lColor: {\n    color: 'white'\n  }\n}));\nexport const confModelContext = /*#__PURE__*/React.createContext(null);\nexport const ConfModelProvider = props => {\n  _s();\n\n  const {\n    children\n  } = props;\n  const [model, setModel] = useState(false);\n  const [successFunction, setSuccessFunction] = useState(() => () => new Function());\n  const [confirmText, setConfirmText] = useState('');\n  const [confirmButtonText, setConfirmButtonText] = useState('');\n  const [loading, setLoading] = useState(false);\n  const classes = useStyles();\n\n  const openModel = (successFunction, confirmText = 'Are you sure want to Delete?', confirmButtonText = 'Delete') => {\n    setModel(true);\n    setSuccessFunction(() => () => successFunction);\n    setConfirmText(confirmText);\n    setConfirmButtonText(confirmButtonText);\n  };\n\n  const closeModel = () => {\n    setModel(false);\n  };\n\n  const onDelete = () => {\n    successFunction()();\n  };\n\n  const ProviderValue = {\n    openModel: openModel,\n    closeModel: closeModel,\n    setLoading\n  };\n  return /*#__PURE__*/_jsxDEV(confModelContext.Provider, {\n    value: ProviderValue,\n    children: [children, /*#__PURE__*/_jsxDEV(Dialog, {\n      open: model,\n      TransitionComponent: Transition,\n      keepMounted: true,\n      onClose: closeModel,\n      maxWidth: \"sm\",\n      fullWidth: true,\n      className: classes.dialogRoot,\n      \"aria-labelledby\": \"alert-dialog-title\",\n      children: [/*#__PURE__*/_jsxDEV(DialogContent, {\n        children: /*#__PURE__*/_jsxDEV(DialogContentText, {\n          id: \"alert-dialog-description\",\n          children: confirmText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outlined\",\n          color: \"secondary\",\n          onClick: closeModel,\n          disabled: loading,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          className: classes.themeButton,\n          variant: \"outlined\",\n          onClick: () => onDelete(),\n          disabled: loading,\n          autoFocus: true,\n          children: loading ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n            size: 24,\n            className: classes.lColor\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 24\n          }, this) : confirmButtonText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ConfModelProvider, \"pT/ppVkt/P7tsGp8S6Gbi+K07Xw=\", false, function () {\n  return [useStyles];\n});\n\n_c = ConfModelProvider;\nconst Transition = /*#__PURE__*/React.forwardRef(_c2 = function Transition(props, ref) {\n  return /*#__PURE__*/_jsxDEV(Slide, {\n    direction: \"up\",\n    ref: ref,\n    ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 10\n  }, this);\n});\n_c3 = Transition;\n\nconst useConfModel = () => {\n  _s2();\n\n  return useContext(confModelContext);\n};\n\n_s2(useConfModel, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport default useConfModel;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"ConfModelProvider\");\n$RefreshReg$(_c2, \"Transition$React.forwardRef\");\n$RefreshReg$(_c3, \"Transition\");","map":{"version":3,"sources":["D:/Pyramidion/WebApp/Izze-Admin/src/hook/useConfModel.tsx"],"names":["Button","CircularProgress","Dialog","DialogActions","DialogContent","DialogContentText","Slide","createStyles","makeStyles","React","useContext","useState","useStyles","theme","dialogRoot","themeButton","color","palette","white","backgroundColor","green","main","dark","lColor","confModelContext","createContext","ConfModelProvider","props","children","model","setModel","successFunction","setSuccessFunction","Function","confirmText","setConfirmText","confirmButtonText","setConfirmButtonText","loading","setLoading","classes","openModel","closeModel","onDelete","ProviderValue","Transition","forwardRef","ref","useConfModel"],"mappings":"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","sourcesContent":["import Button from '@material-ui/core/Button';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\r\nimport { TransitionProps } from '@material-ui/core/transitions';\r\nimport React, { useContext, useState } from 'react';\r\n\r\nconst useStyles = makeStyles((theme: any) =>\r\n  createStyles({\r\n    dialogRoot: {\r\n      'z-index': '3000 !important',\r\n    },\r\n    themeButton: {\r\n      color: theme.palette.white,\r\n      backgroundColor: theme.palette.green.main,\r\n      '&:hover': {\r\n        backgroundColor: theme.palette.green.dark\r\n      }\r\n    },\r\n    lColor: {\r\n      color: 'white'\r\n    }\r\n  })\r\n);\r\n\r\n\r\nexport const confModelContext = React.createContext<any>(null);\r\n\r\nexport const ConfModelProvider = (props: any) => {\r\n  const { children } = props\r\n  const [model, setModel] = useState(false)\r\n  const [successFunction, setSuccessFunction] = useState(() => () => new Function);\r\n  const [confirmText, setConfirmText] = useState('');\r\n  const [confirmButtonText, setConfirmButtonText] = useState('');\r\n  const [loading, setLoading] = useState(false)\r\n\r\n  const classes = useStyles()\r\n\r\n  const openModel = (successFunction: any, confirmText = 'Are you sure want to Delete?', confirmButtonText = 'Delete') => {\r\n    setModel(true)\r\n    setSuccessFunction(() => () => successFunction)\r\n    setConfirmText(confirmText)\r\n    setConfirmButtonText(confirmButtonText)\r\n  }\r\n\r\n  const closeModel = () => {\r\n    setModel(false)\r\n  }\r\n\r\n  const onDelete = () => {\r\n    successFunction()()\r\n  }\r\n\r\n  const ProviderValue = {\r\n    openModel: openModel,\r\n    closeModel: closeModel,\r\n    setLoading\r\n  }\r\n  return (\r\n\r\n    <confModelContext.Provider value={ProviderValue} >\r\n      {children}\r\n      <Dialog\r\n        open={model}\r\n        TransitionComponent={Transition}\r\n        keepMounted\r\n        onClose={closeModel}\r\n        maxWidth=\"sm\"\r\n        fullWidth\r\n        className={classes.dialogRoot}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n      >\r\n        <DialogContent>\r\n          <DialogContentText id=\"alert-dialog-description\">\r\n            {confirmText}\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button variant=\"outlined\" color=\"secondary\" onClick={closeModel} disabled={loading} >\r\n            Cancel\r\n          </Button>\r\n          <Button className={classes.themeButton} variant=\"outlined\" onClick={() => onDelete()} disabled={loading} autoFocus>\r\n            {loading ? <CircularProgress size={24} className={classes.lColor} /> : confirmButtonText}\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </confModelContext.Provider>\r\n  )\r\n\r\n}\r\n\r\nconst Transition = React.forwardRef(function Transition(\r\n  props: TransitionProps & { children?: React.ReactElement<any, any> },\r\n  ref: React.Ref<unknown>,\r\n) {\r\n  return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\n\r\nconst useConfModel = () => {\r\n  return useContext(confModelContext);\r\n};\r\n\r\nexport default useConfModel;\r\n"]},"metadata":{},"sourceType":"module"}