{"ast":null,"code":"var _jsxFileName = \"D:\\\\Pyramidion\\\\WebApp\\\\Izze-Admin\\\\src\\\\pages\\\\AdminProfileDetails\\\\AdminProfileDetails.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React from 'react';\nimport { Grid, Button, Paper, makeStyles, Avatar, IconButton, Dialog, DialogActions, DialogContent, TextField, CircularProgress, List, ListItem, ListItemAvatar, ListItemText, Typography } from '@material-ui/core';\nimport Page from '../../components/Page/Page';\nimport useService from '../../hook/useService';\nimport useSnackbar from '../../hook/useSnackbar';\nimport EditIcon from '@material-ui/icons/Edit';\nimport DialogTitle from '../../components/DialogTitlle/DialogTitle';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst useStyle = makeStyles(theme => ({\n  root: {\n    width: theme.breakpoints.values.lg,\n    height: '100%',\n    maxWidth: '100%',\n    margin: '0 auto',\n    padding: theme.spacing(3)\n  },\n  paperStyle: {\n    width: '100%',\n    height: '85vh'\n  },\n  themeButton: {\n    color: theme.palette.white,\n    backgroundColor: theme.palette.green.main,\n    '&:hover': {\n      backgroundColor: theme.palette.green.dark\n    }\n  }\n}));\n\nconst AdminProfileDetails = () => {\n  _s();\n\n  const classes = useStyle();\n  const {\n    Post\n  } = useService();\n  const Snackbar = useSnackbar();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.root,\n    children: [/*#__PURE__*/_jsxDEV(Page, {\n      title: \"Admin Profile\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 2,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 2\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 8,\n        children: /*#__PURE__*/_jsxDEV(Paper, {\n          className: classes.paperStyle,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(Avatar, {\n              style: {\n                width: '150px',\n                height: '150px'\n              },\n              variant: \"square\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(List, {\n              children: /*#__PURE__*/_jsxDEV(ListItem, {\n                children: [/*#__PURE__*/_jsxDEV(ListItemAvatar, {\n                  children: /*#__PURE__*/_jsxDEV(Typography, {\n                    children: \"Header\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 50,\n                    columnNumber: 49\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 50,\n                  columnNumber: 33\n                }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n                  primary: \"Text\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 51,\n                  columnNumber: 33\n                }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n                  children: /*#__PURE__*/_jsxDEV(EditIcon, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 52,\n                    columnNumber: 45\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 52,\n                  columnNumber: 33\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 49,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 2\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AdminProfileDetails, \"YmxkU6nr5zeJ22Xlso5gjkFu4rA=\", false, function () {\n  return [useStyle, useService, useSnackbar];\n});\n\n_c = AdminProfileDetails;\nconst initialValues = {\n  password: '',\n  confirmPassword: ''\n};\nexport const ChangePassword = () => {\n  _s2();\n\n  const classes = useStyle();\n  const formikRef = React.useRef(null);\n  const [isOpen, setIsOpen] = React.useState(false);\n  const {\n    Post\n  } = useService();\n  const Snackbar = useSnackbar();\n  const [initialFormValues, setInitialFormValues] = React.useState({ ...initialValues\n  });\n\n  const changePasswordModel = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const onClose = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const onSubmit = (value, helper) => {\n    const {\n      confirmPassword\n    } = value;\n    let postData = {\n      password: confirmPassword\n    };\n    changePasswordData(postData, helper);\n  };\n\n  const changePasswordData = (data, {\n    setSubmitting,\n    resetForm\n  }) => {\n    Post('app/updateAdminPassword', data).then(res => {\n      Snackbar.show(res.message, 'success');\n      setSubmitting(false);\n      resetForm();\n      onClose();\n    }).catch(err => {\n      Snackbar.show(err.message, 'error');\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      onClick: changePasswordModel,\n      className: classes.themeButton,\n      children: \"ChangePassword\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      open: isOpen,\n      disableBackdropClick: true,\n      disableEscapeKeyDown: true,\n      fullWidth: true,\n      maxWidth: \"sm\",\n      \"aria-labelledby\": \"dialog-title\",\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        id: \"dialog-title\",\n        onClose: onClose,\n        children: \"Change Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Formik, {\n        innerRef: formikRef,\n        enableReinitialize: true,\n        initialValues: initialFormValues,\n        validationSchema: Yup.object().shape({\n          password: Yup.string().required('Password is required'),\n          confirmPassword: Yup.string().oneOf([Yup.ref('password'), null], 'Password must be same').required('Confirm password is required')\n        }),\n        onSubmit: onSubmit,\n        children: ({\n          values,\n          errors,\n          touched,\n          handleChange,\n          handleBlur,\n          setFieldValue,\n          submitForm,\n          isSubmitting\n        }) => /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(DialogContent, {\n            dividers: true,\n            children: /*#__PURE__*/_jsxDEV(Grid, {\n              container: true,\n              spacing: 2,\n              children: [/*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 12,\n                children: /*#__PURE__*/_jsxDEV(TextField, {\n                  fullWidth: true,\n                  label: \"Password\",\n                  variant: \"outlined\",\n                  name: \"password\",\n                  type: \"password\",\n                  value: values.password,\n                  onBlur: handleBlur,\n                  onChange: handleChange,\n                  error: Boolean(touched.password && errors.password),\n                  helperText: touched.password && errors.password\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 135,\n                  columnNumber: 33\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 134,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 12,\n                children: /*#__PURE__*/_jsxDEV(TextField, {\n                  fullWidth: true,\n                  label: \"Confirm Password\",\n                  variant: \"outlined\",\n                  name: \"confirmPassword\",\n                  type: \"password\",\n                  value: values.confirmPassword,\n                  onBlur: handleBlur,\n                  onChange: handleChange,\n                  error: Boolean(touched.confirmPassword && errors.confirmPassword),\n                  helperText: touched.confirmPassword && errors.confirmPassword\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 149,\n                  columnNumber: 33\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 148,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              onClick: onClose,\n              variant: \"outlined\",\n              color: \"secondary\",\n              children: \"Cancel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              className: classes.themeButton,\n              onClick: () => submitForm(),\n              disabled: isSubmitting,\n              variant: \"outlined\",\n              children: isSubmitting ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n                size: 24,\n                style: {\n                  color: 'white'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 176,\n                columnNumber: 29\n              }, this) : 'ChangePassword'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s2(ChangePassword, \"je36U9ALBxWkBPN1xE+8WeiiOAQ=\", false, function () {\n  return [useStyle, useService, useSnackbar];\n});\n\n_c2 = ChangePassword;\nexport default AdminProfileDetails;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"AdminProfileDetails\");\n$RefreshReg$(_c2, \"ChangePassword\");","map":{"version":3,"sources":["D:/Pyramidion/WebApp/Izze-Admin/src/pages/AdminProfileDetails/AdminProfileDetails.tsx"],"names":["React","Grid","Button","Paper","makeStyles","Avatar","IconButton","Dialog","DialogActions","DialogContent","TextField","CircularProgress","List","ListItem","ListItemAvatar","ListItemText","Typography","Page","useService","useSnackbar","EditIcon","DialogTitle","Formik","Yup","useStyle","theme","root","width","breakpoints","values","lg","height","maxWidth","margin","padding","spacing","paperStyle","themeButton","color","palette","white","backgroundColor","green","main","dark","AdminProfileDetails","classes","Post","Snackbar","initialValues","password","confirmPassword","ChangePassword","formikRef","useRef","isOpen","setIsOpen","useState","initialFormValues","setInitialFormValues","changePasswordModel","onClose","onSubmit","value","helper","postData","changePasswordData","data","setSubmitting","resetForm","then","res","show","message","catch","err","object","shape","string","required","oneOf","ref","errors","touched","handleChange","handleBlur","setFieldValue","submitForm","isSubmitting","Boolean"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { Grid, Button, Paper, makeStyles, Avatar, Table, TableBody, TableCell, TableRow, IconButton, Dialog, DialogActions, DialogContent, TextField, CircularProgress, List, ListItem, ListItemAvatar, ListItemText, Typography,} from '@material-ui/core'\r\nimport Page from '../../components/Page/Page';\r\nimport useService from '../../hook/useService';\r\nimport useSnackbar from '../../hook/useSnackbar';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\n\r\nimport DialogTitle from '../../components/DialogTitlle/DialogTitle';\r\nimport { Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\n\r\nconst useStyle = makeStyles((theme: any) => ({\r\n  root: {\r\n    width: theme.breakpoints.values.lg,\r\n    height : '100%',\r\n    maxWidth: '100%',\r\n    margin: '0 auto',\r\n    padding: theme.spacing(3),\r\n  },\r\n  paperStyle : {\r\n      width : '100%',\r\n      height : '85vh'\r\n  },\r\n  themeButton: {\r\n    color: theme.palette.white,\r\n    backgroundColor: theme.palette.green.main,\r\n    '&:hover': {\r\n      backgroundColor: theme.palette.green.dark,\r\n    },\r\n  },\r\n\r\n}));\r\n\r\nconst AdminProfileDetails = () => {\r\n  const classes = useStyle();\r\n  const { Post } = useService();\r\n  const Snackbar = useSnackbar();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Page title='Admin Profile' />\r\n        <Grid container spacing={2}>\r\n            <Grid item xs={12} md={2}></Grid>\r\n            <Grid item xs={12} md={8}>\r\n                <Paper className={classes.paperStyle}>\r\n                    <div>\r\n                        <Avatar style={{width : '150px',height : '150px'}} variant='square' />\r\n                        <List>\r\n                            <ListItem>\r\n                                <ListItemAvatar><Typography>Header</Typography></ListItemAvatar>\r\n                                <ListItemText primary  = 'Text' />\r\n                                <IconButton><EditIcon/></IconButton>\r\n                            </ListItem>\r\n                        </List>\r\n                    </div>\r\n                </Paper>\r\n            </Grid>\r\n            <Grid item xs={12} md={2}></Grid>\r\n        </Grid>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nconst initialValues = {\r\n    password : '',\r\n    confirmPassword : '',\r\n}\r\nexport const ChangePassword = () =>{\r\n    const classes = useStyle();\r\n    const formikRef = React.useRef<any>(null);\r\n    const [isOpen, setIsOpen] = React.useState(false);\r\n    const { Post } = useService();\r\n    const Snackbar = useSnackbar();\r\n    const [initialFormValues, setInitialFormValues] = React.useState({...initialValues})\r\n\r\n    const changePasswordModel = () =>{\r\n        setIsOpen(!isOpen)\r\n    }\r\n\r\n    const onClose = () =>{\r\n        setIsOpen(!isOpen)\r\n    }\r\n\r\n    const onSubmit = (value: any, helper: any) =>{\r\n        const { confirmPassword } = value\r\n        let postData = {\r\n            password : confirmPassword\r\n        }\r\n        changePasswordData(postData, helper)\r\n    }\r\n\r\n    const changePasswordData = (data: any, { setSubmitting, resetForm }: any) =>{\r\n        Post('app/updateAdminPassword', data)\r\n        .then((res: any) => {\r\n            Snackbar.show(res.message, 'success');\r\n            setSubmitting(false);\r\n            resetForm();\r\n            onClose();\r\n        })\r\n        .catch((err: any) => {\r\n            Snackbar.show(err.message, 'error');\r\n        });\r\n    }\r\n\r\n    return(\r\n        <>\r\n            <Button onClick={changePasswordModel} className={classes.themeButton}>ChangePassword</Button>\r\n            <Dialog\r\n                open={isOpen}\r\n                disableBackdropClick\r\n                disableEscapeKeyDown\r\n                fullWidth\r\n                maxWidth='sm'\r\n                aria-labelledby='dialog-title'\r\n            >\r\n                <DialogTitle id='dialog-title' onClose={onClose}>\r\n                    Change Password\r\n                </DialogTitle>\r\n                <Formik\r\n                    innerRef={formikRef}\r\n                    enableReinitialize\r\n                    initialValues={initialFormValues}\r\n                    validationSchema={Yup.object().shape({\r\n                        password : Yup.string().required('Password is required'),\r\n                        confirmPassword : Yup.string().oneOf([Yup.ref('password'),null], 'Password must be same').required('Confirm password is required')\r\n                    })}\r\n                    onSubmit={onSubmit}\r\n                >\r\n                {({ values, errors, touched, handleChange, handleBlur, setFieldValue, submitForm, isSubmitting }) => (\r\n                    <>\r\n                    <DialogContent dividers>\r\n                        <Grid container spacing={2}>\r\n                            <Grid item xs={12}>\r\n                                <TextField \r\n                                    fullWidth \r\n                                    label = 'Password'\r\n                                    variant='outlined' \r\n                                    name = 'password'\r\n                                    type = 'password'\r\n                                    value={values.password}\r\n                                    onBlur={handleBlur}\r\n                                    onChange={handleChange}\r\n                                    error={Boolean(touched.password && errors.password)}\r\n                                    helperText={touched.password && errors.password}\r\n                                />    \r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <TextField \r\n                                    fullWidth \r\n                                    label = 'Confirm Password'\r\n                                    variant='outlined'\r\n                                    name = 'confirmPassword'\r\n                                    type = 'password'\r\n                                    value={values.confirmPassword}\r\n                                    onBlur={handleBlur}\r\n                                    onChange={handleChange}\r\n                                    error={Boolean(touched.confirmPassword && errors.confirmPassword)}\r\n                                    helperText={touched.confirmPassword && errors.confirmPassword}\r\n                                />   \r\n                            </Grid>\r\n                        </Grid>\r\n                    </DialogContent>\r\n\r\n                    <DialogActions>\r\n                        <Button onClick={onClose} variant='outlined' color='secondary'>\r\n                            Cancel\r\n                        </Button>\r\n                        <Button\r\n                        className={classes.themeButton}\r\n                        onClick={() => submitForm()}\r\n                        disabled={isSubmitting}\r\n                        variant='outlined'\r\n                        >\r\n                        {isSubmitting ? (\r\n                            <CircularProgress size={24} style={{ color: 'white' }} />\r\n                        ) : (\r\n                            'ChangePassword'\r\n                        )}\r\n                        </Button>\r\n                    </DialogActions>\r\n                    </>\r\n                )}\r\n                </Formik>\r\n            </Dialog>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AdminProfileDetails;\r\n"]},"metadata":{},"sourceType":"module"}