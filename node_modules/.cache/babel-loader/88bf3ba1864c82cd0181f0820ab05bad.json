{"ast":null,"code":"import { isNodeSelection, posToDOMRect, Extension } from '@tiptap/core';\nimport { PluginKey, Plugin } from 'prosemirror-state';\nimport tippy from 'tippy.js';\n\nclass BubbleMenuView {\n  constructor({\n    editor,\n    element,\n    view,\n    tippyOptions\n  }) {\n    this.preventHide = false;\n\n    this.mousedownHandler = () => {\n      this.preventHide = true;\n    };\n\n    this.focusHandler = () => {\n      // we use `setTimeout` to make sure `selection` is already updated\n      setTimeout(() => this.update(this.editor.view));\n    };\n\n    this.blurHandler = ({\n      event\n    }) => {\n      var _a;\n\n      if (this.preventHide) {\n        this.preventHide = false;\n        return;\n      }\n\n      if ((event === null || event === void 0 ? void 0 : event.relatedTarget) && ((_a = this.element.parentNode) === null || _a === void 0 ? void 0 : _a.contains(event.relatedTarget))) {\n        return;\n      }\n\n      this.hide();\n    };\n\n    this.editor = editor;\n    this.element = element;\n    this.view = view;\n    this.element.addEventListener('mousedown', this.mousedownHandler, {\n      capture: true\n    });\n    this.editor.on('focus', this.focusHandler);\n    this.editor.on('blur', this.blurHandler);\n    this.createTooltip(tippyOptions);\n    this.element.style.visibility = 'visible';\n  }\n\n  createTooltip(options = {}) {\n    this.tippy = tippy(this.view.dom, {\n      duration: 0,\n      getReferenceClientRect: null,\n      content: this.element,\n      interactive: true,\n      trigger: 'manual',\n      placement: 'top',\n      hideOnClick: 'toggle',\n      ...options\n    });\n  }\n\n  update(view, oldState) {\n    const {\n      state,\n      composing\n    } = view;\n    const {\n      doc,\n      selection\n    } = state;\n    const isSame = oldState && oldState.doc.eq(doc) && oldState.selection.eq(selection);\n\n    if (composing || isSame) {\n      return;\n    }\n\n    const {\n      empty,\n      $anchor,\n      ranges\n    } = selection; // support for CellSelections\n\n    const from = Math.min(...ranges.map(range => range.$from.pos));\n    const to = Math.max(...ranges.map(range => range.$to.pos)); // Sometime check for `empty` is not enough.\n    // Doubleclick an empty paragraph returns a node size of 2.\n    // So we check also for an empty text size.\n\n    if (empty || !$anchor.parent.textContent) {\n      this.hide();\n      return;\n    }\n\n    this.tippy.setProps({\n      getReferenceClientRect: () => {\n        if (isNodeSelection(view.state.selection)) {\n          const node = view.nodeDOM(from);\n\n          if (node) {\n            return node.getBoundingClientRect();\n          }\n        }\n\n        return posToDOMRect(view, from, to);\n      }\n    });\n    this.show();\n  }\n\n  show() {\n    this.tippy.show();\n  }\n\n  hide() {\n    this.tippy.hide();\n  }\n\n  destroy() {\n    this.tippy.destroy();\n    this.element.removeEventListener('mousedown', this.mousedownHandler);\n    this.editor.off('focus', this.focusHandler);\n    this.editor.off('blur', this.blurHandler);\n  }\n\n}\n\nconst BubbleMenuPluginKey = new PluginKey('menuBubble');\n\nconst BubbleMenuPlugin = options => {\n  return new Plugin({\n    key: BubbleMenuPluginKey,\n    view: view => new BubbleMenuView({\n      view,\n      ...options\n    })\n  });\n};\n\nconst BubbleMenu = Extension.create({\n  name: 'bubbleMenu',\n  defaultOptions: {\n    element: null,\n    tippyOptions: {}\n  },\n\n  addProseMirrorPlugins() {\n    if (!this.options.element) {\n      return [];\n    }\n\n    return [BubbleMenuPlugin({\n      editor: this.editor,\n      element: this.options.element,\n      tippyOptions: this.options.tippyOptions\n    })];\n  }\n\n});\nexport default BubbleMenu;\nexport { BubbleMenu, BubbleMenuPlugin, BubbleMenuPluginKey, BubbleMenuView };","map":{"version":3,"sources":["../src/bubble-menu-plugin.ts","../src/bubble-menu.ts"],"names":[],"mappings":"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","sourcesContent":["import { Editor, posToDOMRect, isNodeSelection } from '@tiptap/core'\nimport { EditorState, Plugin, PluginKey } from 'prosemirror-state'\nimport { EditorView } from 'prosemirror-view'\nimport tippy, { Instance, Props } from 'tippy.js'\n\nexport interface BubbleMenuPluginProps {\n  editor: Editor,\n  element: HTMLElement,\n  tippyOptions?: Partial<Props>,\n}\n\nexport type BubbleMenuViewProps = BubbleMenuPluginProps & {\n  view: EditorView,\n}\n\nexport class BubbleMenuView {\n  public editor: Editor\n\n  public element: HTMLElement\n\n  public view: EditorView\n\n  public preventHide = false\n\n  public tippy!: Instance\n\n  constructor({\n    editor,\n    element,\n    view,\n    tippyOptions,\n  }: BubbleMenuViewProps) {\n    this.editor = editor\n    this.element = element\n    this.view = view\n    this.element.addEventListener('mousedown', this.mousedownHandler, { capture: true })\n    this.editor.on('focus', this.focusHandler)\n    this.editor.on('blur', this.blurHandler)\n    this.createTooltip(tippyOptions)\n    this.element.style.visibility = 'visible'\n  }\n\n  mousedownHandler = () => {\n    this.preventHide = true\n  }\n\n  focusHandler = () => {\n    // we use `setTimeout` to make sure `selection` is already updated\n    setTimeout(() => this.update(this.editor.view))\n  }\n\n  blurHandler = ({ event }: { event: FocusEvent }) => {\n    if (this.preventHide) {\n      this.preventHide = false\n\n      return\n    }\n\n    if (\n      event?.relatedTarget\n      && this.element.parentNode?.contains(event.relatedTarget as Node)\n    ) {\n      return\n    }\n\n    this.hide()\n  }\n\n  createTooltip(options: Partial<Props> = {}) {\n    this.tippy = tippy(this.view.dom, {\n      duration: 0,\n      getReferenceClientRect: null,\n      content: this.element,\n      interactive: true,\n      trigger: 'manual',\n      placement: 'top',\n      hideOnClick: 'toggle',\n      ...options,\n    })\n  }\n\n  update(view: EditorView, oldState?: EditorState) {\n    const { state, composing } = view\n    const { doc, selection } = state\n    const isSame = oldState && oldState.doc.eq(doc) && oldState.selection.eq(selection)\n\n    if (composing || isSame) {\n      return\n    }\n\n    const { empty, $anchor, ranges } = selection\n\n    // support for CellSelections\n    const from = Math.min(...ranges.map(range => range.$from.pos))\n    const to = Math.max(...ranges.map(range => range.$to.pos))\n\n    // Sometime check for `empty` is not enough.\n    // Doubleclick an empty paragraph returns a node size of 2.\n    // So we check also for an empty text size.\n    if (empty || !$anchor.parent.textContent) {\n      this.hide()\n\n      return\n    }\n\n    this.tippy.setProps({\n      getReferenceClientRect: () => {\n        if (isNodeSelection(view.state.selection)) {\n          const node = view.nodeDOM(from) as HTMLElement\n\n          if (node) {\n            return node.getBoundingClientRect()\n          }\n        }\n\n        return posToDOMRect(view, from, to)\n      },\n    })\n\n    this.show()\n  }\n\n  show() {\n    this.tippy.show()\n  }\n\n  hide() {\n    this.tippy.hide()\n  }\n\n  destroy() {\n    this.tippy.destroy()\n    this.element.removeEventListener('mousedown', this.mousedownHandler)\n    this.editor.off('focus', this.focusHandler)\n    this.editor.off('blur', this.blurHandler)\n  }\n}\n\nexport const BubbleMenuPluginKey = new PluginKey('menuBubble')\n\nexport const BubbleMenuPlugin = (options: BubbleMenuPluginProps) => {\n  return new Plugin({\n    key: BubbleMenuPluginKey,\n    view: view => new BubbleMenuView({ view, ...options }),\n  })\n}\n","import { Extension } from '@tiptap/core'\nimport { BubbleMenuPlugin, BubbleMenuPluginProps } from './bubble-menu-plugin'\n\nexport type BubbleMenuOptions = Omit<BubbleMenuPluginProps, 'editor' | 'element'> & {\n  element: HTMLElement | null,\n}\n\nexport const BubbleMenu = Extension.create<BubbleMenuOptions>({\n  name: 'bubbleMenu',\n\n  defaultOptions: {\n    element: null,\n    tippyOptions: {},\n  },\n\n  addProseMirrorPlugins() {\n    if (!this.options.element) {\n      return []\n    }\n\n    return [\n      BubbleMenuPlugin({\n        editor: this.editor,\n        element: this.options.element,\n        tippyOptions: this.options.tippyOptions,\n      }),\n    ]\n  },\n})\n"]},"metadata":{},"sourceType":"module"}