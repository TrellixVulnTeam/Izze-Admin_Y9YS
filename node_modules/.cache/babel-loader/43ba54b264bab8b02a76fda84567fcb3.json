{"ast":null,"code":"var _jsxFileName = \"D:\\\\Pyramidion\\\\WebApp\\\\Izze-Admin\\\\src\\\\pages\\\\AppUsers\\\\AppWorkout.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport React, { useEffect, useLayoutEffect, useRef, useState } from 'react';\nimport { Button, Card, CircularProgress, Grid, Table, TableBody, TableCell, TableRow, TextField } from '@material-ui/core';\nimport { Autocomplete } from '@material-ui/lab';\nimport { makeStyles } from '@material-ui/styles';\nimport { Formik } from 'formik';\nimport clsx from 'clsx';\nimport * as Yup from 'yup';\nimport getDropValues, { ExperienceDrop, InterestsDrop, NoOption, PreferredDrop } from '../../utils/PlanDropdowns';\nimport useSnackbar from '../../hook/useSnackbar';\nimport useService from '../../hook/useService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  editCardRoot: {\n    padding: theme.spacing(2)\n  },\n  marginLeft1: {\n    marginLeft: theme.spacing(1)\n  },\n  themeButton: {\n    color: theme.palette.white,\n    backgroundColor: theme.palette.green.main,\n    '&:hover': {\n      backgroundColor: theme.palette.green.dark\n    }\n  },\n  actionGrid: {\n    display: 'flex',\n    alignItems: \"center\",\n    justifyContent: \"flex-end\"\n  },\n  editButtonDiv: {\n    display: 'flex',\n    alignItems: \"center\",\n    justifyContent: \"flex-end\",\n    paddingBottom: theme.spacing(2)\n  }\n}));\n\nconst AppWorkout = props => {\n  _s();\n\n  const classes = useStyles();\n  const [isEdit, setIsEdit] = useState(false);\n  const {\n    data,\n    onRefresh\n  } = props;\n  const [formData, setFormData] = useState(data);\n  useEffect(() => {\n    setFormData(props.data);\n  }, [props.data]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [!isEdit && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.editButtonDiv,\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => setIsEdit(true),\n        className: classes.themeButton,\n        variant: \"outlined\",\n        children: \"Edit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 19\n    }, this), !isEdit && /*#__PURE__*/_jsxDEV(ViewCard, {\n      data: formData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 19\n    }, this), isEdit && /*#__PURE__*/_jsxDEV(EditCard, {\n      data: formData,\n      onClose: () => setIsEdit(false),\n      onSuccess: () => onRefresh()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 18\n    }, this)]\n  }, void 0, true);\n};\n\n_s(AppWorkout, \"kOZqXWHspKKEaYMq3NYIuhfmNTM=\", false, function () {\n  return [useStyles];\n});\n\n_c = AppWorkout;\n\nconst EditCard = props => {\n  _s2();\n\n  const classes = useStyles();\n  const {\n    onClose,\n    onSuccess\n  } = props;\n  const formikRef = useRef(null);\n  const Snackbar = useSnackbar();\n  const {\n    Post\n  } = useService();\n  const formInitialValue = {\n    id: \"\",\n    experience_level: \"\",\n    preferred_workout: \"\",\n    interests: \"\"\n  };\n  const [initialValue, setInitialValue] = useState(formInitialValue);\n\n  const onSubmit = (value, {\n    setSubmitting,\n    resetForm\n  }) => {\n    setSubmitting(true);\n    Post('app/updateWorkoutPlan', value).then(res => {\n      Snackbar.show(res.message, 'success');\n      setSubmitting(false);\n      resetForm();\n      onClose();\n      onSuccess();\n    }).catch(err => {\n      setSubmitting(false);\n      Snackbar.show(err.message, 'error');\n    });\n  };\n\n  useLayoutEffect(() => {\n    const {\n      _id,\n      experience_level,\n      preferred_workout,\n      interests\n    } = props.data;\n    setInitialValue(prevState => ({ ...prevState,\n      id: _id,\n      experience_level,\n      preferred_workout,\n      interests\n    }));\n  }, [props.data]);\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: classes.editCardRoot,\n    children: /*#__PURE__*/_jsxDEV(Formik, {\n      innerRef: formikRef,\n      enableReinitialize: true,\n      initialValues: initialValue,\n      validationSchema: Yup.object().shape({\n        experience_level: Yup.string().trim().required('Experience level is required'),\n        preferred_workout: Yup.string().trim().required('Preferred workout is required'),\n        interests: Yup.string().trim().required('Interests is required')\n      }),\n      onSubmit: onSubmit,\n      children: ({\n        values,\n        errors,\n        touched,\n        handleChange,\n        handleBlur,\n        setFieldValue,\n        submitForm,\n        isSubmitting\n      }) => /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 2,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 4,\n            children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n              options: ExperienceDrop,\n              value: ExperienceDrop.find(data => data.id == values.experience_level) || NoOption,\n              getOptionLabel: option => option.name,\n              getOptionSelected: option => option.id == values.experience_level,\n              onChange: (event, newValue) => {\n                setFieldValue('experience_level', (newValue === null || newValue === void 0 ? void 0 : newValue.id) || '');\n              },\n              onBlur: handleBlur,\n              renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n                label: \"Experience Level\",\n                variant: \"outlined\",\n                error: Boolean(touched.experience_level && errors.experience_level),\n                helperText: touched.experience_level && errors.experience_level,\n                inputProps: { ...params.inputProps\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 131,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 4,\n            children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n              options: PreferredDrop,\n              value: PreferredDrop.find(data => data.id == values.preferred_workout) || NoOption,\n              getOptionLabel: option => option.name,\n              getOptionSelected: option => option.id == values.preferred_workout,\n              onChange: (event, newValue) => {\n                setFieldValue('preferred_workout', (newValue === null || newValue === void 0 ? void 0 : newValue.id) || '');\n              },\n              onBlur: handleBlur,\n              renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n                label: \"Preferred Workout\",\n                variant: \"outlined\",\n                error: Boolean(touched.preferred_workout && errors.preferred_workout),\n                helperText: touched.preferred_workout && errors.preferred_workout,\n                inputProps: { ...params.inputProps\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 156,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 146,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 4,\n            children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n              options: InterestsDrop,\n              value: InterestsDrop.find(data => data.id == values.interests) || NoOption,\n              getOptionLabel: option => option.name,\n              getOptionSelected: option => option.id == values.interests,\n              onChange: (event, newValue) => {\n                setFieldValue('interests', (newValue === null || newValue === void 0 ? void 0 : newValue.id) || '');\n              },\n              onBlur: handleBlur,\n              renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n                label: \"Interests\",\n                variant: \"outlined\",\n                error: Boolean(touched.interests && errors.interests),\n                helperText: touched.interests && errors.interests,\n                inputProps: { ...params.inputProps\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 181,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            className: classes.actionGrid,\n            item: true,\n            xs: 12,\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              onClick: () => onClose(),\n              variant: \"outlined\",\n              color: \"secondary\",\n              children: \"Cancel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              className: clsx(classes.themeButton, classes.marginLeft1),\n              onClick: () => submitForm(),\n              disabled: isSubmitting,\n              variant: \"outlined\",\n              children: isSubmitting ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n                size: 24,\n                style: {\n                  color: 'white'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 206,\n                columnNumber: 21\n              }, this) : 'Update'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 199,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 13\n        }, this)\n      }, void 0, false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(EditCard, \"N2Q4wQEx04Yo3H/ingRFpIIl5NQ=\", false, function () {\n  return [useStyles, useSnackbar, useService];\n});\n\n_c2 = EditCard;\n\nconst ViewCard = props => {\n  _s3();\n\n  const classes = useStyles();\n  const {\n    data\n  } = props;\n  const [formData, setFormData] = useState({});\n  useEffect(() => {\n    setFormData(data);\n  }, [props]);\n  return /*#__PURE__*/_jsxDEV(Card, {\n    children: /*#__PURE__*/_jsxDEV(Table, {\n      children: /*#__PURE__*/_jsxDEV(TableBody, {\n        children: [/*#__PURE__*/_jsxDEV(TableRow, {\n          children: [/*#__PURE__*/_jsxDEV(TableCell, {\n            children: \"Experience Level\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: getDropValues(ExperienceDrop, formData === null || formData === void 0 ? void 0 : formData.experience_level)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TableRow, {\n          children: [/*#__PURE__*/_jsxDEV(TableCell, {\n            children: \"Preferred Workout\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: getDropValues(PreferredDrop, formData === null || formData === void 0 ? void 0 : formData.preferred_workout)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TableRow, {\n          children: [/*#__PURE__*/_jsxDEV(TableCell, {\n            children: \"Interests\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: getDropValues(InterestsDrop, formData === null || formData === void 0 ? void 0 : formData.interests)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 228,\n    columnNumber: 5\n  }, this);\n};\n\n_s3(ViewCard, \"/JjL4q6hbvUkM8aIr5aZAnfsDh0=\", false, function () {\n  return [useStyles];\n});\n\n_c3 = ViewCard;\nexport default AppWorkout;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"AppWorkout\");\n$RefreshReg$(_c2, \"EditCard\");\n$RefreshReg$(_c3, \"ViewCard\");","map":{"version":3,"sources":["D:/Pyramidion/WebApp/Izze-Admin/src/pages/AppUsers/AppWorkout.tsx"],"names":["React","useEffect","useLayoutEffect","useRef","useState","Button","Card","CircularProgress","Grid","Table","TableBody","TableCell","TableRow","TextField","Autocomplete","makeStyles","Formik","clsx","Yup","getDropValues","ExperienceDrop","InterestsDrop","NoOption","PreferredDrop","useSnackbar","useService","useStyles","theme","editCardRoot","padding","spacing","marginLeft1","marginLeft","themeButton","color","palette","white","backgroundColor","green","main","dark","actionGrid","display","alignItems","justifyContent","editButtonDiv","paddingBottom","AppWorkout","props","classes","isEdit","setIsEdit","data","onRefresh","formData","setFormData","EditCard","onClose","onSuccess","formikRef","Snackbar","Post","formInitialValue","id","experience_level","preferred_workout","interests","initialValue","setInitialValue","onSubmit","value","setSubmitting","resetForm","then","res","show","message","catch","err","_id","prevState","object","shape","string","trim","required","values","errors","touched","handleChange","handleBlur","setFieldValue","submitForm","isSubmitting","find","option","name","event","newValue","params","Boolean","inputProps","ViewCard"],"mappings":"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","sourcesContent":["import React, { memo, useEffect, useLayoutEffect, useRef, useState } from 'react';\r\nimport { Button, Card, CircularProgress, Grid, Table, TableBody, TableCell, TableRow, TextField } from '@material-ui/core';\r\nimport { Autocomplete } from '@material-ui/lab';\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport { Formik } from 'formik';\r\nimport clsx from 'clsx';\r\nimport * as Yup from 'yup';\r\nimport getDropValues, { CurrentClimateDrop, DietTypeDrop, ExperienceDrop, FitnessGoalDrop, getSubSkinIrregular, InterestsDrop, LifeStyleDrop, NoOption, PreferredDrop, SkinIrregularDrop, SkinTextureDrop, SkinTypeDrop } from '../../utils/PlanDropdowns';\r\nimport useSnackbar from '../../hook/useSnackbar';\r\nimport useService from '../../hook/useService';\r\n\r\nconst useStyles = makeStyles((theme: any) => ({\r\n  editCardRoot: {\r\n    padding: theme.spacing(2)\r\n  },\r\n  marginLeft1: {\r\n    marginLeft: theme.spacing(1),\r\n  },\r\n  themeButton: {\r\n    color: theme.palette.white,\r\n\r\n    backgroundColor: theme.palette.green.main,\r\n    '&:hover': {\r\n      backgroundColor: theme.palette.green.dark,\r\n    },\r\n  },\r\n  actionGrid: {\r\n    display: 'flex',\r\n    alignItems: \"center\",\r\n    justifyContent: \"flex-end\"\r\n  },\r\n  editButtonDiv: {\r\n    display: 'flex',\r\n    alignItems: \"center\",\r\n    justifyContent: \"flex-end\",\r\n    paddingBottom: theme.spacing(2)\r\n  }\r\n}));\r\n\r\nconst AppWorkout = (props: any) => {\r\n  const classes = useStyles();\r\n  const [isEdit, setIsEdit] = useState(false)\r\n  const { data, onRefresh } = props;\r\n  const [formData, setFormData] = useState<any>(data);\r\n  useEffect(() => {\r\n    setFormData(props.data)\r\n  }, [props.data]);\r\n\r\n  return (\r\n    <>\r\n      {!isEdit && <div className={classes.editButtonDiv}>\r\n        <Button onClick={() => setIsEdit(true)} className={classes.themeButton} variant='outlined'>\r\n          Edit\r\n        </Button>\r\n      </div>\r\n      }\r\n      {!isEdit && <ViewCard data={formData} />}\r\n      {isEdit && <EditCard data={formData} onClose={() => setIsEdit(false)} onSuccess={() => onRefresh()} />}\r\n    </>\r\n  );\r\n};\r\n\r\nconst EditCard = (props: any) => {\r\n  const classes = useStyles();\r\n  const { onClose, onSuccess } = props;\r\n  const formikRef = useRef<any>(null);\r\n  const Snackbar = useSnackbar();\r\n  const { Post } = useService();\r\n\r\n  const formInitialValue = {\r\n    id: \"\",\r\n    experience_level: \"\",\r\n    preferred_workout: \"\",\r\n    interests: \"\"\r\n  }\r\n\r\n  const [initialValue, setInitialValue] = useState<any>(formInitialValue);\r\n\r\n  const onSubmit = (value: any, { setSubmitting, resetForm }: any) => {\r\n    setSubmitting(true);\r\n\r\n    Post('app/updateWorkoutPlan', value)\r\n      .then((res: any) => {\r\n        Snackbar.show(res.message, 'success');\r\n        setSubmitting(false);\r\n        resetForm();\r\n        onClose();\r\n        onSuccess();\r\n      })\r\n      .catch((err: any) => {\r\n        setSubmitting(false);\r\n        Snackbar.show(err.message, 'error');\r\n      });\r\n  };\r\n\r\n  useLayoutEffect(() => {\r\n    const { _id, experience_level, preferred_workout, interests } = props.data\r\n    setInitialValue((prevState: any) => ({ ...prevState, id: _id, experience_level, preferred_workout, interests }))\r\n  }, [props.data]);\r\n\r\n  return (\r\n    <Card className={classes.editCardRoot}>\r\n      <Formik\r\n        innerRef={formikRef}\r\n        enableReinitialize\r\n        initialValues={initialValue}\r\n        validationSchema={\r\n          Yup.object().shape({\r\n            experience_level: Yup.string().trim().required('Experience level is required'),\r\n            preferred_workout: Yup.string().trim().required('Preferred workout is required'),\r\n            interests: Yup.string().trim().required('Interests is required'),\r\n          })\r\n        }\r\n        onSubmit={onSubmit}\r\n      >\r\n        {({ values, errors, touched, handleChange, handleBlur, setFieldValue, submitForm, isSubmitting }) => (\r\n          <>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={4}>\r\n\r\n                <Autocomplete\r\n                  options={ExperienceDrop}\r\n                  value={ExperienceDrop.find((data: any) => data.id == values.experience_level) || NoOption}\r\n                  getOptionLabel={(option: any) => option.name}\r\n                  getOptionSelected={(option) => option.id == values.experience_level}\r\n                  onChange={(event: any, newValue: any) => {\r\n                    setFieldValue('experience_level', newValue?.id || '');\r\n                  }}\r\n                  onBlur={handleBlur}\r\n                  renderInput={(params: any) => (\r\n                    <TextField\r\n                      {...params}\r\n                      label='Experience Level'\r\n                      variant='outlined'\r\n                      error={Boolean(touched.experience_level && errors.experience_level)}\r\n                      helperText={touched.experience_level && errors.experience_level}\r\n                      inputProps={{\r\n                        ...params.inputProps,\r\n                      }}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              <Grid item xs={4}>\r\n                <Autocomplete\r\n                  options={PreferredDrop}\r\n                  value={PreferredDrop.find((data: any) => data.id == values.preferred_workout) || NoOption}\r\n                  getOptionLabel={(option: any) => option.name}\r\n                  getOptionSelected={(option) => option.id == values.preferred_workout}\r\n                  onChange={(event: any, newValue: any) => {\r\n                    setFieldValue('preferred_workout', newValue?.id || '');\r\n                  }}\r\n                  onBlur={handleBlur}\r\n                  renderInput={(params: any) => (\r\n                    <TextField\r\n                      {...params}\r\n                      label='Preferred Workout'\r\n                      variant='outlined'\r\n                      error={Boolean(touched.preferred_workout && errors.preferred_workout)}\r\n                      helperText={touched.preferred_workout && errors.preferred_workout}\r\n                      inputProps={{\r\n                        ...params.inputProps,\r\n                      }}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              <Grid item xs={4}>\r\n                <Autocomplete\r\n                  options={InterestsDrop}\r\n                  value={InterestsDrop.find((data: any) => data.id == values.interests) || NoOption}\r\n                  getOptionLabel={(option: any) => option.name}\r\n                  getOptionSelected={(option) => option.id == values.interests}\r\n                  onChange={(event: any, newValue: any) => {\r\n                    setFieldValue('interests', newValue?.id || '');\r\n                  }}\r\n                  onBlur={handleBlur}\r\n                  renderInput={(params: any) => (\r\n                    <TextField\r\n                      {...params}\r\n                      label='Interests'\r\n                      variant='outlined'\r\n                      error={Boolean(touched.interests && errors.interests)}\r\n                      helperText={touched.interests && errors.interests}\r\n                      inputProps={{\r\n                        ...params.inputProps,\r\n                      }}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              <Grid className={classes.actionGrid} item xs={12}>\r\n                <Button onClick={() => onClose()} variant='outlined' color='secondary'>\r\n                  Cancel\r\n                </Button>\r\n                <Button\r\n                  className={clsx(classes.themeButton, classes.marginLeft1)}\r\n                  onClick={() => submitForm()}\r\n                  disabled={isSubmitting}\r\n                  variant='outlined'\r\n                >\r\n                  {isSubmitting ? (\r\n                    <CircularProgress size={24} style={{ color: 'white' }} />\r\n                  ) : 'Update'}\r\n                </Button>\r\n              </Grid>\r\n            </Grid>\r\n          </>\r\n        )}\r\n      </Formik>\r\n    </Card>\r\n  );\r\n};\r\n\r\nconst ViewCard = (props: any) => {\r\n  const classes = useStyles();\r\n\r\n  const { data } = props;\r\n  const [formData, setFormData] = useState<any>({});\r\n  useEffect(() => {\r\n    setFormData(data)\r\n  }, [props]);\r\n\r\n  return (\r\n    <Card>\r\n      <Table>\r\n        <TableBody>\r\n          <TableRow >\r\n            <TableCell>Experience Level</TableCell>\r\n            <TableCell>{getDropValues(ExperienceDrop, formData?.experience_level)}</TableCell>\r\n          </TableRow>\r\n          <TableRow >\r\n            <TableCell>Preferred Workout</TableCell>\r\n            <TableCell>{getDropValues(PreferredDrop, formData?.preferred_workout)}</TableCell>\r\n          </TableRow>\r\n          <TableRow >\r\n            <TableCell>Interests</TableCell>\r\n            <TableCell>{getDropValues(InterestsDrop, formData?.interests)}</TableCell>\r\n          </TableRow>\r\n        </TableBody>\r\n      </Table>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default AppWorkout;\r\n"]},"metadata":{},"sourceType":"module"}