{"ast":null,"code":"import { Mark, mergeAttributes, markInputRule, markPasteRule } from '@tiptap/core';\nvar starInputRegex = /(?:^|\\s)((?:\\*\\*)((?:[^*]+))(?:\\*\\*))$/gm;\nvar starPasteRegex = /(?:^|\\s)((?:\\*\\*)((?:[^*]+))(?:\\*\\*))/gm;\nvar underscoreInputRegex = /(?:^|\\s)((?:__)((?:[^__]+))(?:__))$/gm;\nvar underscorePasteRegex = /(?:^|\\s)((?:__)((?:[^__]+))(?:__))/gm;\nvar Bold = Mark.create({\n  name: 'bold',\n  defaultOptions: {\n    HTMLAttributes: {}\n  },\n  parseHTML: function parseHTML() {\n    return [{\n      tag: 'strong'\n    }, {\n      tag: 'b',\n      getAttrs: function getAttrs(node) {\n        return node.style.fontWeight !== 'normal' && null;\n      }\n    }, {\n      style: 'font-weight',\n      getAttrs: function getAttrs(value) {\n        return /^(bold(er)?|[5-9]\\d{2,})$/.test(value) && null;\n      }\n    }];\n  },\n  renderHTML: function renderHTML(_ref) {\n    var HTMLAttributes = _ref.HTMLAttributes;\n    return ['strong', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n  addCommands: function addCommands() {\n    return {\n      setBold: function setBold() {\n        return function (_ref2) {\n          var commands = _ref2.commands;\n          return commands.setMark('bold');\n        };\n      },\n      toggleBold: function toggleBold() {\n        return function (_ref3) {\n          var commands = _ref3.commands;\n          return commands.toggleMark('bold');\n        };\n      },\n      unsetBold: function unsetBold() {\n        return function (_ref4) {\n          var commands = _ref4.commands;\n          return commands.unsetMark('bold');\n        };\n      }\n    };\n  },\n  addKeyboardShortcuts: function addKeyboardShortcuts() {\n    var _this = this;\n\n    return {\n      'Mod-b': function ModB() {\n        return _this.editor.commands.toggleBold();\n      }\n    };\n  },\n  addInputRules: function addInputRules() {\n    return [markInputRule(starInputRegex, this.type), markInputRule(underscoreInputRegex, this.type)];\n  },\n  addPasteRules: function addPasteRules() {\n    return [markPasteRule(starPasteRegex, this.type), markPasteRule(underscorePasteRegex, this.type)];\n  }\n});\nexport default Bold;\nexport { Bold, starInputRegex, starPasteRegex, underscoreInputRegex, underscorePasteRegex };","map":{"version":3,"sources":["../src/bold.ts"],"names":[],"mappings":";IA+Ba,cAAc,GAAG,0C;IACjB,cAAc,GAAG,yC;IACjB,oBAAoB,GAAG,uC;IACvB,oBAAoB,GAAG,sC;IAEvB,IAAI,GAAG,IAAI,CAAC,MAAL,CAAyB;AAC3C,EAAA,IAAI,EAAE,MADqC;AAG3C,EAAA,cAAc,EAAE;AACd,IAAA,cAAc,EAAE;AADF,GAH2B;AAO3C,EAAA,SAP2C,uBAOlC;AACP,WAAO,CACL;AACE,MAAA,GAAG,EAAE;AADP,KADK,EAIL;AACE,MAAA,GAAG,EAAE,GADP;AAEE,MAAA,QAAQ,EAAE,kBAAA,IAAI;AAAA,eAAK,IAAoB,CAAC,KAArB,CAA2B,UAA3B,KAA0C,QAA1C,IAAsD,IAA3D;AAAA;AAFhB,KAJK,EAQL;AACE,MAAA,KAAK,EAAE,aADT;AAEE,MAAA,QAAQ,EAAE,kBAAA,KAAK;AAAA,eAAI,4BAA4B,IAA5B,CAAiC,KAAjC,KAAqD,IAAzD;AAAA;AAFjB,KARK,CAAP;AAaD,GArB0C;AAuB3C,EAAA,UAvB2C,4BAuBd;AAAA,QAAhB,cAAgB,QAAhB,cAAgB;AAC3B,WAAO,CAAC,QAAD,EAAW,eAAe,CAAC,KAAK,OAAL,CAAa,cAAd,EAA8B,cAA9B,CAA1B,EAAyE,CAAzE,CAAP;AACD,GAzB0C;AA2B3C,EAAA,WA3B2C,yBA2BhC;AACT,WAAO;AACL,MAAA,OAAO,EAAE;AAAA,eAAM,iBAAa;AAAA,cAAV,QAAU,SAAV,QAAU;AAC1B,iBAAO,QAAQ,CAAC,OAAT,CAAiB,MAAjB,CAAP;AACD,SAFQ;AAAA,OADJ;AAIL,MAAA,UAAU,EAAE;AAAA,eAAM,iBAAa;AAAA,cAAV,QAAU,SAAV,QAAU;AAC7B,iBAAO,QAAQ,CAAC,UAAT,CAAoB,MAApB,CAAP;AACD,SAFW;AAAA,OAJP;AAOL,MAAA,SAAS,EAAE;AAAA,eAAM,iBAAa;AAAA,cAAV,QAAU,SAAV,QAAU;AAC5B,iBAAO,QAAQ,CAAC,SAAT,CAAmB,MAAnB,CAAP;AACD,SAFU;AAAA;AAPN,KAAP;AAWD,GAvC0C;AAyC3C,EAAA,oBAzC2C,kCAyCvB;AAAA;;AAClB,WAAO;AACL,eAAS;AAAA,eAAM,KAAI,CAAC,MAAL,CAAY,QAAZ,CAAqB,UAArB,EAAN;AAAA;AADJ,KAAP;AAGD,GA7C0C;AA+C3C,EAAA,aA/C2C,2BA+C9B;AACX,WAAO,CACL,aAAa,CAAC,cAAD,EAAiB,KAAK,IAAtB,CADR,EAEL,aAAa,CAAC,oBAAD,EAAuB,KAAK,IAA5B,CAFR,CAAP;AAID,GApD0C;AAsD3C,EAAA,aAtD2C,2BAsD9B;AACX,WAAO,CACL,aAAa,CAAC,cAAD,EAAiB,KAAK,IAAtB,CADR,EAEL,aAAa,CAAC,oBAAD,EAAuB,KAAK,IAA5B,CAFR,CAAP;AAID;AA3D0C,CAAzB,C","sourcesContent":["import {\n  Command,\n  Mark,\n  markInputRule,\n  markPasteRule,\n  mergeAttributes,\n} from '@tiptap/core'\n\nexport interface BoldOptions {\n  HTMLAttributes: Record<string, any>,\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands {\n    bold: {\n      /**\n       * Set a bold mark\n       */\n      setBold: () => Command,\n      /**\n       * Toggle a bold mark\n       */\n      toggleBold: () => Command,\n      /**\n       * Unset a bold mark\n       */\n      unsetBold: () => Command,\n    }\n  }\n}\n\nexport const starInputRegex = /(?:^|\\s)((?:\\*\\*)((?:[^*]+))(?:\\*\\*))$/gm\nexport const starPasteRegex = /(?:^|\\s)((?:\\*\\*)((?:[^*]+))(?:\\*\\*))/gm\nexport const underscoreInputRegex = /(?:^|\\s)((?:__)((?:[^__]+))(?:__))$/gm\nexport const underscorePasteRegex = /(?:^|\\s)((?:__)((?:[^__]+))(?:__))/gm\n\nexport const Bold = Mark.create<BoldOptions>({\n  name: 'bold',\n\n  defaultOptions: {\n    HTMLAttributes: {},\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: 'strong',\n      },\n      {\n        tag: 'b',\n        getAttrs: node => (node as HTMLElement).style.fontWeight !== 'normal' && null,\n      },\n      {\n        style: 'font-weight',\n        getAttrs: value => /^(bold(er)?|[5-9]\\d{2,})$/.test(value as string) && null,\n      },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['strong', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      setBold: () => ({ commands }) => {\n        return commands.setMark('bold')\n      },\n      toggleBold: () => ({ commands }) => {\n        return commands.toggleMark('bold')\n      },\n      unsetBold: () => ({ commands }) => {\n        return commands.unsetMark('bold')\n      },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-b': () => this.editor.commands.toggleBold(),\n    }\n  },\n\n  addInputRules() {\n    return [\n      markInputRule(starInputRegex, this.type),\n      markInputRule(underscoreInputRegex, this.type),\n    ]\n  },\n\n  addPasteRules() {\n    return [\n      markPasteRule(starPasteRegex, this.type),\n      markPasteRule(underscorePasteRegex, this.type),\n    ]\n  },\n})\n"]},"metadata":{},"sourceType":"module"}