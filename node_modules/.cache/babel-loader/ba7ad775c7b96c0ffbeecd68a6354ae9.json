{"ast":null,"code":"import { Node, mergeAttributes } from '@tiptap/core';\nvar Paragraph = Node.create({\n  name: 'paragraph',\n  priority: 1000,\n  defaultOptions: {\n    HTMLAttributes: {}\n  },\n  group: 'block',\n  content: 'inline*',\n  parseHTML: function parseHTML() {\n    return [{\n      tag: 'p'\n    }];\n  },\n  renderHTML: function renderHTML(_ref) {\n    var HTMLAttributes = _ref.HTMLAttributes;\n    return ['p', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n  addCommands: function addCommands() {\n    return {\n      setParagraph: function setParagraph() {\n        return function (_ref2) {\n          var commands = _ref2.commands;\n          return commands.toggleNode('paragraph', 'paragraph');\n        };\n      }\n    };\n  },\n  addKeyboardShortcuts: function addKeyboardShortcuts() {\n    var _this = this;\n\n    return {\n      'Mod-Alt-0': function ModAlt0() {\n        return _this.editor.commands.setParagraph();\n      }\n    };\n  }\n});\nexport default Paragraph;\nexport { Paragraph };","map":{"version":3,"sources":["../src/paragraph.ts"],"names":[],"mappings":";IAiBa,SAAS,GAAG,IAAI,CAAC,MAAL,CAA8B;AACrD,EAAA,IAAI,EAAE,WAD+C;AAGrD,EAAA,QAAQ,EAAE,IAH2C;AAKrD,EAAA,cAAc,EAAE;AACd,IAAA,cAAc,EAAE;AADF,GALqC;AASrD,EAAA,KAAK,EAAE,OAT8C;AAWrD,EAAA,OAAO,EAAE,SAX4C;AAarD,EAAA,SAbqD,uBAa5C;AACP,WAAO,CACL;AAAE,MAAA,GAAG,EAAE;AAAP,KADK,CAAP;AAGD,GAjBoD;AAmBrD,EAAA,UAnBqD,4BAmBxB;AAAA,QAAhB,cAAgB,QAAhB,cAAgB;AAC3B,WAAO,CAAC,GAAD,EAAM,eAAe,CAAC,KAAK,OAAL,CAAa,cAAd,EAA8B,cAA9B,CAArB,EAAoE,CAApE,CAAP;AACD,GArBoD;AAuBrD,EAAA,WAvBqD,yBAuB1C;AACT,WAAO;AACL,MAAA,YAAY,EAAE;AAAA,eAAM,iBAAa;AAAA,cAAV,QAAU,SAAV,QAAU;AAC/B,iBAAO,QAAQ,CAAC,UAAT,CAAoB,WAApB,EAAiC,WAAjC,CAAP;AACD,SAFa;AAAA;AADT,KAAP;AAKD,GA7BoD;AA+BrD,EAAA,oBA/BqD,kCA+BjC;AAAA;;AAClB,WAAO;AACL,mBAAa;AAAA,eAAM,KAAI,CAAC,MAAL,CAAY,QAAZ,CAAqB,YAArB,EAAN;AAAA;AADR,KAAP;AAGD;AAnCoD,CAA9B,C","sourcesContent":["import { Command, Node, mergeAttributes } from '@tiptap/core'\n\nexport interface ParagraphOptions {\n  HTMLAttributes: Record<string, any>,\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands {\n    paragraph: {\n      /**\n       * Toggle a paragraph\n       */\n      setParagraph: () => Command,\n    }\n  }\n}\n\nexport const Paragraph = Node.create<ParagraphOptions>({\n  name: 'paragraph',\n\n  priority: 1000,\n\n  defaultOptions: {\n    HTMLAttributes: {},\n  },\n\n  group: 'block',\n\n  content: 'inline*',\n\n  parseHTML() {\n    return [\n      { tag: 'p' },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['p', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      setParagraph: () => ({ commands }) => {\n        return commands.toggleNode('paragraph', 'paragraph')\n      },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Alt-0': () => this.editor.commands.setParagraph(),\n    }\n  },\n})\n"]},"metadata":{},"sourceType":"module"}