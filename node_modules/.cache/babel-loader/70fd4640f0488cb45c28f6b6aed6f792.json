{"ast":null,"code":"import*as Yup from'yup';export var NutQuantity={macros:'',gram:'',calories:''};export var NutMealTime={isEdit:true,meal_time:'',order:0,meals:[]};export var NutMeal={ingredients:[],quantity:'',quantity_unit:'',protein:'',fat:'',carbs:'',calories:''};export var initialFormValues={diet_type:'',calories:'',protein:NutQuantity,fat:NutQuantity,carbs:NutQuantity,nutrition:[]};var ValNut=Yup.object({macros:Yup.number().typeError('Macros must be in number').required('Macros is required'),gram:Yup.number().typeError('Gram must be in number').required('Gram is required'),calories:Yup.number().typeError('Calories must be in number').required('Calories is required')});export var validation=Yup.object().shape({diet_type:Yup.string().trim().required('Diet type is required'),calories:Yup.number().required('Calories is required'),protein:ValNut,fat:ValNut,carbs:ValNut,nutrition:Yup.array().of(Yup.object().shape({meal_time:Yup.string().trim().required('Name is required'),meals:Yup.array().of(Yup.object().shape({ingredients:Yup.array().of(Yup.object().shape({id:Yup.string().trim().required('Before Workout is Required')})).min(1,'Ingredients is Required'),quantity:Yup.number().typeError('Quantity must be in number').required('Quantity is required'),quantity_unit:Yup.string().trim().required('Quantity unit is required'),protein:Yup.number().typeError('Protein must be in number').required('Protein is required'),fat:Yup.number().typeError('Fat must be in number').required('Fat is required'),carbs:Yup.number().typeError('Carbs must be in number').required('Carbs is required'),calories:Yup.number().typeError('Calories must be in number').required('Calories is required')})).min(1,'Meal is Required')})).min(1,'Field is Required')});","map":{"version":3,"sources":["D:/Pyramidion/WebApp/Izze-Admin/src/pages/NutritionPlan/FormikValues.tsx"],"names":["Yup","NutQuantity","macros","gram","calories","NutMealTime","isEdit","meal_time","order","meals","NutMeal","ingredients","quantity","quantity_unit","protein","fat","carbs","initialFormValues","diet_type","nutrition","ValNut","object","number","typeError","required","validation","shape","string","trim","array","of","id","min"],"mappings":"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","sourcesContent":["import * as Yup from 'yup';\r\n\r\ninterface NutritionQuantity {\r\n  macros: string,\r\n  gram: string,\r\n  calories: string,\r\n}\r\n\r\ninterface IntMealTime {\r\n  isEdit: Boolean,\r\n  meal_time: string,\r\n  order: number,\r\n  meals: IntMeal[],\r\n}\r\n\r\ninterface IntIngredients {\r\n  id: string\r\n}\r\n\r\ninterface IntMeal {\r\n  ingredients: IntIngredients[],\r\n  quantity: string,\r\n  quantity_unit: string,\r\n  protein: string,\r\n  fat: string,\r\n  carbs: string,\r\n  calories: string,\r\n}\r\n\r\ninterface NutritionPlan {\r\n  diet_type: string,\r\n  calories: string,\r\n  protein: NutritionQuantity,\r\n  fat: NutritionQuantity,\r\n  carbs: NutritionQuantity\r\n  nutrition: IntMealTime[]\r\n}\r\n\r\nexport const NutQuantity: NutritionQuantity = {\r\n  macros: '',\r\n  gram: '',\r\n  calories: '',\r\n}\r\n\r\nexport const NutMealTime: IntMealTime = {\r\n  isEdit: true,\r\n  meal_time: '',\r\n  order: 0,\r\n  meals: []\r\n}\r\n\r\nexport const NutMeal: IntMeal = {\r\n  ingredients: [],\r\n  quantity: '',\r\n  quantity_unit: '',\r\n  protein: '',\r\n  fat: '',\r\n  carbs: '',\r\n  calories: '',\r\n}\r\n\r\n\r\nexport const initialFormValues: NutritionPlan = {\r\n  diet_type: '',\r\n  calories: '',\r\n  protein: NutQuantity,\r\n  fat: NutQuantity,\r\n  carbs: NutQuantity,\r\n  nutrition: []\r\n};\r\n\r\nconst ValNut = Yup.object({\r\n  macros: Yup.number().typeError('Macros must be in number').required('Macros is required'),\r\n  gram: Yup.number().typeError('Gram must be in number').required('Gram is required'),\r\n  calories: Yup.number().typeError('Calories must be in number').required('Calories is required'),\r\n})\r\n\r\nexport const validation = Yup.object().shape({\r\n  diet_type: Yup.string().trim().required('Diet type is required'),\r\n  calories: Yup.number().required('Calories is required'),\r\n  protein: ValNut,\r\n  fat: ValNut,\r\n  carbs: ValNut,\r\n  nutrition: Yup.array().of(\r\n    Yup.object().shape({\r\n      meal_time: Yup.string().trim().required('Name is required'),\r\n      meals: Yup.array().of(\r\n        Yup.object().shape({\r\n          ingredients: Yup.array().of(\r\n            Yup.object().shape({\r\n              id: Yup.string().trim().required('Before Workout is Required'),\r\n            })).min(1, 'Ingredients is Required'),\r\n          quantity: Yup.number().typeError('Quantity must be in number').required('Quantity is required'),\r\n          quantity_unit: Yup.string().trim().required('Quantity unit is required'),\r\n          protein: Yup.number().typeError('Protein must be in number').required('Protein is required'),\r\n          fat: Yup.number().typeError('Fat must be in number').required('Fat is required'),\r\n          carbs: Yup.number().typeError('Carbs must be in number').required('Carbs is required'),\r\n          calories: Yup.number().typeError('Calories must be in number').required('Calories is required'),\r\n        })\r\n      ).min(1, 'Meal is Required')\r\n    })).min(1, 'Field is Required')\r\n})\r\n"]},"metadata":{},"sourceType":"module"}