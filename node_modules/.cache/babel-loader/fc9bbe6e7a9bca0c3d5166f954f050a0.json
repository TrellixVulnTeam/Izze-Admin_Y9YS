{"ast":null,"code":"import { Editor as Editor$1, NodeView } from '@tiptap/core';\nexport * from '@tiptap/core';\nimport React, { useRef, useEffect, useState, createContext, useContext } from 'react';\nimport { BubbleMenuPlugin, BubbleMenuPluginKey } from '@tiptap/extension-bubble-menu';\nimport { FloatingMenuPlugin, FloatingMenuPluginKey } from '@tiptap/extension-floating-menu';\nimport ReactDOM from 'react-dom';\n\nconst BubbleMenu = props => {\n  const element = useRef(null);\n  useEffect(() => {\n    const {\n      editor,\n      tippyOptions\n    } = props;\n    editor.registerPlugin(BubbleMenuPlugin({\n      editor,\n      element: element.current,\n      tippyOptions\n    }));\n    return () => {\n      editor.unregisterPlugin(BubbleMenuPluginKey);\n    };\n  }, []);\n  return React.createElement(\"div\", {\n    ref: element,\n    className: props.className,\n    style: {\n      visibility: 'hidden'\n    }\n  }, props.children);\n};\n\nclass Editor extends Editor$1 {\n  constructor() {\n    super(...arguments);\n    this.contentComponent = null;\n  }\n\n}\n\nconst FloatingMenu = props => {\n  const element = useRef(null);\n  useEffect(() => {\n    const {\n      editor,\n      tippyOptions\n    } = props;\n    editor.registerPlugin(FloatingMenuPlugin({\n      editor,\n      element: element.current,\n      tippyOptions\n    }));\n    return () => {\n      editor.unregisterPlugin(FloatingMenuPluginKey);\n    };\n  }, []);\n  return React.createElement(\"div\", {\n    ref: element,\n    className: props.className,\n    style: {\n      visibility: 'hidden'\n    }\n  }, props.children);\n};\n\nfunction useForceUpdate() {\n  const [, setValue] = useState(0);\n  return () => setValue(value => value + 1);\n}\n\nconst useEditor = (options = {}, deps = []) => {\n  const [editor, setEditor] = useState(null);\n  const forceUpdate = useForceUpdate();\n  useEffect(() => {\n    const instance = new Editor(options);\n    setEditor(instance);\n    instance.on('transaction', forceUpdate);\n    return () => {\n      instance.destroy();\n    };\n  }, deps);\n  return editor;\n};\n\nfunction isClassComponent(Component) {\n  return !!(typeof Component === 'function' && Component.prototype && Component.prototype.isReactComponent);\n}\n\nclass ReactRenderer {\n  constructor(component, {\n    editor,\n    props = {},\n    as = 'div'\n  }) {\n    this.ref = null;\n    this.id = Math.floor(Math.random() * 0xFFFFFFFF).toString();\n    this.component = component;\n    this.editor = editor;\n    this.props = props;\n    this.element = document.createElement(as);\n    this.element.classList.add('react-renderer');\n    this.render();\n  }\n\n  render() {\n    var _a;\n\n    const Component = this.component;\n    const props = this.props;\n\n    if (isClassComponent(Component)) {\n      props.ref = ref => {\n        this.ref = ref;\n      };\n    }\n\n    this.reactElement = React.createElement(Component, { ...props\n    });\n\n    if ((_a = this.editor) === null || _a === void 0 ? void 0 : _a.contentComponent) {\n      this.editor.contentComponent.setState({\n        renderers: this.editor.contentComponent.state.renderers.set(this.id, this)\n      });\n    }\n  }\n\n  updateProps(props = {}) {\n    this.props = { ...this.props,\n      ...props\n    };\n    this.render();\n  }\n\n  destroy() {\n    var _a;\n\n    if ((_a = this.editor) === null || _a === void 0 ? void 0 : _a.contentComponent) {\n      const {\n        renderers\n      } = this.editor.contentComponent.state;\n      renderers.delete(this.id);\n      this.editor.contentComponent.setState({\n        renderers\n      });\n    }\n  }\n\n}\n\nconst ReactNodeViewContext = createContext({\n  onDragStart: undefined\n});\n\nconst useReactNodeView = () => useContext(ReactNodeViewContext);\n\nclass ReactNodeView extends NodeView {\n  mount() {\n    const props = {\n      editor: this.editor,\n      node: this.node,\n      decorations: this.decorations,\n      selected: false,\n      extension: this.extension,\n      getPos: () => this.getPos(),\n      updateAttributes: (attributes = {}) => this.updateAttributes(attributes),\n      deleteNode: () => this.deleteNode()\n    };\n\n    if (!this.component.displayName) {\n      const capitalizeFirstChar = string => {\n        return string.charAt(0).toUpperCase() + string.substring(1);\n      };\n\n      this.component.displayName = capitalizeFirstChar(this.extension.name);\n    }\n\n    const ReactNodeViewProvider = componentProps => {\n      const onDragStart = this.onDragStart.bind(this);\n      const Component = this.component;\n      return React.createElement(ReactNodeViewContext.Provider, {\n        value: {\n          onDragStart\n        }\n      }, React.createElement(Component, { ...componentProps\n      }));\n    };\n\n    ReactNodeViewProvider.displayName = 'ReactNodeView';\n    this.contentDOMElement = this.node.isLeaf ? null : document.createElement(this.node.isInline ? 'span' : 'div');\n\n    if (this.contentDOMElement) {\n      // For some reason the whiteSpace prop is not inherited properly in Chrome and Safari\n      // With this fix it seems to work fine\n      // See: https://github.com/ueberdosis/tiptap/issues/1197\n      this.contentDOMElement.style.whiteSpace = 'inherit';\n    }\n\n    this.renderer = new ReactRenderer(ReactNodeViewProvider, {\n      editor: this.editor,\n      props,\n      as: this.node.isInline ? 'span' : 'div'\n    });\n  }\n\n  get dom() {\n    var _a;\n\n    if (this.renderer.element.firstElementChild && !((_a = this.renderer.element.firstElementChild) === null || _a === void 0 ? void 0 : _a.hasAttribute('data-node-view-wrapper'))) {\n      throw Error('Please use the NodeViewWrapper component for your node view.');\n    }\n\n    return this.renderer.element;\n  }\n\n  get contentDOM() {\n    if (this.node.isLeaf) {\n      return null;\n    }\n\n    this.maybeMoveContentDOM();\n    return this.contentDOMElement;\n  }\n\n  maybeMoveContentDOM() {\n    const contentElement = this.dom.querySelector('[data-node-view-content]');\n\n    if (this.contentDOMElement && contentElement && !contentElement.contains(this.contentDOMElement)) {\n      contentElement.appendChild(this.contentDOMElement);\n    }\n  }\n\n  update(node, decorations) {\n    if (typeof this.options.update === 'function') {\n      return this.options.update(node, decorations);\n    }\n\n    if (node.type !== this.node.type) {\n      return false;\n    }\n\n    if (node === this.node && this.decorations === decorations) {\n      return true;\n    }\n\n    this.node = node;\n    this.decorations = decorations;\n    this.renderer.updateProps({\n      node,\n      decorations\n    });\n    this.maybeMoveContentDOM();\n    return true;\n  }\n\n  selectNode() {\n    this.renderer.updateProps({\n      selected: true\n    });\n  }\n\n  deselectNode() {\n    this.renderer.updateProps({\n      selected: false\n    });\n  }\n\n  destroy() {\n    this.renderer.destroy();\n    this.contentDOMElement = null;\n  }\n\n}\n\nfunction ReactNodeViewRenderer(component, options) {\n  return props => {\n    // try to get the parent component\n    // this is important for vue devtools to show the component hierarchy correctly\n    // maybe it’s `undefined` because <editor-content> isn’t rendered yet\n    if (!props.editor.contentComponent) {\n      return {};\n    }\n\n    return new ReactNodeView(component, props, options);\n  };\n}\n\nconst Portals = ({\n  renderers\n}) => {\n  return React.createElement(React.Fragment, null, Array.from(renderers).map(([key, renderer]) => {\n    return ReactDOM.createPortal(renderer.reactElement, renderer.element, key);\n  }));\n};\n\nclass PureEditorContent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.editorContentRef = React.createRef();\n    this.state = {\n      renderers: new Map()\n    };\n  }\n\n  componentDidMount() {\n    this.init();\n  }\n\n  componentDidUpdate() {\n    this.init();\n  }\n\n  init() {\n    const {\n      editor\n    } = this.props;\n\n    if (editor && editor.options.element) {\n      if (editor.contentComponent) {\n        return;\n      }\n\n      const element = this.editorContentRef.current;\n      element.append(...editor.options.element.childNodes);\n      editor.setOptions({\n        element\n      });\n      editor.contentComponent = this; // TODO: alternative to setTimeout?\n\n      setTimeout(() => editor.createNodeViews(), 0);\n    }\n  }\n\n  componentWillUnmount() {\n    const {\n      editor\n    } = this.props;\n\n    if (!editor) {\n      return;\n    }\n\n    if (!editor.isDestroyed) {\n      editor.view.setProps({\n        nodeViews: {}\n      });\n    }\n\n    editor.contentComponent = null;\n\n    if (!editor.options.element.firstChild) {\n      return;\n    }\n\n    const newElement = document.createElement('div');\n    newElement.append(...editor.options.element.childNodes);\n    editor.setOptions({\n      element: newElement\n    });\n  }\n\n  render() {\n    const {\n      editor,\n      ...rest\n    } = this.props;\n    return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      ref: this.editorContentRef,\n      ...rest\n    }), React.createElement(Portals, {\n      renderers: this.state.renderers\n    }));\n  }\n\n}\n\nconst EditorContent = React.memo(PureEditorContent);\n\nconst NodeViewWrapper = props => {\n  const {\n    onDragStart\n  } = useReactNodeView();\n  const Tag = props.as || 'div';\n  return React.createElement(Tag, { ...props,\n    \"data-node-view-wrapper\": \"\",\n    onDragStart: onDragStart,\n    style: { ...props.style,\n      whiteSpace: 'normal'\n    }\n  });\n};\n\nconst NodeViewContent = props => {\n  const Tag = props.as || 'div';\n  return React.createElement(Tag, { ...props,\n    \"data-node-view-content\": \"\",\n    style: { ...props.style,\n      whiteSpace: 'pre-wrap'\n    }\n  });\n};\n\nexport { BubbleMenu, Editor, EditorContent, FloatingMenu, NodeViewContent, NodeViewWrapper, PureEditorContent, ReactNodeViewRenderer, ReactRenderer, useEditor };","map":{"version":3,"sources":["../src/BubbleMenu.tsx","../src/Editor.ts","../src/FloatingMenu.tsx","../src/useEditor.ts","../src/ReactRenderer.tsx","../src/useReactNodeView.ts","../src/ReactNodeViewRenderer.tsx","../src/EditorContent.tsx","../src/NodeViewWrapper.tsx","../src/NodeViewContent.tsx"],"names":["CoreEditor"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef } from 'react'\nimport { BubbleMenuPlugin, BubbleMenuPluginKey, BubbleMenuPluginProps } from '@tiptap/extension-bubble-menu'\n\nexport type BubbleMenuProps = Omit<BubbleMenuPluginProps, 'element'> & {\n  className?: string,\n}\n\nexport const BubbleMenu: React.FC<BubbleMenuProps> = props => {\n  const element = useRef<HTMLDivElement>(null)\n\n  useEffect(() => {\n    const { editor, tippyOptions } = props\n\n    editor.registerPlugin(BubbleMenuPlugin({\n      editor,\n      element: element.current as HTMLElement,\n      tippyOptions,\n    }))\n\n    return () => {\n      editor.unregisterPlugin(BubbleMenuPluginKey)\n    }\n  }, [])\n\n  return (\n    <div ref={element} className={props.className} style={{ visibility: 'hidden' }}>\n      {props.children}\n    </div>\n  )\n}\n","import React from 'react'\nimport { Editor as CoreEditor } from '@tiptap/core'\nimport { EditorContentProps, EditorContentState } from './EditorContent'\n\nexport class Editor extends CoreEditor {\n  public contentComponent: React.Component<EditorContentProps, EditorContentState> | null = null\n}\n","import React, { useEffect, useRef } from 'react'\nimport { FloatingMenuPlugin, FloatingMenuPluginKey, FloatingMenuPluginProps } from '@tiptap/extension-floating-menu'\n\nexport type FloatingMenuProps = Omit<FloatingMenuPluginProps, 'element'> & {\n  className?: string,\n}\n\nexport const FloatingMenu: React.FC<FloatingMenuProps> = props => {\n  const element = useRef<HTMLDivElement>(null)\n\n  useEffect(() => {\n    const { editor, tippyOptions } = props\n\n    editor.registerPlugin(FloatingMenuPlugin({\n      editor,\n      element: element.current as HTMLElement,\n      tippyOptions,\n    }))\n\n    return () => {\n      editor.unregisterPlugin(FloatingMenuPluginKey)\n    }\n  }, [])\n\n  return (\n    <div ref={element} className={props.className} style={{ visibility: 'hidden' }}>\n      {props.children}\n    </div>\n  )\n}\n","import { useState, useEffect, DependencyList } from 'react'\nimport { EditorOptions } from '@tiptap/core'\nimport { Editor } from './Editor'\n\nfunction useForceUpdate() {\n  const [, setValue] = useState(0)\n\n  return () => setValue(value => value + 1)\n}\n\nexport const useEditor = (options: Partial<EditorOptions> = {}, deps: DependencyList = []) => {\n  const [editor, setEditor] = useState<Editor | null>(null)\n  const forceUpdate = useForceUpdate()\n\n  useEffect(() => {\n    const instance = new Editor(options)\n\n    setEditor(instance)\n\n    instance.on('transaction', forceUpdate)\n\n    return () => {\n      instance.destroy()\n    }\n  }, deps)\n\n  return editor\n}\n","import React from 'react'\nimport { Editor } from './Editor'\n\nfunction isClassComponent(Component: any) {\n  return !!(\n    typeof Component === 'function'\n    && Component.prototype\n    && Component.prototype.isReactComponent\n  )\n}\n\nexport interface ReactRendererOptions {\n  editor: Editor,\n  props?: Record<string, any>,\n  as?: string,\n}\n\nexport class ReactRenderer {\n  id: string\n\n  editor: Editor\n\n  component: any\n\n  element: Element\n\n  props: Record<string, any>\n\n  reactElement: React.ReactNode\n\n  ref: React.Component | null = null\n\n  constructor(component: React.Component | React.FunctionComponent, { editor, props = {}, as = 'div' }: ReactRendererOptions) {\n    this.id = Math.floor(Math.random() * 0xFFFFFFFF).toString()\n    this.component = component\n    this.editor = editor\n    this.props = props\n    this.element = document.createElement(as)\n    this.element.classList.add('react-renderer')\n    this.render()\n  }\n\n  render(): void {\n    const Component = this.component\n    const props = this.props\n\n    if (isClassComponent(Component)) {\n      props.ref = (ref: React.Component) => {\n        this.ref = ref\n      }\n    }\n\n    this.reactElement = <Component {...props } />\n\n    if (this.editor?.contentComponent) {\n      this.editor.contentComponent.setState({\n        renderers: this.editor.contentComponent.state.renderers.set(\n          this.id,\n          this,\n        ),\n      })\n    }\n  }\n\n  updateProps(props: Record<string, any> = {}): void {\n    this.props = {\n      ...this.props,\n      ...props,\n    }\n\n    this.render()\n  }\n\n  destroy(): void {\n    if (this.editor?.contentComponent) {\n      const { renderers } = this.editor.contentComponent.state\n\n      renderers.delete(this.id)\n\n      this.editor.contentComponent.setState({\n        renderers,\n      })\n    }\n  }\n}\n","import { createContext, useContext } from 'react'\n\nexport interface ReactNodeViewContextProps {\n  onDragStart: (event: DragEvent) => void,\n}\n\nexport const ReactNodeViewContext = createContext<Partial<ReactNodeViewContextProps>>({\n  onDragStart: undefined,\n})\n\nexport const useReactNodeView = () => useContext(ReactNodeViewContext)\n","import React from 'react'\nimport {\n  NodeView,\n  NodeViewProps,\n  NodeViewRenderer,\n  NodeViewRendererProps,\n} from '@tiptap/core'\nimport { Decoration, NodeView as ProseMirrorNodeView } from 'prosemirror-view'\nimport { Node as ProseMirrorNode } from 'prosemirror-model'\nimport { Editor } from './Editor'\nimport { ReactRenderer } from './ReactRenderer'\nimport { ReactNodeViewContext } from './useReactNodeView'\n\ninterface ReactNodeViewRendererOptions {\n  stopEvent: ((event: Event) => boolean) | null,\n  update: ((node: ProseMirrorNode, decorations: Decoration[]) => boolean) | null,\n}\n\nclass ReactNodeView extends NodeView<React.FunctionComponent, Editor> {\n\n  renderer!: ReactRenderer\n\n  contentDOMElement!: HTMLElement | null\n\n  mount() {\n    const props: NodeViewProps = {\n      editor: this.editor,\n      node: this.node,\n      decorations: this.decorations,\n      selected: false,\n      extension: this.extension,\n      getPos: () => this.getPos(),\n      updateAttributes: (attributes = {}) => this.updateAttributes(attributes),\n      deleteNode: () => this.deleteNode(),\n    }\n\n    if (!(this.component as any).displayName) {\n      const capitalizeFirstChar = (string: string): string => {\n        return string.charAt(0).toUpperCase() + string.substring(1)\n      }\n\n      this.component.displayName = capitalizeFirstChar(this.extension.name)\n    }\n\n    const ReactNodeViewProvider: React.FunctionComponent = componentProps => {\n      const onDragStart = this.onDragStart.bind(this)\n      const Component = this.component\n\n      return (\n        <ReactNodeViewContext.Provider value={{ onDragStart }}>\n          <Component {...componentProps} />\n        </ReactNodeViewContext.Provider>\n      )\n    }\n\n    ReactNodeViewProvider.displayName = 'ReactNodeView'\n\n    this.contentDOMElement = this.node.isLeaf\n      ? null\n      : document.createElement(this.node.isInline ? 'span' : 'div')\n\n    if (this.contentDOMElement) {\n      // For some reason the whiteSpace prop is not inherited properly in Chrome and Safari\n      // With this fix it seems to work fine\n      // See: https://github.com/ueberdosis/tiptap/issues/1197\n      this.contentDOMElement.style.whiteSpace = 'inherit'\n    }\n\n    this.renderer = new ReactRenderer(ReactNodeViewProvider, {\n      editor: this.editor,\n      props,\n      as: this.node.isInline\n        ? 'span'\n        : 'div',\n    })\n  }\n\n  get dom() {\n    if (\n      this.renderer.element.firstElementChild\n      && !this.renderer.element.firstElementChild?.hasAttribute('data-node-view-wrapper')\n    ) {\n      throw Error('Please use the NodeViewWrapper component for your node view.')\n    }\n\n    return this.renderer.element\n  }\n\n  get contentDOM() {\n    if (this.node.isLeaf) {\n      return null\n    }\n\n    this.maybeMoveContentDOM()\n\n    return this.contentDOMElement\n  }\n\n  maybeMoveContentDOM(): void {\n    const contentElement = this.dom.querySelector('[data-node-view-content]')\n\n    if (\n      this.contentDOMElement\n      && contentElement\n      && !contentElement.contains(this.contentDOMElement)\n    ) {\n      contentElement.appendChild(this.contentDOMElement)\n    }\n  }\n\n  update(node: ProseMirrorNode, decorations: Decoration[]) {\n    if (typeof this.options.update === 'function') {\n      return this.options.update(node, decorations)\n    }\n\n    if (node.type !== this.node.type) {\n      return false\n    }\n\n    if (node === this.node && this.decorations === decorations) {\n      return true\n    }\n\n    this.node = node\n    this.decorations = decorations\n    this.renderer.updateProps({ node, decorations })\n    this.maybeMoveContentDOM()\n\n    return true\n  }\n\n  selectNode() {\n    this.renderer.updateProps({\n      selected: true,\n    })\n  }\n\n  deselectNode() {\n    this.renderer.updateProps({\n      selected: false,\n    })\n  }\n\n  destroy() {\n    this.renderer.destroy()\n    this.contentDOMElement = null\n  }\n}\n\nexport function ReactNodeViewRenderer(component: any, options?: Partial<ReactNodeViewRendererOptions>): NodeViewRenderer {\n  return (props: NodeViewRendererProps) => {\n    // try to get the parent component\n    // this is important for vue devtools to show the component hierarchy correctly\n    // maybe it’s `undefined` because <editor-content> isn’t rendered yet\n    if (!(props.editor as Editor).contentComponent) {\n      return {}\n    }\n\n    return new ReactNodeView(component, props, options) as ProseMirrorNodeView\n  }\n}\n","import React, { HTMLProps } from 'react'\nimport ReactDOM from 'react-dom'\nimport { Editor } from './Editor'\nimport { ReactRenderer } from './ReactRenderer'\n\nconst Portals: React.FC<{ renderers: Map<string, ReactRenderer> }> = ({ renderers }) => {\n  return (\n    <>\n      {Array.from(renderers).map(([key, renderer]) => {\n        return ReactDOM.createPortal(\n          renderer.reactElement,\n          renderer.element,\n          key,\n        )\n      })}\n    </>\n  )\n}\n\nexport interface EditorContentProps extends HTMLProps<HTMLDivElement> {\n  editor: Editor | null,\n}\n\nexport interface EditorContentState {\n  renderers: Map<string, ReactRenderer>\n}\n\nexport class PureEditorContent extends React.Component<EditorContentProps, EditorContentState> {\n  editorContentRef: React.RefObject<any>\n\n  constructor(props: EditorContentProps) {\n    super(props)\n    this.editorContentRef = React.createRef()\n\n    this.state = {\n      renderers: new Map(),\n    }\n  }\n\n  componentDidMount() {\n    this.init()\n  }\n\n  componentDidUpdate() {\n    this.init()\n  }\n\n  init() {\n    const { editor } = this.props\n\n    if (editor && editor.options.element) {\n      if (editor.contentComponent) {\n        return\n      }\n\n      const element = this.editorContentRef.current\n\n      element.append(...editor.options.element.childNodes)\n\n      editor.setOptions({\n        element,\n      })\n\n      editor.contentComponent = this\n\n      // TODO: alternative to setTimeout?\n      setTimeout(() => editor.createNodeViews(), 0)\n    }\n  }\n\n  componentWillUnmount() {\n    const { editor } = this.props\n\n    if (!editor) {\n      return\n    }\n\n    if (!editor.isDestroyed) {\n      editor.view.setProps({\n        nodeViews: {},\n      })\n    }\n\n    editor.contentComponent = null\n\n    if (!editor.options.element.firstChild) {\n      return\n    }\n\n    const newElement = document.createElement('div')\n\n    newElement.append(...editor.options.element.childNodes)\n\n    editor.setOptions({\n      element: newElement,\n    })\n  }\n\n  render() {\n    const { editor, ...rest } = this.props\n\n    return (\n      <>\n        <div ref={this.editorContentRef} {...rest} />\n        <Portals renderers={this.state.renderers} />\n      </>\n    )\n  }\n}\n\nexport const EditorContent = React.memo(PureEditorContent)\n","import React from 'react'\nimport { useReactNodeView } from './useReactNodeView'\n\nexport interface NodeViewWrapperProps {\n  [key: string]: any,\n  as?: React.ElementType,\n}\n\nexport const NodeViewWrapper: React.FC<NodeViewWrapperProps> = props => {\n  const { onDragStart } = useReactNodeView()\n  const Tag = props.as || 'div'\n\n  return (\n    <Tag\n      {...props}\n      data-node-view-wrapper=\"\"\n      onDragStart={onDragStart}\n      style={{\n        ...props.style,\n        whiteSpace: 'normal',\n      }}\n    />\n  )\n}\n","import React from 'react'\n\nexport interface NodeViewContentProps {\n  [key: string]: any,\n  as?: React.ElementType,\n}\n\nexport const NodeViewContent: React.FC<NodeViewContentProps> = props => {\n  const Tag = props.as || 'div'\n\n  return (\n    <Tag\n      {...props}\n      data-node-view-content=\"\"\n      style={{\n        ...props.style,\n        whiteSpace: 'pre-wrap',\n      }}\n    />\n  )\n}\n"]},"metadata":{},"sourceType":"module"}