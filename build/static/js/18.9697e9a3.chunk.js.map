{"version":3,"sources":["pages/AdminUser/AdminUser.tsx"],"names":["useStyle","makeStyles","theme","root","width","breakpoints","values","lg","maxWidth","margin","padding","spacing","greenColor","color","palette","green","main","themeButton","white","backgroundColor","dark","deleteButton","height","content","inner","minWidth","actions","justifyContent","tabCard","marginTop","sEvenly","display","iconPadd","jCenter","imageView","avatarRoot","borderRadius","marginRight","textPrimary","fontWeight","textSecondary","ingrdientsGridMain","ingredientsAvatarRoot","htmlContentGrid","paddingLeft","paddingRight","paddingTop","noIngredientsText","marginBottom","textareaAdornedEnd","htmlContent","textAlign","wordBreak","likeCountImg","noCommentsText","justifyCenter","blogTypeStyle","fontSize","marginLeft","rejectButtonStyle","initialFormValue","email","password","name","image","file","prevImage","isNew","user_type","AdminRoles","id","AddEditModel","props","classes","isEdit","isOpen","okBtnText","onClose","data","title","onSuccess","useState","initialValue","setInitialValue","formikRef","React","useRef","imageRef","Snackbar","useSnackbar","Post","useService","uploadNewImage","imageData","uploadImageCloudinary","Promise","resolve","addData","setSubmitting","resetForm","then","res","show","message","catch","err","onImageChange","event","persist","files","target","FieldName","length","reader","FileReader","onloadend","current","setFieldValue","result","readAsDataURL","useEffect","image_thumbnail","_id","rest","EditData","url","open","disableBackdropClick","disableEscapeKeyDown","fullWidth","aria-labelledby","innerRef","enableReinitialize","initialValues","onSubmit","value","helper","a","PostData","all","ImgRes","render","validationSchema","Yup","shape","trim","required","errors","touched","handleBlur","handleChange","submitForm","isSubmitting","setFieldTouched","dividers","container","item","xs","label","variant","onChange","onBlur","error","Boolean","helperText","type","options","find","getOptionLabel","option","newValue","renderInput","params","inputProps","md","ref","accept","hidden","className","onClick","click","startIcon","src","disabled","size","style","ViewModel","onReload","formValue","console","log","AdminUser","useConfModel","page_no","page_limit","stateData","setStateData","pageCount","setPageCount","dataList","setDataList","loading","setLoading","viewDialog","setViewDialog","addEditDialog","setAddEditDialog","listBlog","page_count","closeAddEditDialog","prevState","alignItems","justify","component","elevation","placeholder","Name","Value","align","map","index","hover","arrow","openViewDialog","count","page"],"mappings":"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","file":"static/js/18.9697e9a3.chunk.js","sourcesContent":["import React, { useRef, useState } from 'react'\r\nimport { Avatar, Button, Card, CardActions, CardContent, CircularProgress, Dialog, DialogActions, DialogContent, Grid, IconButton, makeStyles, Paper, Tab, Table, TableBody, FormControl, FormHelperText, TableCell, TableContainer, TableHead, TableRow, TextField, Tooltip, Divider, Typography, Tabs, ListItemSecondaryAction } from '@material-ui/core';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport CenterFocusStrongIcon from '@material-ui/icons/CenterFocusStrong';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport { Pagination, TabContext, TabList, TabPanel } from '@material-ui/lab';\r\nimport TipTapEditor from '../../components/TipTapEditor/TipTapEditor';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport { imageUpload } from '../../utils/FirebaseUtils';\r\nimport { Formik, getIn, useFormikContext } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport DialogTitle from '../../components/DialogTitlle/DialogTitle';\r\nimport { TableLoader, TableNoData } from '../../components/Loader/Loader';\r\nimport Page from '../../components/Page/Page';\r\nimport useConfModel from '../../hook/useConfModel';\r\nimport useService from '../../hook/useService';\r\nimport useSnackbar from '../../hook/useSnackbar';\r\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\r\nimport { useEffect } from 'react';\r\nimport LikeImage from '../../assets/Images/like.png'\r\nimport CommentImage from '../../assets/Images/comment.png';\r\nimport CheckIcon from '@material-ui/icons/Check';\r\nimport { promises } from 'stream';\r\nimport { uploadImageCloudinary } from '../../utils/CloudinaryUtils';\r\nimport moment from 'moment'\r\n\r\n\r\nconst useStyle = makeStyles((theme: any) => ({\r\n  root: {\r\n    width: theme.breakpoints.values.lg,\r\n    maxWidth: '100%',\r\n    margin: '0 auto',\r\n    padding: theme.spacing(3),\r\n  },\r\n  greenColor: {\r\n    color: theme.palette.green.main,\r\n  },\r\n  themeButton: {\r\n    color: theme.palette.white,\r\n    backgroundColor: theme.palette.green.main,\r\n    '&:hover': {\r\n      backgroundColor: theme.palette.green.dark,\r\n    },\r\n  },\r\n  deleteButton: {\r\n    width: '100%',\r\n    height: '50px',\r\n  },\r\n  content: {\r\n    padding: 0,\r\n  },\r\n  inner: {\r\n    minWidth: 700,\r\n  },\r\n  actions: {\r\n    padding: theme.spacing(1),\r\n    justifyContent: 'center',\r\n  },\r\n  tabCard: {\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  sEvenly: {\r\n    display: 'flex',\r\n    justifyContent: 'space-evenly',\r\n  },\r\n  iconPadd: {\r\n    padding: 5,\r\n  },\r\n  jCenter: {\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n  },\r\n  imageView: {\r\n    width: '100%',\r\n    height: '100%',\r\n  },\r\n  avatarRoot: {\r\n    borderRadius: 10,\r\n    marginRight: 15,\r\n    width: theme.spacing(10),\r\n    height: theme.spacing(10),\r\n  },\r\n  textPrimary: {\r\n    marginTop: 10,\r\n    fontWeight: 'bold',\r\n  },\r\n  textSecondary: {\r\n    marginTop: 10,\r\n  },\r\n  ingrdientsGridMain: {\r\n    marginTop: 10,\r\n  },\r\n  ingredientsAvatarRoot: {\r\n    width: theme.spacing(7),\r\n    height: theme.spacing(7),\r\n    margin: 'auto',\r\n  },\r\n  htmlContentGrid: {\r\n    paddingLeft: theme.spacing(3),\r\n    paddingRight: theme.spacing(3),\r\n    paddingTop: theme.spacing(1),\r\n  },\r\n  noIngredientsText: {\r\n    marginBottom: theme.spacing(3),\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n  },\r\n  textareaAdornedEnd: {\r\n    paddingRight: 0\r\n  },\r\n  htmlContent: {\r\n    '& ul': {\r\n      paddingLeft: '1.2rem',\r\n    },\r\n    '& p': {\r\n      textAlign: 'justify',\r\n      wordBreak: 'break-word'\r\n    },\r\n  },\r\n  likeCountImg: {\r\n    width: theme.spacing(2),\r\n    height: theme.spacing(2),\r\n  },\r\n  noCommentsText: {\r\n    textAlign: 'center'\r\n  },\r\n  justifyCenter: {\r\n    justifyContent: 'center'\r\n  },\r\n  blogTypeStyle : {\r\n    backgroundColor : '#F2805E',\r\n    color : 'white',\r\n    padding : '5px',\r\n    borderRadius : '5px',\r\n    fontSize : '14px',\r\n    marginLeft : '10px'\r\n  },\r\n  rejectButtonStyle : { \r\n    backgroundColor: 'red', \r\n    color: 'white', \r\n    marginLeft: '10px',\r\n    '&:hover': {\r\n      backgroundColor: 'red',\r\n    }, \r\n  }\r\n}));\r\n\r\nconst AdminUser = () => {\r\n  const classes = useStyle();\r\n  const { Post } = useService();\r\n  const Snackbar = useSnackbar();\r\n  const ConfModel = useConfModel();\r\n  const [stateData, setStateData] = useState({ page_no: 1, page_limit: 10, name:'' });\r\n  const [pageCount, setPageCount] = useState(0);\r\n  const [dataList, setDataList] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [viewDialog, setViewDialog] = React.useState({\r\n    isOpen: false,\r\n    title: '',\r\n    data: {},\r\n  });\r\n  const [addEditDialog, setAddEditDialog] = useState({\r\n    isOpen: false,\r\n    title: '',\r\n    okBtnText: '',\r\n    isEdit: false,\r\n    data: {},\r\n  });\r\n\r\n  const listBlog = async () => {\r\n    setLoading(true);\r\n    Post('app/listAdminUser', stateData)\r\n      .then((res: any) => {\r\n        console.log('listAdminUser', res);\r\n        setLoading(false);\r\n        if (!res.error) {\r\n          setDataList(res.data);\r\n          setPageCount(res.page_count);\r\n        } else {\r\n          Snackbar.show(res.message, 'error');\r\n        }\r\n      })\r\n      .catch((err: any) => {\r\n        console.log('err', err);\r\n        setLoading(false);\r\n        Snackbar.show(err.message, 'error');\r\n      });\r\n  };\r\n\r\n  const searchChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    event.persist()\r\n    const Name = event.target.name\r\n    const Value = event.target.value\r\n    setStateData((prevState: any) => ({ ...prevState, [Name]: Value }));\r\n  };\r\n\r\n  const openAddDialog = () => {\r\n    setAddEditDialog((prevState: any) => ({\r\n      ...prevState,\r\n      isOpen: true,\r\n      title: 'Add Admin User',\r\n      isEdit: false,\r\n      okBtnText: 'Save',\r\n    }));\r\n  };\r\n\r\n  const openViewDialog = (data: any) => {\r\n    setViewDialog((prevState: any) => ({\r\n      ...prevState,\r\n      isOpen: true,\r\n      data,\r\n      title: 'View Admin User',\r\n    }));\r\n  };\r\n\r\n  const closeAddEditDialog = () => {\r\n    setAddEditDialog((prevState: any) => ({ ...prevState, isOpen: false }));\r\n  };\r\n\r\n  const onPageChange = (event: React.ChangeEvent<unknown>, value: number) => {\r\n    setStateData((prevState: any) => ({ ...prevState, page_no: value }));\r\n  };\r\n\r\n  const onSuccessAction = () => {\r\n    listBlog();\r\n    closeAddEditDialog();\r\n  };\r\n\r\n  const closeViewDialog = () => {\r\n    setViewDialog((prevState: any) => ({ ...prevState, isOpen: false }));\r\n  };\r\n\r\n  useEffect(() => {\r\n    listBlog();\r\n  }, [stateData]);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Page title='Admin Users' />\r\n      <Grid alignItems='flex-end' container justify='space-between' spacing={3}>\r\n        <Grid item>\r\n          <Typography component='h1' variant='h3'>\r\n            Admin Users\r\n          </Typography>\r\n        </Grid>\r\n        <Grid item>\r\n          <Button\r\n            variant='contained'\r\n            onClick={() => openAddDialog()}\r\n            className={classes.themeButton}\r\n            startIcon={<AddIcon />}\r\n          >\r\n            Add\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      {/* =============Search======== */}\r\n      <Grid container spacing={3}>\r\n        <Grid item>\r\n          <Paper elevation={0}>\r\n            <TextField\r\n              fullWidth\r\n              size='small'\r\n              placeholder='Name'\r\n              name = 'name'\r\n              value = {stateData?.name}\r\n              variant='outlined'\r\n              onChange={searchChange}\r\n            />\r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <Card className={classes.tabCard}>\r\n        <CardContent className={classes.content}>\r\n          <TableContainer>\r\n            <Table>\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell align='center'>#</TableCell>\r\n                  <TableCell align='center'>Image</TableCell>\r\n                  <TableCell align='center'>Name</TableCell>\r\n                  <TableCell align='center'>Email</TableCell>\r\n                  <TableCell align='center'>User Type</TableCell>\r\n                  <TableCell align='center'>Action</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {!loading &&\r\n                  dataList.map((data: any, index: number) => (\r\n                    <TableRow hover key={index}>\r\n                      <TableCell align='center'>\r\n                        {stateData.page_limit * (stateData.page_no - 1) +\r\n                          index +\r\n                          1}\r\n                      </TableCell>\r\n                      <TableCell align='center'>\r\n                        <div className={classes.jCenter}>\r\n                          <Avatar variant='square' src={data?.image?.url} />\r\n                        </div>\r\n                      </TableCell>\r\n                      <TableCell align='center'>{data?.name}</TableCell>\r\n                      <TableCell align='center'>{data?.email}</TableCell>\r\n                      <TableCell align='center'>{data?.user_type}</TableCell>\r\n                      <TableCell align='center'>\r\n                        <div className={classes.sEvenly}>\r\n                          <Tooltip title='View' arrow>\r\n                            <IconButton\r\n                              className={classes.iconPadd}\r\n                              onClick={() => openViewDialog(data)}\r\n                            >\r\n                              <CenterFocusStrongIcon color='primary' />\r\n                            </IconButton>\r\n                          </Tooltip>\r\n                          {/* <Tooltip title='Edit' arrow>\r\n                            <IconButton\r\n                              className={classes.iconPadd}\r\n                              onClick={() => openEditDialog(data)}\r\n                            >\r\n                              <EditIcon color='action' />\r\n                            </IconButton>\r\n                          </Tooltip>\r\n                          <Tooltip title='Delete' arrow>\r\n                            <IconButton\r\n                              className={classes.iconPadd}\r\n                              onClick={() => onDelete(data)}\r\n                            >\r\n                              <DeleteIcon color='secondary' />\r\n                            </IconButton>\r\n                          </Tooltip> */}\r\n                        </div>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n                {loading && <TableLoader />}\r\n                {!loading && dataList.length == 0 && (\r\n                  <TableNoData>No Data Found</TableNoData>\r\n                )}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n        </CardContent>\r\n\r\n        <CardActions className={classes.actions}>\r\n          <Pagination\r\n            count={pageCount}\r\n            page={stateData.page_no}\r\n            onChange={onPageChange}\r\n          />\r\n        </CardActions>\r\n      </Card>\r\n\r\n      {addEditDialog.isOpen && <AddEditModel {...addEditDialog} onClose={closeAddEditDialog} onSuccess={onSuccessAction} />}\r\n      {viewDialog.isOpen && <ViewModel {...viewDialog} onClose={closeViewDialog} onReload={() => listBlog()} />}\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nconst initialFormValue = {\r\n  email: '',\r\n  password: '',\r\n  name: '',\r\n  image: { file: null, prevImage: '', isNew: null },\r\n  user_type : ''\r\n}\r\nconst AdminRoles = [\r\n {id : 'ADMIN', name : 'Admin'},\r\n {id : 'NUTRITION', name : 'Nutrition'},\r\n {id : 'SKINCARE', name : 'Skincare'},\r\n {id : 'WORKOUT', name : 'Workout'},\r\n {id : 'CUSTOMERCARE', name : 'Costomer Care'}\r\n]\r\n\r\nexport const AddEditModel = (props: any) => {\r\n  const classes = useStyle()\r\n  const { isEdit, isOpen, okBtnText = 'OK', onClose, data, title, onSuccess } = props;\r\n  const [initialValue, setInitialValue] = useState({ ...initialFormValue });\r\n  const formikRef = React.useRef<any>(null);\r\n  const imageRef = React.useRef<any>(null);\r\n  const imageThumbnailRef = React.useRef<any>(null);\r\n  const Snackbar = useSnackbar();\r\n  const { Post } = useService();\r\n\r\n  const uploadNewImage = (imageData: any) => {\r\n    const { isNew, file } = imageData\r\n    if (isNew) {\r\n      return uploadImageCloudinary(file)\r\n    } else {\r\n      return Promise.resolve(file)\r\n    }\r\n  }\r\n\r\n  const onSubmit = (value: any, helper: any) => {\r\n    try {\r\n      helper.setSubmitting(true);\r\n      const render = async () => {\r\n        const { image, ...rest } = value;\r\n        const PostData = rest;\r\n        const [ImgRes] = await Promise.all([uploadNewImage(image)])\r\n\r\n        PostData.image = ImgRes\r\n\r\n        !isEdit && addData(PostData, helper);\r\n        // isEdit && editData(PostData, helper);\r\n      };\r\n      render();\r\n    } catch (err) {\r\n      helper.setSubmitting(false);\r\n      Snackbar.show('Image Upload Failed', 'error');\r\n    }\r\n  };\r\n\r\n  const addData = (data: any, { setSubmitting, resetForm }: any) => {\r\n    setSubmitting(true);\r\n    Post('app/addAdminUser', data)\r\n      .then((res: any) => {\r\n        Snackbar.show(res.message, 'success');\r\n        setSubmitting(false);\r\n        resetForm();\r\n        onSuccess();\r\n      })\r\n      .catch((err: any) => {\r\n        Snackbar.show(err.message, 'error');\r\n      });\r\n  };\r\n\r\n  // const editData = (data: any, { setSubmitting, resetForm }: any) => {\r\n  //   setSubmitting(true);\r\n  //   Post('app/editBlog', data)\r\n  //     .then((res: any) => {\r\n  //       Snackbar.show(res.message, 'success');\r\n  //       setSubmitting(false);\r\n  //       resetForm();\r\n  //       onSuccess();\r\n  //     })\r\n  //     .catch((err: any) => {\r\n  //       Snackbar.show(err.message, 'error');\r\n  //     });\r\n  // };\r\n\r\n  const onImageChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    event.persist();\r\n    const files = event.target.files;\r\n    const FieldName = event.target.name;\r\n    if (files && files.length != 0) {\r\n      const reader = new FileReader();\r\n      const file = files[0];\r\n      reader.onloadend = () => {\r\n        formikRef.current.setFieldValue(FieldName, {\r\n          file,\r\n          prevImage: reader.result,\r\n          isNew: true,\r\n        });\r\n      };\r\n      reader.readAsDataURL(file);\r\n    } else {\r\n      formikRef.current.setFieldValue(FieldName, {\r\n        file: null,\r\n        prevImage: '',\r\n        isNew: null,\r\n      });\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (isEdit) {\r\n      const { image, image_thumbnail, _id, ...rest } = data;\r\n      const EditData = { ...rest, id: _id };\r\n      EditData.image = { file: image, prevImage: image.url, isNew: false };\r\n      EditData.image_thumbnail = { file: image_thumbnail, prevImage: image_thumbnail.url, isNew: false };\r\n      setInitialValue(EditData);\r\n    } else {\r\n      setInitialValue(initialFormValue);\r\n    }\r\n  }, [props]);\r\n\r\n  return (\r\n    <Dialog\r\n      open={isOpen}\r\n      disableBackdropClick\r\n      disableEscapeKeyDown\r\n      fullWidth\r\n      maxWidth='md'\r\n      aria-labelledby='dialog-title'\r\n    >\r\n      <DialogTitle id='dialog-title' onClose={onClose}>\r\n        {title}\r\n      </DialogTitle>\r\n      <Formik\r\n        innerRef={formikRef}\r\n        enableReinitialize\r\n        initialValues={initialValue}\r\n        onSubmit={onSubmit}\r\n        validationSchema={Yup.object().shape({\r\n            email: Yup.string().trim().required('Email is required').email(),\r\n            password: Yup.string().trim().required('Password is required'),\r\n            name: Yup.string().trim().required('Name is required'),\r\n            image: Yup.object({ file: Yup.mixed().required('A file is required') }),\r\n            user_type: Yup.string().trim().required('User type is required'),\r\n        })}\r\n      >\r\n        {({ values, errors, touched, handleBlur, handleChange, setFieldValue, submitForm, setFieldTouched, isSubmitting, }) => (\r\n          <>\r\n            <DialogContent dividers>\r\n              <Grid container spacing={2}>\r\n                <Grid item xs={12}>\r\n                  <TextField\r\n                    fullWidth\r\n                    label='Email'\r\n                    name='email'\r\n                    variant='outlined'\r\n                    value={values.email}\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    error={Boolean(touched.email && errors.email)}\r\n                    helperText={touched.email && errors.email}\r\n                  />\r\n                </Grid>\r\n\r\n                <Grid item xs={12}>\r\n                  <TextField\r\n                    fullWidth\r\n                    label='Password'\r\n                    name='password'\r\n                    variant='outlined'\r\n                    type = 'password'\r\n                    value={values.password}\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    error={Boolean(touched.password && errors.password)}\r\n                    helperText={touched.password && errors.password}\r\n                  />\r\n                </Grid>\r\n\r\n                <Grid item xs={12}>\r\n                  <TextField\r\n                    fullWidth\r\n                    label='Name'\r\n                    name='name'\r\n                    variant='outlined'\r\n                    value={values.name}\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    error={Boolean(touched.name && errors.name)}\r\n                    helperText={touched.name && errors.name}\r\n                  />\r\n                </Grid>\r\n\r\n                <Grid item xs={12}>\r\n                  <Autocomplete\r\n                    fullWidth\r\n                    options={AdminRoles}\r\n                    value={AdminRoles.find((data: any) => data.id == values.user_type)}\r\n                    getOptionLabel={(option: any) => option.name}\r\n                    onChange={(event: any, newValue: any) => {\r\n                      setFieldValue('user_type', newValue?.id || '');\r\n                    }}\r\n                    onBlur={handleBlur}\r\n                    renderInput={(params) => (\r\n                      <TextField\r\n                        {...params}\r\n                        label='User Type'\r\n                        name = 'user_type'\r\n                        variant='outlined'\r\n                        error={Boolean(touched.user_type && errors.user_type)}\r\n                        helperText={touched.user_type && errors.user_type}\r\n                        inputProps={{\r\n                          ...params.inputProps,\r\n                        }}\r\n                      />\r\n                    )}\r\n                  />\r\n                </Grid>\r\n\r\n                <Grid item md={12} xs={12}>\r\n                  <input\r\n                    name='image'\r\n                    ref={imageRef}\r\n                    type='file'\r\n                    accept='.jpg,.png,jpeg'\r\n                    onChange={onImageChange}\r\n                    onBlur={handleBlur}\r\n                    hidden\r\n                  />\r\n\r\n                  <Button\r\n                    fullWidth\r\n                    className={classes.themeButton}\r\n                    variant='contained'\r\n                    color='default'\r\n                    onClick={() => imageRef.current.click()}\r\n                    startIcon={<CloudUploadIcon />}\r\n                  >\r\n                    Upload Image\r\n                  </Button>\r\n\r\n                  <FormControl\r\n                    error={Boolean(\r\n                      touched?.image?.file && errors?.image?.file\r\n                    )}\r\n                  >\r\n                    <FormHelperText>\r\n                      {touched?.image?.file &&\r\n                        errors?.image?.file}\r\n                    </FormHelperText>\r\n                  </FormControl>\r\n                </Grid>\r\n\r\n                <Grid item md={12} xs={12}>\r\n                  {values.image?.prevImage && (\r\n                    <img\r\n                      className={classes.imageView}\r\n                      src={values.image?.prevImage}\r\n                    />\r\n                  )}\r\n                </Grid>\r\n\r\n              </Grid>\r\n            </DialogContent>\r\n            <DialogActions>\r\n              <Button onClick={onClose} variant='outlined' color='secondary'>\r\n                Cancel\r\n              </Button>\r\n\r\n              <Button\r\n                className={classes.themeButton}\r\n                onClick={() => submitForm()}\r\n                disabled={isSubmitting}\r\n                variant='outlined'\r\n              >\r\n                {isSubmitting ? (\r\n                  <CircularProgress size={24} style={{ color: 'white' }} />\r\n                ) : (\r\n                  okBtnText\r\n                )}\r\n              </Button>\r\n            </DialogActions>\r\n          </>\r\n        )}\r\n      </Formik>\r\n    </Dialog>\r\n  )\r\n}\r\n\r\nexport const ViewModel = (props: any) => {\r\n  const { isOpen, title, onClose, data, onReload } = props;\r\n  const classes = useStyle();\r\n  const [formValue, setFormValue] = useState(data);\r\n\r\n  console.log(formValue)\r\n\r\n  return (\r\n    <Dialog\r\n      disableBackdropClick\r\n      disableEscapeKeyDown\r\n      fullWidth\r\n      maxWidth='sm'\r\n      aria-labelledby='dialog-view-title'\r\n      open={isOpen}\r\n    >\r\n      <DialogTitle id='dialog-view-title' onClose={onClose}>\r\n        {title}\r\n      </DialogTitle>\r\n\r\n      <DialogContent dividers>\r\n\r\n        <div>\r\n          <img\r\n            src={formValue?.image?.url}\r\n            className={classes.imageView}\r\n          />\r\n        </div>\r\n        <Card>\r\n          <Table>\r\n            <TableBody>\r\n              <TableRow >\r\n                <TableCell>Name</TableCell>\r\n                <TableCell>{formValue?.name}</TableCell>\r\n              </TableRow>\r\n              <TableRow >\r\n                <TableCell>Email</TableCell>\r\n                <TableCell>{formValue?.email}</TableCell>\r\n              </TableRow>\r\n              <TableRow >\r\n                <TableCell>User Type</TableCell>\r\n                <TableCell>{formValue?.user_type}</TableCell>\r\n              </TableRow>\r\n            </TableBody>\r\n          </Table>\r\n        </Card>\r\n      </DialogContent>\r\n\r\n      <DialogActions>\r\n        <Button onClick={onClose} variant='outlined' color='secondary'>\r\n          Close\r\n        </Button>\r\n      </DialogActions>\r\n\r\n    </Dialog>\r\n  )\r\n}\r\n\r\nexport default AdminUser\r\n"],"sourceRoot":""}