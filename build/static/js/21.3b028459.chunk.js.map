{"version":3,"sources":["pages/SkinCareIngredients/SkinCareIngredients.tsx"],"names":["useStyles","makeStyles","theme","root","width","breakpoints","values","lg","maxWidth","margin","padding","spacing","addIcon","marginRight","content","inner","minWidth","actions","justifyContent","tabCard","marginTop","sEvenly","display","iconPadd","jCenter","imageView","height","themeButton","color","palette","white","backgroundColor","green","main","dark","lColor","AddEditDailog","props","isOpen","title","onClose","isEdit","data","onSuccess","okBtnText","initialFormValue","name","description","image","file","prevImage","isNew","classes","formikRef","useRef","imageRef","Snackbar","useSnackbar","Post","useService","useState","initialValue","setInitialValue","onImageChange","e","persist","files","target","length","reader","FileReader","onloadend","current","setFieldValue","result","readAsDataURL","addData","setSubmitting","resetForm","then","res","show","message","catch","err","editData","useEffect","_id","rest","EditData","id","url","disableBackdropClick","disableEscapeKeyDown","fullWidth","aria-labelledby","open","innerRef","enableReinitialize","initialValues","onSubmit","value","helper","a","PostData","uploadNewImage","render","validationSchema","Yup","shape","trim","required","max","notRequired","errors","touched","handleChange","handleBlur","submitForm","isSubmitting","dividers","container","item","md","xs","label","variant","error","Boolean","helperText","onChange","onBlur","multiline","ref","type","accept","hidden","className","onClick","click","startIcon","src","disabled","size","ViewDailog","formValue","setFormValue","SkinCareIngredients","ConfModel","useConfModel","page_no","page_limit","stateData","setStateData","pageCount","setPageCount","dataList","setDataList","loading","setLoading","addEditDialog","setAddEditDialog","viewDialog","setViewDialog","listIngredients","console","log","page_count","closeAddEditDialog","prevState","onSuccessAction","alignItems","justify","component","align","map","index","text","hover","substring","arrow","openViewDialog","openEditDialog","openModel","closeModel","onDelete","count","page","event"],"mappings":"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","file":"static/js/21.3b028459.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport { makeStyles, Avatar, Card, CardActions, CardContent, Dialog, DialogActions, DialogContent, FormControl, FormHelperText, Grid, IconButton, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Tooltip, Typography, TextField, Button, CircularProgress, } from '@material-ui/core';\r\nimport { Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport { Pagination } from '@material-ui/lab';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\r\nimport CenterFocusStrongIcon from '@material-ui/icons/CenterFocusStrong';\r\nimport Page from '../../components/Page/Page';\r\nimport { TableLoader, TableNoData } from '../../components/Loader/Loader';\r\nimport DialogTitle from '../../components/DialogTitlle/DialogTitle';\r\nimport useService from '../../hook/useService';\r\nimport useSnackbar from '../../hook/useSnackbar';\r\nimport useConfModel from '../../hook/useConfModel';\r\nimport { uploadNewImage } from '../../utils/CloudinaryUtils';\r\n\r\nconst useStyles = makeStyles((theme: any) => ({\r\n  root: {\r\n    width: theme.breakpoints.values.lg,\r\n    maxWidth: '100%',\r\n    margin: '0 auto',\r\n    padding: theme.spacing(3),\r\n  },\r\n  addIcon: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n  content: {\r\n    padding: 0,\r\n  },\r\n  inner: {\r\n    minWidth: 700,\r\n  },\r\n  actions: {\r\n    padding: theme.spacing(1),\r\n    justifyContent: 'center',\r\n  },\r\n  tabCard: {\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  sEvenly: {\r\n    display: 'flex',\r\n    justifyContent: 'space-evenly',\r\n  },\r\n  iconPadd: {\r\n    padding: 5,\r\n  },\r\n  jCenter: {\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n  },\r\n  imageView: {\r\n    width: '100%',\r\n    height: '100%',\r\n  },\r\n  themeButton: {\r\n    color: theme.palette.white,\r\n    backgroundColor: theme.palette.green.main,\r\n    '&:hover': {\r\n      backgroundColor: theme.palette.green.dark,\r\n    },\r\n  },\r\n  lColor: {\r\n    color: 'white',\r\n  },\r\n}));\r\n\r\nconst SkinCareIngredients = () => {\r\n  const classes = useStyles();\r\n  const { Post } = useService();\r\n  const Snackbar = useSnackbar();\r\n  const ConfModel = useConfModel();\r\n  const [stateData, setStateData] = useState({ page_no: 1, page_limit: 10 });\r\n  const [pageCount, setPageCount] = useState(0);\r\n  const [dataList, setDataList] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [addEditDialog, setAddEditDialog] = useState({\r\n    isOpen: false,\r\n    title: '',\r\n    okBtnText: '',\r\n    isEdit: false,\r\n    data: {},\r\n  });\r\n  const [viewDialog, setViewDialog] = useState({\r\n    isOpen: false,\r\n    title: '',\r\n    data: {},\r\n  });\r\n\r\n  const listIngredients = async () => {\r\n    setLoading(true);\r\n    Post('app/listSkinCareIngredient', stateData)\r\n      .then((res: any) => {\r\n        console.log('listSkinCareIngredient', res);\r\n        setLoading(false);\r\n        if (!res.error) {\r\n          setDataList(res.data);\r\n          setPageCount(res.page_count);\r\n        } else {\r\n          Snackbar.show(res.message, 'error');\r\n        }\r\n      })\r\n      .catch((err: any) => {\r\n        console.log('err', err);\r\n        setLoading(false);\r\n        Snackbar.show(err.message, 'error');\r\n      });\r\n  };\r\n\r\n  const onPageChange = (event: React.ChangeEvent<unknown>, value: number) => {\r\n    setStateData((prevState: any) => ({ ...prevState, page_no: value }));\r\n  };\r\n\r\n  const setElipsis = (text: any) => {\r\n    return text.length >= 25 ? `${text.substring(0, 40)}...` : text;\r\n  };\r\n\r\n  const openAddDialog = () => {\r\n    setAddEditDialog((prevState: any) => ({\r\n      ...prevState,\r\n      isOpen: true,\r\n      isEdit: false,\r\n      title: 'Add Ingredient',\r\n      okBtnText: 'Save',\r\n    }));\r\n  };\r\n\r\n  const openEditDialog = (data: any) => {\r\n    setAddEditDialog((prevState: any) => ({\r\n      ...prevState,\r\n      isOpen: true,\r\n      isEdit: true,\r\n      data,\r\n      title: 'Edit Ingredient',\r\n      okBtnText: 'Edit',\r\n    }));\r\n  };\r\n\r\n  const openViewDialog = (data: any) => {\r\n    setViewDialog((prevState: any) => ({\r\n      ...prevState,\r\n      isOpen: true,\r\n      data,\r\n      title: 'View Ingredient',\r\n    }));\r\n  };\r\n\r\n  const onDelete = (data: any) => {\r\n    const { openModel, setLoading, closeModel } = ConfModel;\r\n    const submitFunction = () => {\r\n      setLoading(true);\r\n      Post('app/deleteSkinCareIngredient', { id: data._id })\r\n        .then(async (res: any) => {\r\n          setLoading(false);\r\n          closeModel();\r\n          onSuccessAction();\r\n          Snackbar.show(res.message, 'success');\r\n        })\r\n        .catch((err: any) => {\r\n          setLoading(false);\r\n          Snackbar.show('Internal Server Error', 'error');\r\n        });\r\n    };\r\n    openModel(submitFunction);\r\n  };\r\n\r\n  const closeAddEditDialog = () => {\r\n    setAddEditDialog((prevState: any) => ({ ...prevState, isOpen: false }));\r\n  };\r\n\r\n  const closeViewDialog = () => {\r\n    setViewDialog((prevState: any) => ({ ...prevState, isOpen: false }));\r\n  };\r\n\r\n  const onSuccessAction = () => {\r\n    listIngredients();\r\n    closeAddEditDialog();\r\n  };\r\n\r\n  useEffect(() => {\r\n    listIngredients();\r\n  }, [stateData]);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Page title='Ingredients' />\r\n\r\n      {/* =======Header====== */}\r\n      <Grid alignItems='flex-end' container justify='space-between' spacing={3}>\r\n        <Grid item>\r\n          <Typography component='h1' variant='h3'>\r\n            Ingredients\r\n          </Typography>\r\n        </Grid>\r\n        <Grid item>\r\n          <Button\r\n            variant='contained'\r\n            onClick={() => openAddDialog()}\r\n            className={classes.themeButton}\r\n            startIcon={<AddIcon />}\r\n          >\r\n            Add\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      {/* =============Search======== */}\r\n      {/* <Grid container spacing={3}>\r\n        <Grid item>\r\n          <Paper elevation={0}>\r\n            <TextField\r\n              fullWidth\r\n              size='small'\r\n              placeholder='Name'\r\n              variant='outlined'\r\n              name='state'\r\n            />\r\n          </Paper>\r\n        </Grid>\r\n      </Grid> */}\r\n\r\n      {/* ========Table With Pagination========= */}\r\n      <Card className={classes.tabCard}>\r\n        <CardContent className={classes.content}>\r\n          <TableContainer>\r\n            <Table>\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell align='center'>#</TableCell>\r\n                  <TableCell align='center'>Image</TableCell>\r\n                  <TableCell align='center'>Name</TableCell>\r\n                  <TableCell align='center'>Description</TableCell>\r\n                  <TableCell align='center'>Actions</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {!loading &&\r\n                  dataList.map((data: any, index: number) => (\r\n                    <TableRow hover key={index}>\r\n                      <TableCell align='center'>\r\n                        {stateData.page_limit * (stateData.page_no - 1) +\r\n                          index +\r\n                          1}\r\n                      </TableCell>\r\n                      <TableCell align='center'>\r\n                        <div className={classes.jCenter}>\r\n                          <Avatar variant='square' src={data?.image?.url} />\r\n                        </div>\r\n                      </TableCell>\r\n                      <TableCell align='center'>{data?.name}</TableCell>\r\n                      <TableCell align='center'>\r\n                        <Tooltip title={data?.description}>\r\n                          <span>{setElipsis(data?.description)}</span>\r\n                        </Tooltip>\r\n                      </TableCell>\r\n                      <TableCell align='center'>\r\n                        <div className={classes.sEvenly}>\r\n                          <Tooltip title='View' arrow>\r\n                            <IconButton\r\n                              className={classes.iconPadd}\r\n                              onClick={() => openViewDialog(data)}\r\n                            >\r\n                              <CenterFocusStrongIcon color='primary' />\r\n                            </IconButton>\r\n                          </Tooltip>\r\n                          <Tooltip title='Edit' arrow>\r\n                            <IconButton\r\n                              className={classes.iconPadd}\r\n                              onClick={() => openEditDialog(data)}\r\n                            >\r\n                              <EditIcon color='action' />\r\n                            </IconButton>\r\n                          </Tooltip>\r\n                          <Tooltip title='Delete' arrow>\r\n                            <IconButton\r\n                              className={classes.iconPadd}\r\n                              onClick={() => onDelete(data)}\r\n                            >\r\n                              <DeleteIcon color='secondary' />\r\n                            </IconButton>\r\n                          </Tooltip>\r\n                        </div>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n                {loading && <TableLoader />}\r\n                {!loading && dataList.length == 0 && (\r\n                  <TableNoData>No Data Found</TableNoData>\r\n                )}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n        </CardContent>\r\n\r\n        <CardActions className={classes.actions}>\r\n          <Pagination\r\n            count={pageCount}\r\n            page={stateData.page_no}\r\n            onChange={onPageChange}\r\n          />\r\n        </CardActions>\r\n      </Card>\r\n\r\n      {/* ============Add Edit Dialog========== */}\r\n      <AddEditDailog\r\n        {...addEditDialog}\r\n        onClose={closeAddEditDialog}\r\n        onSuccess={onSuccessAction}\r\n      />\r\n\r\n      {/* ============View Dialog========== */}\r\n      <ViewDailog {...viewDialog} onClose={closeViewDialog} />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst AddEditDailog = (props: any) => {\r\n  const {\r\n    isOpen,\r\n    title,\r\n    onClose,\r\n    isEdit,\r\n    data,\r\n    onSuccess,\r\n    okBtnText = 'Ok',\r\n  } = props;\r\n  const initialFormValue = {\r\n    name: '',\r\n    description: '',\r\n    image: { file: null, prevImage: '', isNew: null },\r\n  };\r\n\r\n  const classes = useStyles();\r\n  const formikRef = useRef<any>(null);\r\n  const imageRef = useRef<any>(null);\r\n  const Snackbar = useSnackbar();\r\n  const { Post } = useService();\r\n  const [initialValue, setInitialValue] = useState({ ...initialFormValue });\r\n\r\n  const onImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    e.persist();\r\n    const files = e.target.files;\r\n    if (files && files.length != 0) {\r\n      const reader = new FileReader();\r\n      const file = files[0];\r\n      reader.onloadend = () => {\r\n        formikRef.current.setFieldValue('image', {\r\n          file,\r\n          prevImage: reader.result,\r\n          isNew: true,\r\n        });\r\n      };\r\n      reader.readAsDataURL(file);\r\n    } else {\r\n      formikRef.current.setFieldValue('image', {\r\n        file: null,\r\n        prevImage: '',\r\n        isNew: null,\r\n      });\r\n    }\r\n  };\r\n\r\n  const onSubmit = (value: any, helper: any) => {\r\n    try {\r\n      helper.setSubmitting(true);\r\n      const render = async () => {\r\n        const { image, ...rest } = value;\r\n        const PostData = rest;\r\n\r\n        PostData.image = await uploadNewImage(image);\r\n\r\n        !isEdit && addData(PostData, helper);\r\n        isEdit && editData(PostData, helper);\r\n      };\r\n      render();\r\n    } catch (err) {\r\n      Snackbar.show('Image Upload Failed', 'error');\r\n    }\r\n  };\r\n\r\n  const addData = (data: any, { setSubmitting, resetForm }: any) => {\r\n    setSubmitting(true);\r\n    Post('app/addSkinCareIngredient', data)\r\n      .then((res: any) => {\r\n        Snackbar.show(res.message, 'success');\r\n        setSubmitting(false);\r\n        resetForm();\r\n        onSuccess();\r\n      })\r\n      .catch((err: any) => {\r\n        Snackbar.show(err.message, 'error');\r\n      });\r\n  };\r\n\r\n  const editData = (data: any, { setSubmitting, resetForm }: any) => {\r\n    setSubmitting(true);\r\n    Post('app/editSkinCareIngredient', data)\r\n      .then((res: any) => {\r\n        Snackbar.show(res.message, 'success');\r\n        setSubmitting(false);\r\n        resetForm();\r\n        onSuccess();\r\n      })\r\n      .catch((err: any) => {\r\n        Snackbar.show(err.message, 'error');\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isEdit) {\r\n      const { image, _id, ...rest } = data;\r\n      const EditData = { ...rest, id: _id };\r\n      EditData.image = { file: image, prevImage: image?.url, isNew: false };\r\n      setInitialValue(EditData);\r\n    } else {\r\n      setInitialValue(initialFormValue);\r\n    }\r\n  }, [props]);\r\n\r\n  return (\r\n    <Dialog\r\n      disableBackdropClick\r\n      disableEscapeKeyDown\r\n      fullWidth\r\n      maxWidth='md'\r\n      aria-labelledby='dialog-title'\r\n      open={isOpen}\r\n    >\r\n      <DialogTitle id='dialog-title' onClose={onClose}>\r\n        {title}\r\n      </DialogTitle>\r\n\r\n      <Formik\r\n        innerRef={formikRef}\r\n        enableReinitialize\r\n        initialValues={initialValue}\r\n        onSubmit={onSubmit}\r\n        validationSchema={Yup.object().shape({\r\n          name: Yup.string().trim().required('Name is required'),\r\n          description: Yup.string().trim().max(250, 'Must be 250 characters or less').notRequired(),\r\n          image: Yup.object({\r\n            file: Yup.mixed().required('A file is required'),\r\n          }),\r\n        })}\r\n      >\r\n        {({\r\n          values,\r\n          errors,\r\n          touched,\r\n          handleChange,\r\n          handleBlur,\r\n          submitForm,\r\n          isSubmitting,\r\n        }) => (\r\n          <>\r\n            <DialogContent dividers>\r\n              <Grid container spacing={3}>\r\n                <Grid item md={12} xs={12}>\r\n                  <TextField\r\n                    fullWidth\r\n                    label='Name'\r\n                    name='name'\r\n                    variant='outlined'\r\n                    error={Boolean(touched.name && errors.name)}\r\n                    helperText={touched.name && errors.name}\r\n                    value={values.name}\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                  />\r\n                </Grid>\r\n\r\n                <Grid item md={12} xs={12}>\r\n                  <TextField\r\n                    fullWidth\r\n                    multiline\r\n                    label='Description'\r\n                    name='description'\r\n                    variant='outlined'\r\n                    error={Boolean(touched.description && errors.description)}\r\n                    helperText={touched.description && errors.description}\r\n                    value={values.description}\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                  />\r\n                </Grid>\r\n\r\n                <Grid item md={12} xs={12}>\r\n                  <input\r\n                    name='image'\r\n                    ref={imageRef}\r\n                    type='file'\r\n                    accept='.jpg,.png,jpeg'\r\n                    onChange={onImageChange}\r\n                    onBlur={handleBlur}\r\n                    hidden\r\n                  />\r\n                  <Button\r\n                    fullWidth\r\n                    className={classes.themeButton}\r\n                    variant='contained'\r\n                    color='default'\r\n                    onClick={() => imageRef.current.click()}\r\n                    startIcon={<CloudUploadIcon />}\r\n                  >\r\n                    Upload\r\n                  </Button>\r\n                  <FormControl\r\n                    error={Boolean(touched?.image?.file && errors?.image?.file)}\r\n                  >\r\n                    <FormHelperText>\r\n                      {touched?.image?.file && errors?.image?.file}\r\n                    </FormHelperText>\r\n                  </FormControl>\r\n                </Grid>\r\n\r\n                <Grid item md={12} xs={12}>\r\n                  {values.image?.prevImage && (\r\n                    <img\r\n                      className={classes.imageView}\r\n                      src={values.image?.prevImage}\r\n                    />\r\n                  )}\r\n                </Grid>\r\n              </Grid>\r\n            </DialogContent>\r\n\r\n            <DialogActions>\r\n              <Button onClick={onClose} variant='outlined' color='secondary'>\r\n                Cancel\r\n              </Button>\r\n\r\n              <Button\r\n                className={classes.themeButton}\r\n                onClick={() => submitForm()}\r\n                disabled={isSubmitting}\r\n                variant='outlined'\r\n              >\r\n                {isSubmitting ? (\r\n                  <CircularProgress size={24} className={classes.lColor} />\r\n                ) : (\r\n                  okBtnText\r\n                )}\r\n              </Button>\r\n            </DialogActions>\r\n          </>\r\n        )}\r\n      </Formik>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nconst ViewDailog = (props: any) => {\r\n  const { isOpen, title, onClose, data } = props;\r\n  const classes = useStyles();\r\n  const [formValue, setFormValue] = useState(data);\r\n\r\n  useEffect(() => {\r\n    setFormValue(data);\r\n  }, [props]);\r\n\r\n  return (\r\n    <Dialog\r\n      disableBackdropClick\r\n      disableEscapeKeyDown\r\n      fullWidth\r\n      maxWidth='md'\r\n      aria-labelledby='dialog-view-title'\r\n      open={isOpen}\r\n    >\r\n      <DialogTitle id='dialog-view-title' onClose={onClose}>\r\n        {title}\r\n      </DialogTitle>\r\n\r\n      <DialogContent dividers>\r\n        <Grid container spacing={3}>\r\n          <Grid item md={12} xs={12}>\r\n            {formValue?.name}\r\n          </Grid>\r\n          <Grid item md={12} xs={12}>\r\n            {formValue?.description}\r\n          </Grid>\r\n          <Grid item md={12} xs={12}>\r\n            {formValue?.image && (\r\n              <img className={classes.imageView} src={formValue?.image?.url} />\r\n            )}\r\n          </Grid>\r\n        </Grid>\r\n      </DialogContent>\r\n\r\n      <DialogActions>\r\n        <Button onClick={onClose} variant='outlined' color='secondary'>\r\n          Close\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default SkinCareIngredients;\r\n"],"sourceRoot":""}