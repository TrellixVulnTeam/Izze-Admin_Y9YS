{"version":3,"sources":["pages/WorkoutPlan/WorkoutPlan.tsx"],"names":["useStyles","makeStyles","theme","root","width","breakpoints","values","lg","maxWidth","margin","padding","spacing","themeButton","color","palette","white","backgroundColor","green","main","dark","dayPaper","height","display","alignItems","justifyContent","lColor","tabCard","marginTop","content","mTop","jCenter","sEvenly","sBetween","iconPadd","actions","ingredientsAvatarStyle","tabRoot","minWidth","tabIndicator","tabTextColorInherit","border","tabPanelRoot","paddingTop","paddingBottom","listItemRoot","noListItemRoot","paperRoot","ExperienceDrop","id","name","PreferredDrop","InterestsDrop","AddEditDialog","props","isEdit","isOpen","okBtnText","onClose","data","title","onSuccess","classes","Post","useService","Snackbar","useSnackbar","formikRef","useRef","React","useState","workoutList","setWorkoutList","workoutInitalValue","before_workout","workout","after_workout","initialFormValues","experience_level","preferred_workout","interests","workouts","Array","fill","map","d","i","day","initialValue","setInitialValue","addData","setSubmitting","resetForm","then","res","show","message","catch","err","response","editData","useEffect","cloneDeep","_id","rest","CurrentWorkoutIds","filter","includes","console","log","error","open","disableBackdropClick","disableEscapeKeyDown","fullWidth","aria-labelledby","innerRef","enableReinitialize","initialValues","onSubmit","value","helper","validationSchema","Yup","shape","trim","required","nullable","of","errors","touched","handleBlur","handleChange","setFieldValue","submitForm","isSubmitting","dividers","container","item","md","xs","options","find","getOptionLabel","option","getOptionSelected","onChange","event","newValue","onBlur","renderInput","params","label","variant","Boolean","helperText","inputProps","worData","elevation","component","className","align","multiple","workout_name","WorkoutIds","onClick","disabled","size","ViewWorkoutPlan","formValue","setFormValue","setValue","getDropValues","dropValues","indicator","orientation","textColorInherit","toString","WorkoutListItem","length","NoWorkoutListItem","listData","setListData","src","workout_image","url","primary","WorkoutPlan","ConfModel","useConfModel","isLoading","setIsLoading","page_no","page_limit","stateData","setStateData","pageCount","setPageCount","tableData","setTableData","addEditDialog","setAddEditDialog","viewDialog","setViewDialog","listWorkoutPlan","page_count","onSuccessAction","closeAddEditDialog","prevState","justify","startIcon","index","hover","arrow","openViewDialog","openEditDialog","openModel","setLoading","closeModel","a","onDelete","count","page"],"mappings":"goBAuBMA,GAAYC,aAAW,SAACC,GAAD,MAAiB,CAC5CC,KAAM,CACJC,MAAOF,EAAMG,YAAYC,OAAOC,GAChCC,SAAU,OACVC,OAAQ,SACRC,QAASR,EAAMS,QAAQ,IAEzBC,YAAa,CACXC,MAAOX,EAAMY,QAAQC,MACrBC,gBAAiBd,EAAMY,QAAQG,MAAMC,KACrC,UAAW,CACTF,gBAAiBd,EAAMY,QAAQG,MAAME,OAGzCC,SAAU,CACRC,OAAQ,OACRC,QAAS,OACTC,WAAY,SACZC,eAAgB,SAChBR,gBAAiBd,EAAMY,QAAQG,MAAMC,KACrCL,MAAO,SAETY,OAAQ,CACNZ,MAAO,SAETa,QAAS,CACPC,UAAWzB,EAAMS,QAAQ,IAE3BiB,QAAS,CACPlB,QAAS,GAEXmB,KAAM,CACJF,UAAWzB,EAAMS,QAAQ,MAE3BmB,QAAS,CACPR,QAAS,OACTE,eAAgB,UAElBO,QAAS,CACPT,QAAS,OACTE,eAAgB,gBAElBQ,SAAU,CACRV,QAAS,OACTE,eAAgB,iBAElBS,SAAU,CACRvB,QAAS,GAEXwB,QAAS,CACPxB,QAASR,EAAMS,QAAQ,GACvBa,eAAgB,UAElBW,uBAAwB,CACtB/B,MAAOF,EAAMS,QAAQ,IACrBU,OAAQnB,EAAMS,QAAQ,IACtBF,OAAQ,OACRkB,UAAW,QAGbS,QAAS,CACPC,SAAU,IAEZC,aAAc,CACZtB,gBAAiBd,EAAMY,QAAQG,MAAMC,MAEvCqB,oBAAqB,CACnBvB,gBAAiBd,EAAMY,QAAQG,MAAMC,KACrCL,MAAO,QACP2B,OAAQ,mBAEVC,aAAc,CACZC,WAAY,EACZC,cAAe,EACfvC,MAAO,QAETwC,aAAc,CACZ5B,gBAAiB,YACjBP,OAAQ,YAEVoC,eAAgB,CACd7B,gBAAiB,YACjBP,OAAQ,YAEVqC,UAAW,CACTxB,QAAS,YAIPyB,GAAiB,CACrB,CAAEC,GAAI,WAAYC,KAAM,YACxB,CAAED,GAAI,eAAgBC,KAAM,gBAC5B,CAAED,GAAI,eAAgBC,KAAM,iBAGxBC,GAAgB,CACpB,CAAEF,GAAI,WAAYC,KAAM,qBACxB,CAAED,GAAI,OAAQC,KAAM,SAGhBE,GAAgB,CACpB,CAAEH,GAAI,OAAQC,KAAM,gBACpB,CAAED,GAAI,MAAOC,KAAM,gBAoQfG,GAAgB,SAACC,GAErB,IACEC,EAOED,EAPFC,OACAC,EAMEF,EANFE,OAFF,EAQIF,EALFG,iBAHF,MAGc,KAHd,EAIEC,EAIEJ,EAJFI,QACAC,EAGEL,EAHFK,KACAC,EAEEN,EAFFM,MACAC,EACEP,EADFO,UAEIC,EAAU7D,KACR8D,EAASC,eAATD,KACFE,EAAWC,eACXC,EAAYC,iBAAY,MAC9B,EAAsCC,IAAMC,SAAc,IAA1D,mBAAOC,EAAP,KAAoBC,EAApB,KAEMC,EAAqB,CACzBC,eAAgB,GAChBC,QAAS,GACTC,cAAe,IAGXC,EAAiC,CACrCC,iBAAkB,GAClBC,kBAAmB,GACnBC,UAAW,GACXC,SAAUC,MAAM,GAAGC,KAAK,MAAMC,KAAI,SAACC,EAAGC,GAAJ,oBAAaC,IAAKD,EAAI,GAAMb,OAIhE,EAAwCJ,IAAMC,SAAN,eACnCO,IADL,mBAAOW,EAAP,KAAqBC,EAArB,KAwBMC,EAAU,SAAC/B,EAAD,GAAmD,IAArCgC,EAAoC,EAApCA,cAAeC,EAAqB,EAArBA,UAC3CD,GAAc,GACd5B,EAAK,qBAAsBJ,GACxBkC,MAAK,SAACC,GACL7B,EAAS8B,KAAKD,EAAIE,QAAS,WAC3BL,GAAc,GACdC,IACA/B,OAEDoC,OAAM,SAACC,GACN,MAA8CA,EAAIC,SAASxC,KAAnDqC,eAAR,MAAkB,wBAAlB,EACAL,GAAc,GACd1B,EAAS8B,KAAKC,EAAS,aAIvBI,EAAW,SAACzC,EAAD,GAAmD,IAArCgC,EAAoC,EAApCA,cAAeC,EAAqB,EAArBA,UAC5CD,GAAc,GACd5B,EAAK,sBAAuBJ,GACzBkC,MAAK,SAACC,GACL7B,EAAS8B,KAAKD,EAAIE,QAAS,WAC3BL,GAAc,GACdC,IACA/B,OAEDoC,OAAM,SAACC,GACN,MAA8CA,EAAIC,SAASxC,KAAnDqC,eAAR,MAAkB,wBAAlB,EACAL,GAAc,GACd1B,EAAS8B,KAAKC,EAAS,aA0B7B,OAtBAK,qBAAU,WACR,GAAI9C,EAAQ,CACV,MAAmC+C,qBAAU3C,GAArCsB,EAAR,EAAQA,SAAUsB,EAAlB,EAAkBA,IAAQC,EAA1B,kCACMJ,EAAQ,2BAAQI,GAAR,IAAcvD,GAAIsD,IAC1BE,EAAoBlC,EAAYa,KAAI,qBAAGmB,OAC7CH,EAASnB,SAAWA,EAASG,KAAI,SAACzB,GAIhC,OAHAA,EAAKe,eAAiBf,EAAKe,eAAegC,QAAO,gBAAGH,EAAH,EAAGA,IAAH,OAAkBE,EAAkBE,SAASJ,MAAMnB,KAAI,kBAAmB,CAAEnC,GAArB,EAAGsD,QAC3G5C,EAAKgB,QAAUhB,EAAKgB,QAAQ+B,QAAO,gBAAGH,EAAH,EAAGA,IAAH,OAAkBE,EAAkBE,SAASJ,MAAMnB,KAAI,kBAAmB,CAAEnC,GAArB,EAAGsD,QAC7F5C,EAAKiB,cAAgBjB,EAAKiB,cAAc8B,QAAO,gBAAGH,EAAH,EAAGA,IAAH,OAAkBE,EAAkBE,SAASJ,MAAMnB,KAAI,kBAAmB,CAAEnC,GAArB,EAAGsD,QAClG5C,KAETiD,QAAQC,IAAI,WAAYT,GACxBX,EAAgBW,QAEhBX,EAAgBZ,KAEjB,CAACvB,EAAOiB,IAEX8B,qBAAU,WArERtC,EAAK,qBAAsB,IACxB8B,MAAK,SAACM,GACAA,EAASW,MAGZ7C,EAAS8B,KAAKI,EAASH,QAAS,SAFhCxB,EAAe2B,EAASxC,SAK3BsC,OAAM,SAACa,GACN7C,EAAS8B,KAAKe,EAAMd,QAAS,cA8DhC,IAGD,+BACE,gBAAC,IAAD,CACEe,KAAMvD,EACNwD,sBAAoB,EACpBC,sBAAoB,EACpBC,WAAS,EACTzG,SAAS,KACT0G,kBAAgB,eANlB,UAQE,eAAC,IAAD,CAAalE,GAAG,eAAeS,QAASA,EAAxC,SACGE,IAEH,eAAC,IAAD,CACEwD,SAAUjD,EACVkD,oBAAkB,EAClBC,cAAe9B,EACf+B,SA7ES,SAACC,EAAYC,GAC5BA,EAAO9B,eAAc,IACpBpC,GAAUmC,EAAQ8B,EAAOC,GAC1BlE,GAAU6C,EAASoB,EAAOC,IA2EpBC,iBAAkBC,MAAaC,MAAM,CACnC9C,iBAAkB6C,MAAaE,OAAOC,SAAS,gCAC/C/C,kBAAmB4C,MAAaE,OAAOC,SAAS,iCAChD9C,UAAW2C,MAAaE,OAAOE,WAAWD,SAAS,yBACnD7C,SAAU0C,MAAYK,GACpBL,MAAaC,MAAM,CACjBlD,eAAgBiD,MAAYK,GAC1BL,MAAaC,MAAM,CACjB3E,GAAI0E,MAAaE,OAAOC,SAAS,iCAErCnD,QAASgD,MAAYK,GACnBL,MAAaC,MAAM,CACjB3E,GAAI0E,MAAaE,OAAOC,SAAS,0BAErClD,cAAe+C,MAAYK,GACzBL,MAAaC,MAAM,CACjB3E,GAAI0E,MAAaE,OAAOC,SAAS,gCAErCvC,IAAKoC,MAAaE,OAAOC,SAAS,wBAvB1C,SA2BG,gBACCvH,EADD,EACCA,OACA0H,EAFD,EAECA,OACAC,EAHD,EAGCA,QAEAC,GALD,EAICC,aAJD,EAKCD,YACAE,EAND,EAMCA,cACAC,EAPD,EAOCA,WACAC,EARD,EAQCA,aARD,OAUC,uCACE,eAAC,IAAD,CAAeC,UAAQ,EAAvB,SACE,gBAAC,IAAD,CAAMC,WAAS,EAAC7H,QAAS,EAAzB,UACE,eAAC,IAAD,CAAM8H,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAtB,SACE,eAAC,IAAD,CACEC,QAAS7F,GACTwE,MAAOxE,GAAe8F,MAAK,SAACnF,GAAD,OAAeA,EAAKV,IAAM1C,EAAOuE,oBAC5DiE,eAAgB,SAACC,GAAD,OAAiBA,EAAO9F,MACxC+F,kBAAmB,SAACD,GAAD,OAAYA,EAAO/F,IAAM1C,EAAOuE,kBACnDoE,SAAU,SAACC,EAAYC,GACrBf,EAAc,oBAA4B,OAARe,QAAQ,IAARA,OAAA,EAAAA,EAAUnG,KAAM,KAEpDoG,OAAQlB,EACRmB,YAAa,SAACC,GAAD,OACX,eAAC,IAAD,2BACMA,GADN,IAEEC,MAAM,mBACNC,QAAQ,WACR3C,MAAO4C,QAAQxB,EAAQpD,kBAAoBmD,EAAOnD,kBAClD6E,WAAYzB,EAAQpD,kBAAoBmD,EAAOnD,iBAC/C8E,WAAU,eACLL,EAAOK,oBAOpB,eAAC,IAAD,CAAMlB,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAtB,SACE,eAAC,IAAD,CACEC,QAAS1F,GACTqE,MAAOrE,GAAc2F,MAAK,SAACnF,GAAD,OAAeA,EAAKV,IAAM1C,EAAOwE,qBAC3DgE,eAAgB,SAACC,GAAD,OAAiBA,EAAO9F,MACxC+F,kBAAmB,SAACD,GAAD,OAAYA,EAAO/F,IAAM1C,EAAOwE,mBACnDmE,SAAU,SAACC,EAAYC,GACrBf,EAAc,qBAA6B,OAARe,QAAQ,IAARA,OAAA,EAAAA,EAAUnG,KAAM,KAErDoG,OAAQlB,EACRmB,YAAa,SAACC,GAAD,OACX,eAAC,IAAD,2BACMA,GADN,IAEEC,MAAM,oBACNC,QAAQ,WACR3C,MAAO4C,QAAQxB,EAAQnD,mBAAqBkD,EAAOlD,mBACnD4E,WAAYzB,EAAQnD,mBAAqBkD,EAAOlD,kBAChD6E,WAAU,eACLL,EAAOK,oBAMpB,eAAC,IAAD,CAAMlB,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAtB,SACE,eAAC,IAAD,CACEC,QAASzF,GACToE,MAAOpE,GAAc0F,MAAK,SAACnF,GAAD,OAAeA,EAAKV,IAAM1C,EAAOyE,aAC3D+D,eAAgB,SAACC,GAAD,OAAiBA,EAAO9F,MACxC+F,kBAAmB,SAACD,GAAD,OAAYA,EAAO/F,IAAM1C,EAAOyE,WACnDkE,SAAU,SAACC,EAAYC,GACrBf,EAAc,aAAqB,OAARe,QAAQ,IAARA,OAAA,EAAAA,EAAUnG,KAAM,OAE7CoG,OAAQlB,EACRmB,YAAa,SAACC,GAAD,OACX,eAAC,IAAD,2BACMA,GADN,IAEEC,MAAM,YACNC,QAAQ,WACR3C,MAAO4C,QAAQxB,EAAQlD,WAAaiD,EAAOjD,WAC3C2E,WAAYzB,EAAQlD,WAAaiD,EAAOjD,UACxC4E,WAAU,eACLL,EAAOK,oBAMnBrJ,EAAO0E,SAASG,KAAI,SAACyE,EAAcvE,GAClC,OACE,uCACE,eAAC,IAAD,CAAMqD,GAAI,EAAGD,MAAI,EAACE,GAAI,EAAtB,SACE,eAAC,IAAD,CACEkB,UAAW,EACXC,UAAU,MACVC,UAAWlG,EAAQzC,SAHrB,SAKE,eAAC,IAAD,CAAYP,MAAM,UAAUmJ,MAAM,SAAlC,yBAAqDJ,EAAQtE,WAIjE,eAAC,IAAD,CAAMmD,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAtB,SACE,eAAC,IAAD,CACEsB,UAAQ,EACRrB,QAAStE,EACTiD,MAAOjD,EAAYmC,QAAO,SAAC/C,GAAD,OAAekG,EAAQnF,eAAeU,KAAI,qBAAGnC,MAAkB0D,SAAShD,EAAK4C,QACvGwC,eAAgB,SAACC,GAAD,OAAiBA,EAAOmB,cACxCjB,SAAU,SAACC,EAAYC,GACrB,IAAIgB,EAAahB,EAAShE,KAAI,kBAAmB,CAAEnC,GAArB,EAAGsD,QACjC8B,EAAc,YAAD,OAAa/C,EAAb,oBAAkC8E,GAAc,KAE/Df,OAAQlB,EACRmB,YAAa,SAACC,GAAD,OACX,eAAC,IAAD,2BACMA,GADN,IAEEC,MAAM,qBACNC,QAAQ,WACRG,WAAU,eACLL,EAAOK,oBAMpB,eAAC,IAAD,CAAMlB,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAtB,SACE,eAAC,IAAD,CACEsB,UAAQ,EACRrB,QAAStE,EACTiD,MAAOjD,EAAYmC,QAAO,SAAC/C,GAAD,OAAekG,EAAQlF,QAAQS,KAAI,qBAAGnC,MAAkB0D,SAAShD,EAAK4C,QAChGwC,eAAgB,SAACC,GAAD,OAAiBA,EAAOmB,cACxCjB,SAAU,SAACC,EAAYC,GACrB,IAAIgB,EAAahB,EAAShE,KAAI,kBAAmB,CAAEnC,GAArB,EAAGsD,QACjC8B,EAAc,YAAD,OAAa/C,EAAb,aAA2B8E,GAAc,KAExDf,OAAQlB,EACRmB,YAAa,SAACC,GAAD,OACX,eAAC,IAAD,2BACMA,GADN,IAEEC,MAAM,gBACNC,QAAQ,WACRG,WAAU,eACLL,EAAOK,oBAOpB,eAAC,IAAD,CAAMlB,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAtB,SACE,eAAC,IAAD,CACEsB,UAAQ,EACRrB,QAAStE,EACTiD,MAAOjD,EAAYmC,QAAO,SAAC/C,GAAD,OAAekG,EAAQjF,cAAcQ,KAAI,qBAAGnC,MAAkB0D,SAAShD,EAAK4C,QACtGwC,eAAgB,SAACC,GAAD,OAAiBA,EAAOmB,cACxCjB,SAAU,SAACC,EAAYC,GACrB,IAAIgB,EAAahB,EAAShE,KAAI,kBAAmB,CAAEnC,GAArB,EAAGsD,QACjC8B,EAAc,YAAD,OAAa/C,EAAb,mBAAiC8E,GAAc,KAE9Df,OAAQlB,EACRmB,YAAa,SAACC,GAAD,OACX,eAAC,IAAD,2BACMA,GADN,IAEEC,MAAM,wBACNC,QAAQ,WACRG,WAAU,eACLL,EAAOK,+BAY9B,gBAAC,IAAD,WACE,eAAC,IAAD,CAAQS,QAAS3G,EAAS+F,QAAQ,WAAW3I,MAAM,YAAnD,oBAIA,eAAC,IAAD,CACEkJ,UAAWlG,EAAQjD,YACnBwJ,QAAS,kBAAM/B,KACfgC,SAAU/B,EACVkB,QAAQ,WAJV,SAMGlB,EACC,eAAC,IAAD,CAAkBgC,KAAM,GAAIP,UAAWlG,EAAQpC,SAE/C+B,mBAYd+G,GAAkB,SAAClH,GACvB,IAAQE,EAAiCF,EAAjCE,OAAQI,EAAyBN,EAAzBM,MAAOF,EAAkBJ,EAAlBI,QAASC,EAASL,EAATK,KAC1BG,EAAU7D,KAChB,EAAkCqE,mBAASX,GAA3C,mBAAO8G,EAAP,KAAkBC,EAAlB,KAEA,EAA0BrG,IAAMC,SAAS,KAAzC,mBAAOkD,EAAP,KAAcmD,EAAd,KAMMC,EAAgB,SAACC,EAAiBrD,GAAmB,IAAD,EACxD,OAAO,UAAAqD,EAAW/B,MAAK,qBAAG7F,IAAoBuE,YAAvC,eAA+CtE,OAAQ,IAQhE,OALAmD,qBAAU,WACRO,QAAQC,IAAI,YAAalD,GACzB+G,EAAa/G,KACZ,CAACL,IAGF,gBAAC,IAAD,CACE0D,sBAAoB,EACpBC,sBAAoB,EACpBC,WAAS,EACTzG,SAAS,KACT0G,kBAAgB,oBAChBJ,KAAMvD,EANR,UAQE,eAAC,IAAD,CAAaP,GAAG,oBAAoBS,QAASA,EAA7C,SACGE,IAGH,gBAAC,IAAD,CAAe4E,UAAQ,EAAvB,UACE,eAAC,IAAD,UACE,eAAC,IAAD,UACE,gBAAC,IAAD,WACE,gBAAC,IAAD,WACE,eAAC,IAAD,+BACA,eAAC,IAAD,UAAW,kCAASoC,EAAc5H,GAAD,OAAiByH,QAAjB,IAAiBA,OAAjB,EAAiBA,EAAW3F,yBAE/D,gBAAC,IAAD,WACE,eAAC,IAAD,gCACA,eAAC,IAAD,UAAW,kCAAS8F,EAAczH,GAAD,OAAgBsH,QAAhB,IAAgBA,OAAhB,EAAgBA,EAAW1F,0BAE9D,gBAAC,IAAD,WACE,eAAC,IAAD,wBACA,eAAC,IAAD,UAAW,kCAAS6F,EAAcxH,GAAD,OAAgBqH,QAAhB,IAAgBA,OAAhB,EAAgBA,EAAWzF,yBAMpE,eAAC,IAAD,CAAOgF,UAAWlG,EAAQf,UAA1B,SACE,gBAAC,IAAD,CAAYyE,MAAOA,GAAS,GAA5B,UACE,eAAC,IAAD,CACE1D,QAAS,CACPgH,UAAWhH,EAAQvB,cAErB2G,SApDS,SAACC,EAA8BC,GAClDuB,EAASvB,IAoDC2B,YAAY,WACZtB,QAAQ,WANV,gBAQGgB,QARH,IAQGA,OARH,EAQGA,EAAWxF,SAASG,KAAI,SAACsD,GAAD,OACvB,eAAC,IAAD,CACE5E,QAAS,CAAE1D,KAAM0D,EAAQzB,QAAS2I,iBAAkBlH,EAAQtB,qBAC5DgH,MAAK,gBAAWd,EAAKnD,KACrBiC,MAAOkB,EAAKnD,IAAI0F,kBAbxB,OAiBGR,QAjBH,IAiBGA,OAjBH,EAiBGA,EAAWxF,SAASG,KAAI,SAACsD,GAAD,iBACvB,eAAC,IAAD,CAAUsB,UAAWlG,EAAQpB,aAAc8E,MAAOkB,EAAKnD,IAAI0F,WAA3D,SACE,gBAAC,IAAD,WACE,uDADF,OAEGvC,QAFH,IAEGA,OAFH,EAEGA,EAAMhE,eAAeU,KAAI,SAACzB,GAAD,OAAe,eAACuH,GAAD,CAAiBvH,KAAMA,OAC/B,IAA5B,OAAJ+E,QAAI,IAAJA,GAAA,UAAAA,EAAMhE,sBAAN,eAAsByG,SAAe,eAACC,GAAD,IACtC,kDAJF,OAKG1C,QALH,IAKGA,OALH,EAKGA,EAAM/D,QAAQS,KAAI,SAACzB,GAAD,OAAe,eAACuH,GAAD,CAAiBvH,KAAMA,OAC/B,IAArB,OAAJ+E,QAAI,IAAJA,GAAA,UAAAA,EAAM/D,eAAN,eAAewG,SAAe,eAACC,GAAD,IAC/B,0DAPF,OAQG1C,QARH,IAQGA,OARH,EAQGA,EAAM9D,cAAcQ,KAAI,SAACzB,GAAD,OAAe,eAACuH,GAAD,CAAiBvH,KAAMA,OAC/B,IAA3B,OAAJ+E,QAAI,IAAJA,GAAA,UAAAA,EAAM9D,qBAAN,eAAqBuG,SAAe,eAACC,GAAD,oBAQjD,eAAC,IAAD,UACE,eAAC,IAAD,CAAQf,QAAS3G,EAAS+F,QAAQ,WAAW3I,MAAM,YAAnD,yBAQFoK,GAAkB,SAAC5H,GAAgB,IAAD,EAChCQ,EAAU7D,KAChB,EAAgCqE,mBAAShB,EAAMK,MAA/C,mBAAO0H,EAAP,KAAiBC,EAAjB,KAIA,OAHAjF,qBAAU,WACRiF,EAAYhI,EAAMK,QACjB,CAACL,EAAMK,OAER,gBAAC,IAAD,CAAUqG,UAAWlG,EAAQjB,aAA7B,UACE,eAAC,IAAD,UACE,eAAC,IAAD,CAAQ4G,QAAQ,SAAS8B,IAAG,OAAEF,QAAF,IAAEA,GAAF,UAAEA,EAAUG,qBAAZ,aAAE,EAAyBC,QAEzD,eAAC,IAAD,CACEC,QAAO,OAAEL,QAAF,IAAEA,OAAF,EAAEA,EAAUlB,mBAMrBiB,GAAoB,SAAC9H,GACzB,IAAMQ,EAAU7D,KAChB,OACE,eAAC,IAAD,CAAU+J,UAAWlG,EAAQhB,eAA7B,SACE,eAAC,IAAD,CACE4I,QAAS,kBAMFC,UA/tBK,WAClB,IAAM7H,EAAU7D,KACR8D,EAASC,eAATD,KACFE,EAAWC,eACX0H,EAAYC,eAClB,EAAkCxH,IAAMC,UAAS,GAAjD,mBAAOwH,EAAP,KAAkBC,EAAlB,KACA,EAAkC1H,IAAMC,SAAS,CAC/C0H,QAAS,EACTC,WAAY,KAFd,mBAAOC,EAAP,KAAkBC,EAAlB,KAIA,EAAkC9H,IAAMC,SAAS,GAAjD,mBAAO8H,EAAP,KAAkBC,EAAlB,KACA,EAAkChI,IAAMC,SAAS,IAAjD,mBAAOgI,EAAP,KAAkBC,EAAlB,KACA,EAA0ClI,IAAMC,SAAS,CACvDd,QAAQ,EACRI,MAAO,GACPH,UAAW,GACXF,QAAQ,EACRI,KAAM,KALR,mBAAO6I,EAAP,KAAsBC,EAAtB,KAOA,EAAoCnI,mBAAS,CAC3Cd,QAAQ,EACRI,MAAO,GACPD,KAAM,KAHR,mBAAO+I,EAAP,KAAmBC,EAAnB,KAMMC,EAAkB,WACtBb,GAAa,GACbhI,EAAK,sBAAuBmI,GACzBrG,MAAK,SAACC,GACLiG,GAAa,GACRjG,EAAIgB,MAIP7C,EAAS8B,KAAKD,EAAIE,QAAS,UAH3BqG,EAAavG,EAAI+G,YACjBN,EAAazG,EAAInC,UAKpBsC,OAAM,SAACa,GACNiF,GAAa,GACb9H,EAAS8B,KAAKe,EAAMd,QAAS,aAqD7B8G,GAAkB,WACtBF,IACAG,MAGIA,GAAqB,WACzBN,GAAiB,SAACO,GAAD,mBAAC,eAAyBA,GAA1B,IAAqCxJ,QAAQ,QAW1DoH,GAAgB,SAACC,EAAiBrD,GAAmB,IAAD,EACxD,OAAO,UAAAqD,EAAW/B,MAAK,qBAAG7F,IAAoBuE,YAAvC,eAA+CtE,OAAQ,IAOhE,OAJAmD,qBAAU,WACRuG,MACC,CAACV,IAGF,uBAAKlC,UAAWlG,EAAQ1D,KAAxB,UACE,eAAC,KAAD,CAAMwD,MAAM,iBAGZ,gBAAC,IAAD,CAAMpC,WAAW,WAAWiH,WAAS,EAACwE,QAAQ,gBAAgBrM,QAAS,EAAvE,UACE,eAAC,IAAD,CAAM8H,MAAI,EAAV,SACE,eAAC,IAAD,CAAYqB,UAAU,KAAKN,QAAQ,KAAnC,4BAIF,eAAC,IAAD,CAAMf,MAAI,EAAV,SACE,eAAC,IAAD,CACEe,QAAQ,YACRY,QAAS,WAvFjBoC,GAAiB,SAACO,GAAD,mBAAC,eACbA,GADY,IAEfxJ,QAAQ,EACRI,MAAO,mBACPL,QAAQ,EACRE,UAAW,aAmFLuG,UAAWlG,EAAQjD,YACnBqM,UAAW,eAAC,IAAD,IAJb,sBA2BJ,gBAAC,IAAD,CAAMlD,UAAWlG,EAAQnC,QAAzB,UACE,eAAC,IAAD,CAAaqI,UAAWlG,EAAQjC,QAAhC,SACE,eAAC,IAAD,UACE,gBAAC,IAAD,WACE,eAAC,IAAD,UACE,gBAAC,IAAD,WACE,eAAC,IAAD,CAAWoI,MAAM,SAAjB,eACA,eAAC,IAAD,CAAWA,MAAM,SAAjB,8BACA,eAAC,IAAD,CAAWA,MAAM,SAAjB,+BACA,eAAC,IAAD,CAAWA,MAAM,SAAjB,uBACA,eAAC,IAAD,CAAWA,MAAM,SAAjB,0BAGJ,gBAAC,IAAD,YACI6B,GACAQ,EAAUlH,KAAI,SAACzB,EAAWwJ,GACxB,OACE,gBAAC,IAAD,CAAUC,OAAK,EAAf,UACE,eAAC,IAAD,CAAWnD,MAAM,SAAjB,SAA2BiC,EAAUD,YAAcC,EAAUF,QAAU,GAAKmB,EAAQ,IACpF,eAAC,IAAD,CAAWlD,MAAM,SAAjB,SAA2BW,GAAc5H,GAAD,OAAiBW,QAAjB,IAAiBA,OAAjB,EAAiBA,EAAMmB,oBAC/D,eAAC,IAAD,CAAWmF,MAAM,SAAjB,SAA2BW,GAAczH,GAAD,OAAgBQ,QAAhB,IAAgBA,OAAhB,EAAgBA,EAAMoB,qBAC9D,eAAC,IAAD,CAAWkF,MAAM,SAAjB,SAA2BW,GAAcxH,GAAD,OAAgBO,QAAhB,IAAgBA,OAAhB,EAAgBA,EAAMqB,aAC9D,eAAC,IAAD,CAAWiF,MAAM,SAAjB,SACE,uBAAKD,UAAWlG,EAAQ9B,QAAxB,UACE,eAAC,IAAD,CAAS4B,MAAM,OAAOyJ,OAAK,EAA3B,SACE,eAAC,IAAD,CACErD,UAAWlG,EAAQ5B,SACnBmI,QAAS,kBAvHhB,SAAC1G,GACtBgJ,GAAc,SAACK,GAAD,mBAAC,eACVA,GADS,IAEZxJ,QAAQ,EACRG,OACAC,MAAO,yBAkHkC0J,CAAe3J,IAFhC,SAIE,eAAC,IAAD,CAAuB7C,MAAM,gBAGjC,eAAC,IAAD,CAAS8C,MAAM,OAAOyJ,OAAK,EAA3B,SACE,eAAC,IAAD,CACErD,UAAWlG,EAAQ5B,SACnBmI,QAAS,kBA1IhB,SAAC1G,GACtB8I,GAAiB,SAACO,GAAD,mBAAC,eACbA,GADY,IAEfxJ,QAAQ,EACRD,QAAQ,EACRI,OACAC,MAAO,oBACPH,UAAW,YAmI8B8J,CAAe5J,IAFhC,SAIE,eAAC,IAAD,CAAU7C,MAAM,eAGpB,eAAC,IAAD,CAAS8C,MAAM,SAASyJ,OAAK,EAA7B,SACE,eAAC,IAAD,CACErD,UAAWlG,EAAQ5B,SACnBmI,QAAS,kBA9HtB,SAAC1G,GAChB,IAAQ6J,EAAsC5B,EAAtC4B,UAAWC,EAA2B7B,EAA3B6B,WAAYC,EAAe9B,EAAf8B,WAe/BF,GAduB,WACrBC,GAAW,GACX1J,EAAK,wBAAyB,CAAEd,GAAIU,EAAK4C,MACtCV,KADH,uCACQ,WAAOC,GAAP,SAAA6H,EAAA,sDACJF,GAAW,GACXC,IACAZ,KACA7I,EAAS8B,KAAKD,EAAIE,QAAS,WAJvB,2CADR,uDAOGC,OAAM,SAACC,GACNuH,GAAW,GACXxJ,EAAS8B,KAAK,wBAAyB,eAiHF6H,CAASjK,IAF1B,SAIE,eAAC,IAAD,CAAY7C,MAAM,6BAQjCgL,GAAa,eAAC,KAAD,KACZA,GAAiC,GAApBQ,EAAUnB,QACvB,eAAC,KAAD,sCAOV,eAAC,IAAD,CAAanB,UAAWlG,EAAQ3B,QAAhC,SACE,eAAC,IAAD,CACE0L,MAAOzB,EACP0B,KAAM5B,EAAUF,QAChB9C,SArHW,SAACC,EAAmC3B,GACvD2E,GAAa,SAACa,GAAD,mBAAC,eAAyBA,GAA1B,IAAqChB,QAASxE,eA2HzD,eAACnE,GAAD,2BACMmJ,GADN,IAEE9I,QAASqJ,GACTlJ,UAAWiJ,MAEZJ,EAAWlJ,QAAU,eAACgH,GAAD,2BAAqBkC,GAArB,IAAiChJ,QArInC,WACtBiJ,GAAc,SAACK,GAAD,mBAAC,eAAyBA,GAA1B,IAAqCxJ,QAAQ","file":"static/js/21.4b34af4b.chunk.js","sourcesContent":["import { Avatar, Button, Card, CardActions, CardContent, CircularProgress, Dialog, DialogActions, DialogContent, Grid, IconButton, makeStyles, Paper, Tab, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, TextField, Tooltip, Typography } from '@material-ui/core';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport CenterFocusStrongIcon from '@material-ui/icons/CenterFocusStrong';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport { Pagination, TabContext, TabList, TabPanel } from '@material-ui/lab';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport { Formik } from 'formik';\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport * as Yup from 'yup';\r\nimport DialogTitle from '../../components/DialogTitlle/DialogTitle';\r\nimport { TableLoader, TableNoData } from '../../components/Loader/Loader';\r\nimport Page from '../../components/Page/Page';\r\nimport useConfModel from '../../hook/useConfModel';\r\nimport useService from '../../hook/useService';\r\nimport useSnackbar from '../../hook/useSnackbar';\r\nimport { cloneDeep } from 'lodash';\r\n\r\n\r\nconst useStyles = makeStyles((theme: any) => ({\r\n  root: {\r\n    width: theme.breakpoints.values.lg,\r\n    maxWidth: '100%',\r\n    margin: '0 auto',\r\n    padding: theme.spacing(3),\r\n  },\r\n  themeButton: {\r\n    color: theme.palette.white,\r\n    backgroundColor: theme.palette.green.main,\r\n    '&:hover': {\r\n      backgroundColor: theme.palette.green.dark,\r\n    },\r\n  },\r\n  dayPaper: {\r\n    height: '100%',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    backgroundColor: theme.palette.green.main,\r\n    color: 'white',\r\n  },\r\n  lColor: {\r\n    color: 'white',\r\n  },\r\n  tabCard: {\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  content: {\r\n    padding: 0,\r\n  },\r\n  mTop: {\r\n    marginTop: theme.spacing(1.5),\r\n  },\r\n  jCenter: {\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n  },\r\n  sEvenly: {\r\n    display: 'flex',\r\n    justifyContent: 'space-evenly',\r\n  },\r\n  sBetween: {\r\n    display: 'flex',\r\n    justifyContent: 'space-between',\r\n  },\r\n  iconPadd: {\r\n    padding: 5,\r\n  },\r\n  actions: {\r\n    padding: theme.spacing(1),\r\n    justifyContent: 'center',\r\n  },\r\n  ingredientsAvatarStyle: {\r\n    width: theme.spacing(10),\r\n    height: theme.spacing(10),\r\n    margin: 'auto',\r\n    marginTop: '20px',\r\n  },\r\n  //\r\n  tabRoot: {\r\n    minWidth: 72,\r\n  },\r\n  tabIndicator: {\r\n    backgroundColor: theme.palette.green.main,\r\n  },\r\n  tabTextColorInherit: {\r\n    backgroundColor: theme.palette.green.main,\r\n    color: 'white',\r\n    border: '1px solid white'\r\n  },\r\n  tabPanelRoot: {\r\n    paddingTop: 0,\r\n    paddingBottom: 0,\r\n    width: '100%'\r\n  },\r\n  listItemRoot: {\r\n    backgroundColor: '#7ac0af2b',\r\n    margin: '10px 0px'\r\n  },\r\n  noListItemRoot: {\r\n    backgroundColor: '#f500571c',\r\n    margin: '10px 0px'\r\n  },\r\n  paperRoot: {\r\n    display: 'flex'\r\n  },\r\n}));\r\n\r\nconst ExperienceDrop = [\r\n  { id: 'BEGINNER', name: 'Beginner' },\r\n  { id: 'INTERMEDIATE', name: 'Intermediate' },\r\n  { id: 'PROFESSIONAL', name: 'Professional' },\r\n];\r\n\r\nconst PreferredDrop = [\r\n  { id: 'STRENGTH', name: 'Strength Training' },\r\n  { id: 'HIIT', name: 'HIIT' },\r\n];\r\n\r\nconst InterestsDrop = [\r\n  { id: 'HOME', name: 'Home Workout' },\r\n  { id: 'GYM', name: 'Gym Workout' },\r\n];\r\n\r\nconst WorkoutPlan = () => {\r\n  const classes = useStyles();\r\n  const { Post } = useService();\r\n  const Snackbar = useSnackbar();\r\n  const ConfModel = useConfModel();\r\n  const [isLoading, setIsLoading] = React.useState(true);\r\n  const [stateData, setStateData] = React.useState({\r\n    page_no: 1,\r\n    page_limit: 10,\r\n  });\r\n  const [pageCount, setPageCount] = React.useState(0);\r\n  const [tableData, setTableData] = React.useState([]);\r\n  const [addEditDialog, setAddEditDialog] = React.useState({\r\n    isOpen: false,\r\n    title: '',\r\n    okBtnText: '',\r\n    isEdit: false,\r\n    data: {},\r\n  });\r\n  const [viewDialog, setViewDialog] = useState({\r\n    isOpen: false,\r\n    title: '',\r\n    data: {},\r\n  });\r\n\r\n  const listWorkoutPlan = () => {\r\n    setIsLoading(true);\r\n    Post('app/listWorkoutPlan', stateData)\r\n      .then((res: any) => {\r\n        setIsLoading(false);\r\n        if (!res.error) {\r\n          setPageCount(res.page_count);\r\n          setTableData(res.data);\r\n        } else {\r\n          Snackbar.show(res.message, 'error');\r\n        }\r\n      })\r\n      .catch((error: any) => {\r\n        setIsLoading(false);\r\n        Snackbar.show(error.message, 'error');\r\n      });\r\n  };\r\n\r\n  const openAddDialog = () => {\r\n    setAddEditDialog((prevState: any) => ({\r\n      ...prevState,\r\n      isOpen: true,\r\n      title: 'Add Workout Plan',\r\n      isEdit: false,\r\n      okBtnText: 'Save',\r\n    }));\r\n  };\r\n\r\n  const openEditDialog = (data: any) => {\r\n    setAddEditDialog((prevState: any) => ({\r\n      ...prevState,\r\n      isOpen: true,\r\n      isEdit: true,\r\n      data,\r\n      title: 'Edit Workout Plan',\r\n      okBtnText: 'Edit',\r\n    }));\r\n  };\r\n\r\n  const openViewDialog = (data: any) => {\r\n    setViewDialog((prevState: any) => ({\r\n      ...prevState,\r\n      isOpen: true,\r\n      data,\r\n      title: 'View Workout Plan',\r\n    }));\r\n  };\r\n\r\n  const onDelete = (data: any) => {\r\n    const { openModel, setLoading, closeModel } = ConfModel;\r\n    const submitFunction = () => {\r\n      setLoading(true);\r\n      Post('app/deleteWorkoutPlan', { id: data._id })\r\n        .then(async (res: any) => {\r\n          setLoading(false);\r\n          closeModel();\r\n          onSuccessAction();\r\n          Snackbar.show(res.message, 'success');\r\n        })\r\n        .catch((err: any) => {\r\n          setLoading(false);\r\n          Snackbar.show('Internal Server Error', 'error');\r\n        });\r\n    };\r\n    openModel(submitFunction);\r\n  };\r\n\r\n  const onSuccessAction = () => {\r\n    listWorkoutPlan();\r\n    closeAddEditDialog();\r\n  };\r\n\r\n  const closeAddEditDialog = () => {\r\n    setAddEditDialog((prevState: any) => ({ ...prevState, isOpen: false }));\r\n  };\r\n\r\n  const closeViewDialog = () => {\r\n    setViewDialog((prevState: any) => ({ ...prevState, isOpen: false }));\r\n  };\r\n\r\n  const onPageChange = (event: React.ChangeEvent<unknown>, value: number) => {\r\n    setStateData((prevState: any) => ({ ...prevState, page_no: value }));\r\n  };\r\n\r\n  const getDropValues = (dropValues: any, value: string) => {\r\n    return dropValues.find(({ id }: any) => id == value)?.name || ''\r\n  };\r\n\r\n  useEffect(() => {\r\n    listWorkoutPlan();\r\n  }, [stateData]);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Page title='Workout Plan' />\r\n\r\n      {/* =======Header====== */}\r\n      <Grid alignItems='flex-end' container justify='space-between' spacing={3}>\r\n        <Grid item>\r\n          <Typography component='h1' variant='h3'>\r\n            Workout Plan\r\n          </Typography>\r\n        </Grid>\r\n        <Grid item>\r\n          <Button\r\n            variant='contained'\r\n            onClick={() => openAddDialog()}\r\n            className={classes.themeButton}\r\n            startIcon={<AddIcon />}\r\n          >\r\n            Add\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      {/* =============Search======== */}\r\n      {/* <Grid container spacing={3}>\r\n        <Grid item>\r\n          <Paper elevation={0}>\r\n            <TextField\r\n              fullWidth\r\n              size='small'\r\n              placeholder='Name'\r\n              variant='outlined'\r\n              name='state'\r\n            />\r\n          </Paper>\r\n        </Grid>\r\n      </Grid> */}\r\n\r\n      {/* ========Table With Pagination========= */}\r\n      <Card className={classes.tabCard}>\r\n        <CardContent className={classes.content}>\r\n          <TableContainer>\r\n            <Table>\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell align='center'>#</TableCell>\r\n                  <TableCell align='center'>Experience Level</TableCell>\r\n                  <TableCell align='center'>Preferred Workout</TableCell>\r\n                  <TableCell align='center'>Interests</TableCell>\r\n                  <TableCell align='center'>Actions</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {!isLoading &&\r\n                  tableData.map((data: any, index: any) => {\r\n                    return (\r\n                      <TableRow hover>\r\n                        <TableCell align='center'>{stateData.page_limit * (stateData.page_no - 1) + index + 1}</TableCell>\r\n                        <TableCell align='center'>{getDropValues(ExperienceDrop, data?.experience_level)}</TableCell>\r\n                        <TableCell align='center'>{getDropValues(PreferredDrop, data?.preferred_workout)}</TableCell>\r\n                        <TableCell align='center'>{getDropValues(InterestsDrop, data?.interests)}</TableCell>\r\n                        <TableCell align='center'>\r\n                          <div className={classes.sEvenly}>\r\n                            <Tooltip title='View' arrow>\r\n                              <IconButton\r\n                                className={classes.iconPadd}\r\n                                onClick={() => openViewDialog(data)}\r\n                              >\r\n                                <CenterFocusStrongIcon color='primary' />\r\n                              </IconButton>\r\n                            </Tooltip>\r\n                            <Tooltip title='Edit' arrow>\r\n                              <IconButton\r\n                                className={classes.iconPadd}\r\n                                onClick={() => openEditDialog(data)}\r\n                              >\r\n                                <EditIcon color='action' />\r\n                              </IconButton>\r\n                            </Tooltip>\r\n                            <Tooltip title='Delete' arrow>\r\n                              <IconButton\r\n                                className={classes.iconPadd}\r\n                                onClick={() => onDelete(data)}\r\n                              >\r\n                                <DeleteIcon color='secondary' />\r\n                              </IconButton>\r\n                            </Tooltip>\r\n                          </div>\r\n                        </TableCell>\r\n                      </TableRow>\r\n                    );\r\n                  })}\r\n                {isLoading && <TableLoader />}\r\n                {!isLoading && tableData.length == 0 && (\r\n                  <TableNoData>No Data Found</TableNoData>\r\n                )}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n        </CardContent>\r\n\r\n        <CardActions className={classes.actions}>\r\n          <Pagination\r\n            count={pageCount}\r\n            page={stateData.page_no}\r\n            onChange={onPageChange}\r\n          />\r\n        </CardActions>\r\n      </Card>\r\n\r\n      {/* ==========Add & Edit Dialoge======== */}\r\n\r\n      <AddEditDialog\r\n        {...addEditDialog}\r\n        onClose={closeAddEditDialog}\r\n        onSuccess={onSuccessAction}\r\n      />\r\n      {viewDialog.isOpen && <ViewWorkoutPlan {...viewDialog} onClose={closeViewDialog} />}\r\n    </div>\r\n  );\r\n}\r\n\r\ninterface WorkoutMain {\r\n  before_workout: WorkoutSub[];\r\n  workout: WorkoutSub[];\r\n  after_workout: WorkoutSub[];\r\n  day: number;\r\n}\r\n\r\ninterface WorkoutSub {\r\n  id: string;\r\n}\r\n\r\ninterface WorkoutPlan {\r\n  experience_level: string;\r\n  preferred_workout: string;\r\n  interests: string;\r\n  workouts: WorkoutMain[];\r\n}\r\n\r\nconst AddEditDialog = (props: any) => {\r\n\r\n  const {\r\n    isEdit,\r\n    isOpen,\r\n    okBtnText = 'OK',\r\n    onClose,\r\n    data,\r\n    title,\r\n    onSuccess,\r\n  } = props;\r\n  const classes = useStyles();\r\n  const { Post } = useService();\r\n  const Snackbar = useSnackbar();\r\n  const formikRef = useRef<any>(null);\r\n  const [workoutList, setWorkoutList] = React.useState<any>([]);\r\n\r\n  const workoutInitalValue = {\r\n    before_workout: [],\r\n    workout: [],\r\n    after_workout: [],\r\n  }\r\n\r\n  const initialFormValues: WorkoutPlan = {\r\n    experience_level: '',\r\n    preferred_workout: '',\r\n    interests: '',\r\n    workouts: Array(7).fill(null).map((d, i) => ({ day: i + 1, ...workoutInitalValue })),\r\n  };\r\n\r\n\r\n  const [initialValue, setInitialValue] = React.useState({\r\n    ...initialFormValues,\r\n  });\r\n\r\n  const listAllWorkout = () => {\r\n    Post('app/listAllWorkout', {})\r\n      .then((response: any) => {\r\n        if (!response.error) {\r\n          setWorkoutList(response.data);\r\n        } else {\r\n          Snackbar.show(response.message, 'error');\r\n        }\r\n      })\r\n      .catch((error: any) => {\r\n        Snackbar.show(error.message, 'error');\r\n      });\r\n  };\r\n\r\n  const onSubmit = (value: any, helper: any) => {\r\n    helper.setSubmitting(true);\r\n    !isEdit && addData(value, helper);\r\n    isEdit && editData(value, helper);\r\n  };\r\n\r\n  const addData = (data: any, { setSubmitting, resetForm }: any) => {\r\n    setSubmitting(true);\r\n    Post('app/addWorkoutPlan', data)\r\n      .then((res: any) => {\r\n        Snackbar.show(res.message, 'success');\r\n        setSubmitting(false);\r\n        resetForm();\r\n        onSuccess();\r\n      })\r\n      .catch((err: any) => {\r\n        const { message = \"Internal Server Error\" } = err.response.data\r\n        setSubmitting(false);\r\n        Snackbar.show(message, 'error');\r\n      });\r\n  };\r\n\r\n  const editData = (data: any, { setSubmitting, resetForm }: any) => {\r\n    setSubmitting(true);\r\n    Post('app/editWorkoutPlan', data)\r\n      .then((res: any) => {\r\n        Snackbar.show(res.message, 'success');\r\n        setSubmitting(false);\r\n        resetForm();\r\n        onSuccess();\r\n      })\r\n      .catch((err: any) => {\r\n        const { message = \"Internal Server Error\" } = err.response.data\r\n        setSubmitting(false);\r\n        Snackbar.show(message, 'error');\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isEdit) {\r\n      const { workouts, _id, ...rest } = cloneDeep(data);\r\n      const editData = { ...rest, id: _id };\r\n      const CurrentWorkoutIds = workoutList.map(({ _id }: any) => _id)\r\n      editData.workouts = workouts.map((data: any) => {\r\n        data.before_workout = data.before_workout.filter(({ _id }: any) => CurrentWorkoutIds.includes(_id)).map(({ _id }: any) => ({ id: _id }));\r\n        data.workout = data.workout.filter(({ _id }: any) => CurrentWorkoutIds.includes(_id)).map(({ _id }: any) => ({ id: _id }));\r\n        data.after_workout = data.after_workout.filter(({ _id }: any) => CurrentWorkoutIds.includes(_id)).map(({ _id }: any) => ({ id: _id }));\r\n        return data;\r\n      });\r\n      console.log('editData', editData)\r\n      setInitialValue(editData);\r\n    } else {\r\n      setInitialValue(initialFormValues);\r\n    }\r\n  }, [props, workoutList]);\r\n\r\n  useEffect(() => {\r\n    listAllWorkout();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <Dialog\r\n        open={isOpen}\r\n        disableBackdropClick\r\n        disableEscapeKeyDown\r\n        fullWidth\r\n        maxWidth='lg'\r\n        aria-labelledby='dialog-title'\r\n      >\r\n        <DialogTitle id='dialog-title' onClose={onClose}>\r\n          {title}\r\n        </DialogTitle>\r\n        <Formik\r\n          innerRef={formikRef}\r\n          enableReinitialize\r\n          initialValues={initialValue}\r\n          onSubmit={onSubmit}\r\n          validationSchema={Yup.object().shape({\r\n            experience_level: Yup.string().trim().required('Experience Level is required'),\r\n            preferred_workout: Yup.string().trim().required('Preferred Workout is required'),\r\n            interests: Yup.string().trim().nullable().required('Interests is required'),\r\n            workouts: Yup.array().of(\r\n              Yup.object().shape({\r\n                before_workout: Yup.array().of(\r\n                  Yup.object().shape({\r\n                    id: Yup.string().trim().required('Before Workout is Required'),\r\n                  })),\r\n                workout: Yup.array().of(\r\n                  Yup.object().shape({\r\n                    id: Yup.string().trim().required('Workout is Required'),\r\n                  })),\r\n                after_workout: Yup.array().of(\r\n                  Yup.object().shape({\r\n                    id: Yup.string().trim().required('After Workout is Required'),\r\n                  })),\r\n                day: Yup.string().trim().required('Day is Required'),\r\n              }))\r\n          })}\r\n        >\r\n          {({\r\n            values,\r\n            errors,\r\n            touched,\r\n            handleChange,\r\n            handleBlur,\r\n            setFieldValue,\r\n            submitForm,\r\n            isSubmitting,\r\n          }) => (\r\n            <>\r\n              <DialogContent dividers>\r\n                <Grid container spacing={2}>\r\n                  <Grid item md={4} xs={4}>\r\n                    <Autocomplete\r\n                      options={ExperienceDrop}\r\n                      value={ExperienceDrop.find((data: any) => data.id == values.experience_level)}\r\n                      getOptionLabel={(option: any) => option.name}\r\n                      getOptionSelected={(option) => option.id == values.experience_level}\r\n                      onChange={(event: any, newValue: any) => {\r\n                        setFieldValue('experience_level', newValue?.id || '');\r\n                      }}\r\n                      onBlur={handleBlur}\r\n                      renderInput={(params: any) => (\r\n                        <TextField\r\n                          {...params}\r\n                          label='Experience Level'\r\n                          variant='outlined'\r\n                          error={Boolean(touched.experience_level && errors.experience_level)}\r\n                          helperText={touched.experience_level && errors.experience_level}\r\n                          inputProps={{\r\n                            ...params.inputProps,\r\n                          }}\r\n                        />\r\n                      )}\r\n                    />\r\n                  </Grid>\r\n\r\n                  <Grid item md={4} xs={4}>\r\n                    <Autocomplete\r\n                      options={PreferredDrop}\r\n                      value={PreferredDrop.find((data: any) => data.id == values.preferred_workout)}\r\n                      getOptionLabel={(option: any) => option.name}\r\n                      getOptionSelected={(option) => option.id == values.preferred_workout}\r\n                      onChange={(event: any, newValue: any) => {\r\n                        setFieldValue('preferred_workout', newValue?.id || '');\r\n                      }}\r\n                      onBlur={handleBlur}\r\n                      renderInput={(params: any) => (\r\n                        <TextField\r\n                          {...params}\r\n                          label='Preferred Workout'\r\n                          variant='outlined'\r\n                          error={Boolean(touched.preferred_workout && errors.preferred_workout)}\r\n                          helperText={touched.preferred_workout && errors.preferred_workout}\r\n                          inputProps={{\r\n                            ...params.inputProps,\r\n                          }}\r\n                        />\r\n                      )}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item md={4} xs={4}>\r\n                    <Autocomplete\r\n                      options={InterestsDrop}\r\n                      value={InterestsDrop.find((data: any) => data.id == values.interests)}\r\n                      getOptionLabel={(option: any) => option.name}\r\n                      getOptionSelected={(option) => option.id == values.interests}\r\n                      onChange={(event: any, newValue: any) => {\r\n                        setFieldValue('interests', newValue?.id || null);\r\n                      }}\r\n                      onBlur={handleBlur}\r\n                      renderInput={(params: any) => (\r\n                        <TextField\r\n                          {...params}\r\n                          label='Interests'\r\n                          variant='outlined'\r\n                          error={Boolean(touched.interests && errors.interests)}\r\n                          helperText={touched.interests && errors.interests}\r\n                          inputProps={{\r\n                            ...params.inputProps,\r\n                          }}\r\n                        />\r\n                      )}\r\n                    />\r\n                  </Grid>\r\n                  {values.workouts.map((worData: any, i: any) => {\r\n                    return (\r\n                      <>\r\n                        <Grid md={1} item xs={1}>\r\n                          <Paper\r\n                            elevation={0}\r\n                            component='div'\r\n                            className={classes.dayPaper}\r\n                          >\r\n                            <Typography color='inherit' align='center'>{`Day - ${worData.day}`}</Typography>\r\n                          </Paper>\r\n                        </Grid>\r\n\r\n                        <Grid item md={3} xs={3}>\r\n                          <Autocomplete\r\n                            multiple\r\n                            options={workoutList}\r\n                            value={workoutList.filter((data: any) => worData.before_workout.map(({ id }: any) => id).includes(data._id))}\r\n                            getOptionLabel={(option: any) => option.workout_name}\r\n                            onChange={(event: any, newValue: any) => {\r\n                              let WorkoutIds = newValue.map(({ _id }: any) => ({ id: _id }))\r\n                              setFieldValue(`workouts[${i}].before_workout`, WorkoutIds || []);\r\n                            }}\r\n                            onBlur={handleBlur}\r\n                            renderInput={(params: any) => (\r\n                              <TextField\r\n                                {...params}\r\n                                label='Pre Workout Warmup'\r\n                                variant='outlined'\r\n                                inputProps={{\r\n                                  ...params.inputProps,\r\n                                }}\r\n                              />\r\n                            )}\r\n                          />\r\n                        </Grid>\r\n                        <Grid item md={4} xs={4}>\r\n                          <Autocomplete\r\n                            multiple\r\n                            options={workoutList}\r\n                            value={workoutList.filter((data: any) => worData.workout.map(({ id }: any) => id).includes(data._id))}\r\n                            getOptionLabel={(option: any) => option.workout_name}\r\n                            onChange={(event: any, newValue: any) => {\r\n                              let WorkoutIds = newValue.map(({ _id }: any) => ({ id: _id }))\r\n                              setFieldValue(`workouts[${i}].workout`, WorkoutIds || []);\r\n                            }}\r\n                            onBlur={handleBlur}\r\n                            renderInput={(params: any) => (\r\n                              <TextField\r\n                                {...params}\r\n                                label='Core Exercise'\r\n                                variant='outlined'\r\n                                inputProps={{\r\n                                  ...params.inputProps,\r\n                                }}\r\n                              />\r\n                            )}\r\n                          />\r\n                        </Grid>\r\n\r\n                        <Grid item md={4} xs={4}>\r\n                          <Autocomplete\r\n                            multiple\r\n                            options={workoutList}\r\n                            value={workoutList.filter((data: any) => worData.after_workout.map(({ id }: any) => id).includes(data._id))}\r\n                            getOptionLabel={(option: any) => option.workout_name}\r\n                            onChange={(event: any, newValue: any) => {\r\n                              let WorkoutIds = newValue.map(({ _id }: any) => ({ id: _id }))\r\n                              setFieldValue(`workouts[${i}].after_workout`, WorkoutIds || []);\r\n                            }}\r\n                            onBlur={handleBlur}\r\n                            renderInput={(params: any) => (\r\n                              <TextField\r\n                                {...params}\r\n                                label='Post Workout Cooldown'\r\n                                variant='outlined'\r\n                                inputProps={{\r\n                                  ...params.inputProps,\r\n                                }}\r\n                              />\r\n                            )}\r\n                          />\r\n                        </Grid>\r\n                      </>\r\n                    );\r\n                  })}\r\n                </Grid>\r\n              </DialogContent>\r\n\r\n              <DialogActions>\r\n                <Button onClick={onClose} variant='outlined' color='secondary'>\r\n                  Cancel\r\n                </Button>\r\n\r\n                <Button\r\n                  className={classes.themeButton}\r\n                  onClick={() => submitForm()}\r\n                  disabled={isSubmitting}\r\n                  variant='outlined'\r\n                >\r\n                  {isSubmitting ? (\r\n                    <CircularProgress size={24} className={classes.lColor} />\r\n                  ) : (\r\n                    okBtnText\r\n                  )}\r\n                </Button>\r\n              </DialogActions>\r\n            </>\r\n          )}\r\n        </Formik>\r\n      </Dialog>\r\n    </div >\r\n  );\r\n};\r\n\r\nconst ViewWorkoutPlan = (props: any) => {\r\n  const { isOpen, title, onClose, data } = props;\r\n  const classes = useStyles();\r\n  const [formValue, setFormValue] = useState(data);\r\n\r\n  const [value, setValue] = React.useState('1');\r\n\r\n  const handleChange = (event: React.ChangeEvent<{}>, newValue: string) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  const getDropValues = (dropValues: any, value: string) => {\r\n    return dropValues.find(({ id }: any) => id == value)?.name || ''\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log('view data', data)\r\n    setFormValue(data);\r\n  }, [props]);\r\n\r\n  return (\r\n    <Dialog\r\n      disableBackdropClick\r\n      disableEscapeKeyDown\r\n      fullWidth\r\n      maxWidth='md'\r\n      aria-labelledby='dialog-view-title'\r\n      open={isOpen}\r\n    >\r\n      <DialogTitle id='dialog-view-title' onClose={onClose}>\r\n        {title}\r\n      </DialogTitle>\r\n\r\n      <DialogContent dividers>\r\n        <Paper >\r\n          <Table>\r\n            <TableBody>\r\n              <TableRow >\r\n                <TableCell>Experience Level</TableCell>\r\n                <TableCell><strong>{getDropValues(ExperienceDrop, formValue?.experience_level)}</strong></TableCell>\r\n              </TableRow>\r\n              <TableRow>\r\n                <TableCell>Preferred Workout</TableCell>\r\n                <TableCell><strong>{getDropValues(PreferredDrop, formValue?.preferred_workout)}</strong></TableCell>\r\n              </TableRow>\r\n              <TableRow >\r\n                <TableCell>Interests</TableCell>\r\n                <TableCell><strong>{getDropValues(InterestsDrop, formValue?.interests)}</strong></TableCell>\r\n              </TableRow>\r\n            </TableBody>\r\n          </Table>\r\n        </Paper>\r\n\r\n        <Paper className={classes.paperRoot}>\r\n          <TabContext value={value || ''}>\r\n            <TabList\r\n              classes={{\r\n                indicator: classes.tabIndicator\r\n              }}\r\n              onChange={handleChange}\r\n              orientation=\"vertical\"\r\n              variant=\"standard\"\r\n            >\r\n              {formValue?.workouts.map((item: any) =>\r\n                <Tab\r\n                  classes={{ root: classes.tabRoot, textColorInherit: classes.tabTextColorInherit }}\r\n                  label={`Day - ${item.day}`}\r\n                  value={item.day.toString()} />\r\n              )}\r\n            </TabList>\r\n\r\n            {formValue?.workouts.map((item: any) =>\r\n              <TabPanel className={classes.tabPanelRoot} value={item.day.toString()}>\r\n                <List>\r\n                  <div>Pre-Workout Warm Up</div>\r\n                  {item?.before_workout.map((data: any) => <WorkoutListItem data={data} />)}\r\n                  {item?.before_workout?.length == 0 && <NoWorkoutListItem />}\r\n                  <div>Core Exercises</div>\r\n                  {item?.workout.map((data: any) => <WorkoutListItem data={data} />)}\r\n                  {item?.workout?.length == 0 && <NoWorkoutListItem />}\r\n                  <div>Post-Workout Cool Down</div>\r\n                  {item?.after_workout.map((data: any) => <WorkoutListItem data={data} />)}\r\n                  {item?.after_workout?.length == 0 && <NoWorkoutListItem />}\r\n                </List>\r\n              </TabPanel>)}\r\n          </TabContext>\r\n        </Paper>\r\n\r\n      </DialogContent>\r\n\r\n      <DialogActions>\r\n        <Button onClick={onClose} variant='outlined' color='secondary'>\r\n          Close\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nconst WorkoutListItem = (props: any) => {\r\n  const classes = useStyles()\r\n  const [listData, setListData] = useState(props.data)\r\n  useEffect(() => {\r\n    setListData(props.data)\r\n  }, [props.data])\r\n  return (\r\n    <ListItem className={classes.listItemRoot}>\r\n      <ListItemAvatar>\r\n        <Avatar variant='square' src={listData?.workout_image?.url} />\r\n      </ListItemAvatar>\r\n      <ListItemText\r\n        primary={listData?.workout_name}\r\n      />\r\n    </ListItem>\r\n  )\r\n}\r\n\r\nconst NoWorkoutListItem = (props: any) => {\r\n  const classes = useStyles()\r\n  return (\r\n    <ListItem className={classes.noListItemRoot}>\r\n      <ListItemText\r\n        primary={'No Workout'}\r\n      />\r\n    </ListItem>\r\n  )\r\n}\r\n\r\nexport default WorkoutPlan;\r\n"],"sourceRoot":""}