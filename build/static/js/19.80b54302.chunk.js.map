{"version":3,"sources":["pages/AdminProfileDetails/AdminProfileDetails.tsx"],"names":["useStyle","makeStyles","theme","root","width","breakpoints","values","lg","height","maxWidth","margin","padding","spacing","paperStyle","insidePaperDivStyle","display","flexDirection","justifyContent","alignItems","themeButton","color","palette","white","backgroundColor","green","main","dark","avatarStyle","lColor","initialEditValues","name","image","file","prevImage","isNew","EditProfile","props","data","onRefresh","classes","formikRef","React","useRef","imageRef","Post","useService","Snackbar","useSnackbar","useState","isEdit","setIsEdit","isOpen","setIsOpen","initialFormValues","setInitialFormValues","useEffect","_id","rest","editData","id","url","console","log","onClose","onImageChange","e","persist","files","target","length","reader","FileReader","onloadend","current","setFieldValue","result","readAsDataURL","onSubmit","value","helper","a","postData","uploadNewImage","editProfile","setSubmitting","resetForm","then","res","show","message","catch","err","size","onClick","className","fontSize","open","disableBackdropClick","disableEscapeKeyDown","fullWidth","aria-labelledby","innerRef","enableReinitialize","initialValues","validationSchema","Yup","shape","required","errors","touched","handleChange","handleBlur","submitForm","isSubmitting","dividers","container","item","xs","ref","type","accept","onChange","onBlur","hidden","style","click","src","alt","variant","label","error","Boolean","helperText","disabled","password","confirmPassword","ChangePassword","changePasswordData","oneOf","AdminProfileDetails","profileData","setProfileData","isLoading","setIsLoading","getProfileDetails","title","md","align","email","user_type"],"mappings":"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","file":"static/js/19.80b54302.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Grid, Button, Paper, makeStyles, Avatar, Table, TableBody, TableCell, TableRow, IconButton, Dialog, DialogActions, DialogContent, TextField, List, ListItem, ListItemAvatar, ListItemText, Typography, } from '@material-ui/core'\r\nimport Page from '../../components/Page/Page';\r\nimport useService from '../../hook/useService';\r\nimport useSnackbar from '../../hook/useSnackbar';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport DialogTitle from '../../components/DialogTitlle/DialogTitle';\r\nimport { Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { uploadNewImage } from '../../utils/CloudinaryUtils';\r\n\r\nconst useStyle = makeStyles((theme: any) => ({\r\n  root: {\r\n    width: theme.breakpoints.values.lg,\r\n    height: '100%',\r\n    maxWidth: '100%',\r\n    margin: '0 auto',\r\n    padding: theme.spacing(3),\r\n  },\r\n  paperStyle: {\r\n    padding: theme.spacing(8, 8)\r\n  },\r\n  insidePaperDivStyle: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    justifyContent: 'center',\r\n    margin: 'auto',\r\n    alignItems: 'center',\r\n    height: '100%'\r\n  },\r\n  themeButton: {\r\n    color: theme.palette.white,\r\n    // textTransform: 'capitalize',\r\n    backgroundColor: theme.palette.green.main,\r\n    '&:hover': {\r\n      backgroundColor: theme.palette.green.dark,\r\n    },\r\n  },\r\n  avatarStyle: {\r\n    width: '150px',\r\n    height: '150px'\r\n  },\r\n  lColor: {\r\n    color: theme.palette.green.main,\r\n  }\r\n\r\n}));\r\n\r\nconst AdminProfileDetails = () => {\r\n  const classes = useStyle();\r\n  const { Post } = useService();\r\n  const Snackbar = useSnackbar();\r\n  const [profileData, setProfileData] = React.useState<any>('');\r\n  const [isLoading, setIsLoading] = React.useState(true)\r\n\r\n\r\n  const getProfileDetails = () => {\r\n    setIsLoading(true);\r\n    Post('app/getAdminUser', {})\r\n      .then((res: any) => {\r\n        setIsLoading(false);\r\n        if (!res.error) {\r\n          setProfileData(res.data);\r\n        } else {\r\n          Snackbar.show(res.message, 'error');\r\n        }\r\n      })\r\n      .catch((err: any) => {\r\n        console.log('err', err);\r\n        setIsLoading(false);\r\n        Snackbar.show(err.message, 'error');\r\n      });\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    getProfileDetails()\r\n  }, [])\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Page title='Admin Profile' />\r\n      <Grid container >\r\n        <Grid  xs md item />\r\n        <Grid item xs={12} md={8}>\r\n          <Paper className={classes.paperStyle}>\r\n            {!isLoading && (\r\n              <div className={classes.insidePaperDivStyle}>\r\n                <Avatar className={classes.avatarStyle} src={profileData?.image?.url} alt={profileData?.name} variant='square' />\r\n                <Table >\r\n                  <TableBody>\r\n                    <TableRow >\r\n                      <TableCell align='left'>Name</TableCell>\r\n                      <TableCell align='center'>{profileData?.name}</TableCell>\r\n                      <TableCell align='right'><EditProfile data={profileData} onRefresh={getProfileDetails} /></TableCell>\r\n                    </TableRow>\r\n                    <TableRow >\r\n                      <TableCell align='left'>Email</TableCell>\r\n                      <TableCell align='center'>{profileData?.email}</TableCell>\r\n                      <TableCell align='right'></TableCell>\r\n                    </TableRow>\r\n                    <TableRow >\r\n                      <TableCell align='left'>Admin Type</TableCell>\r\n                      <TableCell align='center'>{profileData?.user_type}</TableCell>\r\n                      <TableCell align='right'></TableCell>\r\n                    </TableRow>\r\n                    <TableRow >\r\n                      <TableCell align='left'>Password</TableCell>\r\n                      <TableCell align='center'>**********</TableCell>\r\n                      <TableCell align='right'><ChangePassword onRefresh={getProfileDetails} /></TableCell>\r\n                    </TableRow>\r\n                  </TableBody>\r\n                </Table>\r\n              </div>\r\n            )}\r\n\r\n            {isLoading && <div className={classes.insidePaperDivStyle}><CircularProgress className={classes.lColor} /></div>}\r\n\r\n          </Paper>\r\n        </Grid>\r\n        <Grid xs md item />\r\n      </Grid>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nconst initialEditValues = {\r\n  name: '',\r\n  image: { file: null, prevImage: '', isNew: null },\r\n}\r\n\r\nexport const EditProfile = (props: any) => {\r\n  const { data, onRefresh } = props;\r\n  const classes = useStyle();\r\n  const formikRef = React.useRef<any>(null);\r\n  const imageRef = React.useRef<any>(null);\r\n  const { Post } = useService();\r\n  const Snackbar = useSnackbar();\r\n  const [isEdit, setIsEdit] = React.useState(false)\r\n  const [isOpen, setIsOpen] = React.useState(false);\r\n  const [initialFormValues, setInitialFormValues] = React.useState({ ...initialEditValues });\r\n\r\n  React.useEffect(() => {\r\n    if (isEdit) {\r\n      const { image, _id, ...rest } = data;\r\n      const editData = { ...rest, id: _id }\r\n      editData.image = {\r\n        file: image,\r\n        prevImage: image?.url,\r\n        isNew: false,\r\n      }\r\n      console.log(editData)\r\n      setInitialFormValues(editData)\r\n    }\r\n    else {\r\n      setInitialFormValues(initialEditValues)\r\n    }\r\n  }, [props, isEdit])\r\n\r\n  const editProfileModel = () => {\r\n    setIsOpen(!isOpen);\r\n    setIsEdit(true)\r\n  }\r\n\r\n  const onClose = () => {\r\n    setIsOpen(!isOpen);\r\n  }\r\n\r\n  const onImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    e.persist();\r\n    const files = e.target.files;\r\n    if (files && files.length != 0) {\r\n      const reader = new FileReader();\r\n      const file = files[0];\r\n      reader.onloadend = () => {\r\n        formikRef.current.setFieldValue('image', {\r\n          file,\r\n          prevImage: reader.result,\r\n          isNew: true\r\n        });\r\n      };\r\n      reader.readAsDataURL(file);\r\n    } else {\r\n      formikRef.current.setFieldValue('image', {\r\n        file: null,\r\n        prevImage: '',\r\n        isNew: null\r\n      });\r\n    }\r\n  };\r\n\r\n  const onSubmit = async (value: any, helper: any) => {\r\n    const { name, image } = value;\r\n    const postData: any = {};\r\n    postData.name = name;\r\n    postData.image = await uploadNewImage(image);\r\n    editProfile(postData, helper)\r\n  }\r\n\r\n  const editProfile = (data: any, { setSubmitting, resetForm }: any) => {\r\n    Post('app/updateAdminDetails', data)\r\n      .then((res: any) => {\r\n        Snackbar.show(res.message, 'success');\r\n        setSubmitting(false);\r\n        resetForm();\r\n        onClose();\r\n        onRefresh();\r\n      })\r\n      .catch((err: any) => {\r\n        Snackbar.show(err.message, 'error');\r\n      });\r\n  }\r\n\r\n\r\n  return (\r\n    <>\r\n      <IconButton size='small' onClick={editProfileModel} className={classes.themeButton}><EditIcon fontSize='small' /></IconButton>\r\n      <Dialog open={isOpen} disableBackdropClick disableEscapeKeyDown fullWidth maxWidth='sm' aria-labelledby='dialog-title'>\r\n        <DialogTitle id='dialog-title' onClose={onClose}>\r\n          Edit Profile\r\n        </DialogTitle>\r\n\r\n        <Formik\r\n          innerRef={formikRef}\r\n          enableReinitialize\r\n          initialValues={initialFormValues}\r\n          validationSchema={Yup.object().shape({\r\n            name: Yup.string().required('Name is required'),\r\n            image: Yup.object({ file: Yup.mixed().required('A file is required') })\r\n          })}\r\n          onSubmit={onSubmit}\r\n        >\r\n          {({ values, errors, touched, handleChange, handleBlur, setFieldValue, submitForm, isSubmitting }) => (\r\n            <>\r\n              <DialogContent dividers>\r\n                <Grid container spacing={2}>\r\n                  <Grid item xs={12}>\r\n                    <input\r\n                      name='recipe_image'\r\n                      ref={imageRef}\r\n                      type='file'\r\n                      accept='.jpg,.png,jpeg'\r\n                      onChange={onImageChange}\r\n                      onBlur={handleBlur}\r\n                      hidden\r\n                    />\r\n                    <div style={{ display: 'flex', justifyContent: 'center' }}>\r\n                      <Avatar onClick={() => imageRef.current.click()} className={classes.avatarStyle} src={values?.image?.prevImage} alt={'profilePic'} variant='square' />\r\n                    </div>\r\n                  </Grid>\r\n                  <Grid item xs={12}>\r\n                    <TextField\r\n                      fullWidth\r\n                      label='Name'\r\n                      variant='outlined'\r\n                      name='name'\r\n                      value={values.name}\r\n                      onBlur={handleBlur}\r\n                      onChange={handleChange}\r\n                      error={Boolean(touched.name && errors.name)}\r\n                      helperText={touched.name && errors.name}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </DialogContent>\r\n\r\n              <DialogActions>\r\n                <Button onClick={onClose} variant='outlined' color='secondary'>\r\n                  Cancel\r\n                </Button>\r\n                <Button\r\n                  className={classes.themeButton}\r\n                  onClick={() => submitForm()}\r\n                  disabled={isSubmitting}\r\n                  variant='outlined'\r\n                >\r\n                  {isSubmitting ? (\r\n                    <CircularProgress size={24} style={{ color: 'white' }} />\r\n                  ) : (\r\n                    'Save'\r\n                  )}\r\n                </Button>\r\n              </DialogActions>\r\n            </>\r\n          )}\r\n        </Formik>\r\n      </Dialog>\r\n    </>\r\n  )\r\n}\r\n\r\nconst initialValues = {\r\n  password: '',\r\n  confirmPassword: '',\r\n}\r\nexport const ChangePassword = (props: any) => {\r\n  const { onRefresh } = props;\r\n  const classes = useStyle();\r\n  const formikRef = React.useRef<any>(null);\r\n  const [isOpen, setIsOpen] = React.useState(false);\r\n  const { Post } = useService();\r\n  const Snackbar = useSnackbar();\r\n  const [initialFormValues, setInitialFormValues] = React.useState({ ...initialValues })\r\n\r\n  const changePasswordModel = () => {\r\n    setIsOpen(!isOpen)\r\n  }\r\n\r\n  const onClose = () => {\r\n    setIsOpen(!isOpen);\r\n  }\r\n\r\n  const onSubmit = (value: any, helper: any) => {\r\n    const { confirmPassword } = value\r\n    let postData = {\r\n      password: confirmPassword\r\n    }\r\n    changePasswordData(postData, helper)\r\n  }\r\n\r\n  const changePasswordData = (data: any, { setSubmitting, resetForm }: any) => {\r\n    Post('app/updateAdminPassword', data)\r\n      .then((res: any) => {\r\n        Snackbar.show(res.message, 'success');\r\n        setSubmitting(false);\r\n        resetForm();\r\n        onClose();\r\n        onRefresh()\r\n      })\r\n      .catch((err: any) => {\r\n        Snackbar.show(err.message, 'error');\r\n      });\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Button size='small' onClick={changePasswordModel} className={classes.themeButton}>Change</Button>\r\n      <Dialog\r\n        open={isOpen}\r\n        disableBackdropClick\r\n        disableEscapeKeyDown\r\n        fullWidth\r\n        maxWidth='sm'\r\n        aria-labelledby='dialog-title'\r\n      >\r\n        <DialogTitle id='dialog-title' onClose={onClose}>\r\n          Change Password\r\n        </DialogTitle>\r\n        <Formik\r\n          innerRef={formikRef}\r\n          enableReinitialize\r\n          initialValues={initialFormValues}\r\n          validationSchema={Yup.object().shape({\r\n            password: Yup.string().required('Password is required'),\r\n            confirmPassword: Yup.string().oneOf([Yup.ref('password'), null], 'Password must be same').required('Confirm password is required')\r\n          })}\r\n          onSubmit={onSubmit}\r\n        >\r\n          {({ values, errors, touched, handleChange, handleBlur, setFieldValue, submitForm, isSubmitting }) => (\r\n            <>\r\n              <DialogContent dividers>\r\n                <Grid container spacing={2}>\r\n                  <Grid item xs={12}>\r\n                    <TextField\r\n                      fullWidth\r\n                      label='New Password'\r\n                      variant='outlined'\r\n                      name='password'\r\n                      type='password'\r\n                      value={values.password}\r\n                      onBlur={handleBlur}\r\n                      onChange={handleChange}\r\n                      error={Boolean(touched.password && errors.password)}\r\n                      helperText={touched.password && errors.password}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={12}>\r\n                    <TextField\r\n                      fullWidth\r\n                      label='Confirm Password'\r\n                      variant='outlined'\r\n                      name='confirmPassword'\r\n                      type='password'\r\n                      value={values.confirmPassword}\r\n                      onBlur={handleBlur}\r\n                      onChange={handleChange}\r\n                      error={Boolean(touched.confirmPassword && errors.confirmPassword)}\r\n                      helperText={touched.confirmPassword && errors.confirmPassword}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </DialogContent>\r\n\r\n              <DialogActions>\r\n                <Button onClick={onClose} variant='outlined' color='secondary'>\r\n                  Cancel\r\n                </Button>\r\n                <Button\r\n                  className={classes.themeButton}\r\n                  onClick={() => submitForm()}\r\n                  disabled={isSubmitting}\r\n                  variant='outlined'\r\n                >\r\n                  {isSubmitting ? (\r\n                    <CircularProgress size={24} style={{ color: 'white' }} />\r\n                  ) : (\r\n                    'Submit'\r\n                  )}\r\n                </Button>\r\n              </DialogActions>\r\n            </>\r\n          )}\r\n        </Formik>\r\n      </Dialog>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default AdminProfileDetails;\r\n"],"sourceRoot":""}