{"version":3,"sources":["pages/AdminProfileDetails/AdminProfileDetails.tsx"],"names":["useStyle","makeStyles","theme","root","width","breakpoints","values","lg","height","maxWidth","margin","padding","spacing","paperStyle","insidePaperDivStyle","display","flexDirection","justifyContent","alignItems","themeButton","color","palette","white","textTransform","backgroundColor","green","main","dark","avatarStyle","lColor","initialEditValues","name","image","file","prevImage","isNew","EditProfile","props","data","getDatafunction","classes","formikRef","React","useRef","imageRef","Post","useService","Snackbar","useSnackbar","useState","isEdit","setIsEdit","isOpen","setIsOpen","initialFormValues","setInitialFormValues","useEffect","_id","rest","editData","id","url","console","log","onClose","onImageChange","e","persist","files","target","length","reader","FileReader","onloadend","current","setFieldValue","result","readAsDataURL","onSubmit","value","helper","a","postData","uploadNewImage","editProfile","setSubmitting","resetForm","then","res","show","message","catch","err","onClick","className","open","disableBackdropClick","disableEscapeKeyDown","fullWidth","aria-labelledby","innerRef","enableReinitialize","initialValues","validationSchema","Yup","shape","required","errors","touched","handleChange","handleBlur","submitForm","isSubmitting","dividers","container","item","xs","ref","type","accept","onChange","onBlur","hidden","style","click","src","alt","variant","label","error","Boolean","helperText","disabled","size","password","confirmPassword","ChangePassword","changePasswordData","oneOf","AdminProfileDetails","profileData","setProfileData","isLoading","setIsLoading","getProfileDetails","title","md","align","email","user_type"],"mappings":"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","file":"static/js/17.6f521f31.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Grid, Button, Paper, makeStyles, Avatar, Table, TableBody, TableCell, TableRow, IconButton, Dialog, DialogActions, DialogContent, TextField, List, ListItem, ListItemAvatar, ListItemText, Typography,} from '@material-ui/core'\r\nimport Page from '../../components/Page/Page';\r\nimport useService from '../../hook/useService';\r\nimport useSnackbar from '../../hook/useSnackbar';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport DialogTitle from '../../components/DialogTitlle/DialogTitle';\r\nimport { Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { uploadNewImage } from '../../utils/CloudinaryUtils';\r\n\r\nconst useStyle = makeStyles((theme: any) => ({\r\n  root: {\r\n    width: theme.breakpoints.values.lg,\r\n    height : '100%',\r\n    maxWidth: '100%',\r\n    margin: '0 auto',\r\n    padding: theme.spacing(3),\r\n  },\r\n  paperStyle : {\r\n      width : '100%',\r\n      height : '85vh',\r\n  },\r\n  insidePaperDivStyle : {\r\n     display : 'flex',\r\n     flexDirection : 'column',\r\n     justifyContent : 'center',\r\n     margin : 'auto',\r\n     alignItems : 'center',\r\n     height : '100%'\r\n  },\r\n  themeButton: {\r\n    color: theme.palette.white,\r\n    textTransform : 'capitalize',\r\n    backgroundColor: theme.palette.green.main,\r\n    '&:hover': {\r\n      backgroundColor: theme.palette.green.dark,\r\n    },\r\n  },\r\n  avatarStyle : {\r\n      width : '150px',\r\n      height : '150px'\r\n  },\r\n  lColor: {\r\n    color: theme.palette.green.main,\r\n  }\r\n\r\n}));\r\n\r\nconst AdminProfileDetails = () => {\r\n  const classes = useStyle();\r\n  const { Post } = useService();\r\n  const Snackbar = useSnackbar();\r\n  const [profileData, setProfileData] = React.useState<any>('');\r\n  const [isLoading, setIsLoading] = React.useState(false)\r\n\r\n\r\n  const getProfileDetails = () =>{\r\n        setIsLoading(true);\r\n        Post('app/getAdminUser', {})\r\n        .then((res: any) => {\r\n            setIsLoading(false);\r\n            if (!res.error) {\r\n            setProfileData(res.data);\r\n            } else {\r\n            Snackbar.show(res.message, 'error');\r\n            }\r\n        })\r\n        .catch((err: any) => {\r\n            console.log('err', err);\r\n            setIsLoading(false);\r\n            Snackbar.show(err.message, 'error');\r\n        });\r\n    }\r\n\r\n    React.useEffect(()=>{\r\n        getProfileDetails()\r\n    },[])\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Page title='Admin Profile' />\r\n        <Grid container spacing={2}>\r\n            <Grid item xs={12} md={2}></Grid>\r\n            <Grid item xs={12} md={8}>\r\n                <Paper className={classes.paperStyle}>\r\n                    {!isLoading && (\r\n                        <div className={classes.insidePaperDivStyle}>\r\n                        <Avatar className={classes.avatarStyle} src={profileData?.image?.url} alt={profileData?.name} variant='square' />\r\n                        <Table style={{width : '65%'}}>\r\n                            <TableBody>\r\n                            <TableRow >\r\n                                <TableCell align = 'left'>Name</TableCell>\r\n                                <TableCell align = 'center'>{profileData?.name}</TableCell>\r\n                                <TableCell align = 'right'><EditProfile data={profileData} getDatafunction={getProfileDetails}/></TableCell>\r\n                            </TableRow>\r\n                            <TableRow >\r\n                                <TableCell align = 'left'>Email</TableCell>\r\n                                <TableCell align = 'center'>{profileData?.email}</TableCell>\r\n                                <TableCell align = 'right'></TableCell>\r\n                            </TableRow>\r\n                            <TableRow >\r\n                                <TableCell align = 'left'>Admin Type</TableCell>\r\n                                <TableCell align = 'center'>{profileData?.user_type}</TableCell>\r\n                                <TableCell align = 'right'></TableCell>\r\n                            </TableRow>\r\n                            <TableRow >\r\n                                <TableCell align = 'left'>Password</TableCell>\r\n                                <TableCell align = 'center'>**********</TableCell>\r\n                                <TableCell align = 'right'><ChangePassword getDatafunction={getProfileDetails}/></TableCell>\r\n                            </TableRow>\r\n                            </TableBody>\r\n                        </Table>\r\n                    </div>\r\n                    )}\r\n\r\n                    {isLoading && <div className={classes.insidePaperDivStyle}><CircularProgress className={classes.lColor} /></div>}\r\n                    \r\n                </Paper>\r\n            </Grid>\r\n            <Grid item xs={12} md={2}></Grid>\r\n        </Grid>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nconst initialEditValues = {\r\n    name : '',\r\n    image : {file : null, prevImage : '',isNew : null},\r\n}\r\n\r\nexport const EditProfile = (props: any) =>{\r\n    const { data, getDatafunction } = props;\r\n    const classes = useStyle();\r\n    const formikRef = React.useRef<any>(null);\r\n    const imageRef = React.useRef<any>(null);\r\n    const { Post } = useService();\r\n    const Snackbar = useSnackbar();\r\n    const [isEdit, setIsEdit] = React.useState(false)\r\n    const [isOpen, setIsOpen] = React.useState(false);\r\n    const [initialFormValues, setInitialFormValues] = React.useState({...initialEditValues});\r\n\r\n    React.useEffect(()=>{\r\n        if(isEdit){\r\n            const {image, _id, ...rest} = data;\r\n            const editData = {...rest, id: _id}\r\n            editData.image = {\r\n                file: image,\r\n                prevImage: image?.url,\r\n                isNew: false,\r\n            }\r\n            console.log(editData)\r\n            setInitialFormValues(editData)\r\n        }\r\n        else{\r\n            setInitialFormValues(initialEditValues)\r\n        }\r\n    },[props, isEdit])\r\n\r\n    const editProfileModel = () =>{\r\n        setIsOpen(!isOpen);\r\n        setIsEdit(true)\r\n    }\r\n\r\n    const onClose = () =>{\r\n        setIsOpen(!isOpen);\r\n        getDatafunction();\r\n    }\r\n\r\n    const onImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        e.persist();\r\n        const files = e.target.files;\r\n        if (files && files.length != 0) {\r\n          const reader = new FileReader();\r\n          const file = files[0];\r\n          reader.onloadend = () => {\r\n            formikRef.current.setFieldValue('image', {\r\n              file,\r\n              prevImage: reader.result,\r\n              isNew : true\r\n            });\r\n          };\r\n          reader.readAsDataURL(file);\r\n        } else {\r\n          formikRef.current.setFieldValue('image', {\r\n            file: null,\r\n            prevImage: '',\r\n            isNew : null\r\n          });\r\n        }\r\n    };\r\n\r\n    const onSubmit = async (value: any, helper: any) =>{\r\n        const { name , image} = value;\r\n        const postData: any = {};\r\n        postData.name = name;\r\n        postData.image = await uploadNewImage(image);\r\n        editProfile(postData,helper)\r\n    }\r\n\r\n    const editProfile = (data: any, { setSubmitting, resetForm }: any) =>{\r\n        Post('app/updateAdminDetails', data)\r\n        .then((res: any) => {\r\n            Snackbar.show(res.message, 'success');\r\n            setSubmitting(false);\r\n            resetForm();\r\n            onClose();\r\n        })\r\n        .catch((err: any) => {\r\n            Snackbar.show(err.message, 'error');\r\n        });\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <IconButton onClick={editProfileModel} className={classes.themeButton}><EditIcon /></IconButton>\r\n            <Dialog open={isOpen} disableBackdropClick disableEscapeKeyDown fullWidth maxWidth='sm' aria-labelledby='dialog-title'>\r\n                <DialogTitle id='dialog-title' onClose={onClose}>\r\n                    Edit Profile\r\n                </DialogTitle>\r\n\r\n                <Formik\r\n                    innerRef={formikRef}\r\n                    enableReinitialize\r\n                    initialValues={initialFormValues}\r\n                    validationSchema={Yup.object().shape({\r\n                        name : Yup.string().required('Name is required'),\r\n                        image : Yup.object({file: Yup.mixed().required('A file is required')})\r\n                    })}\r\n                    onSubmit={onSubmit}\r\n                >\r\n                {({ values, errors, touched, handleChange, handleBlur, setFieldValue, submitForm, isSubmitting }) => (\r\n                    <>\r\n                        <DialogContent dividers>\r\n                            <Grid container spacing={2}>\r\n                                <Grid item xs={12}>\r\n                                    <input\r\n                                        name='recipe_image'\r\n                                        ref={imageRef}\r\n                                        type='file'\r\n                                        accept='.jpg,.png,jpeg'\r\n                                        onChange={onImageChange}\r\n                                        onBlur={handleBlur}\r\n                                        hidden\r\n                                    />\r\n                                    <div style={{display : 'flex', justifyContent : 'center'}}>\r\n                                        <Avatar onClick={()=>imageRef.current.click()} className={classes.avatarStyle} src={values?.image?.prevImage} alt={'profilePic'} variant='square' />\r\n                                    </div>   \r\n                                </Grid>\r\n                                <Grid item xs={12}>\r\n                                    <TextField \r\n                                        fullWidth \r\n                                        label = 'Name'\r\n                                        variant='outlined' \r\n                                        name = 'name'\r\n                                        value={values.name}\r\n                                        onBlur={handleBlur}\r\n                                        onChange={handleChange}\r\n                                        error={Boolean(touched.name && errors.name)}\r\n                                        helperText={touched.name && errors.name}\r\n                                    />   \r\n                                </Grid>\r\n                            </Grid>\r\n                        </DialogContent>\r\n\r\n                        <DialogActions>\r\n                            <Button onClick={onClose} variant='outlined' color='secondary'>\r\n                                Cancel\r\n                            </Button>\r\n                            <Button\r\n                            className={classes.themeButton}\r\n                            onClick={() => submitForm()}\r\n                            disabled={isSubmitting}\r\n                            variant='outlined'\r\n                            >\r\n                            {isSubmitting ? (\r\n                                <CircularProgress size={24} style={{ color: 'white' }} />\r\n                            ) : (\r\n                                'Save'\r\n                            )}\r\n                            </Button>\r\n                        </DialogActions>\r\n                    </>\r\n                )}\r\n                </Formik>\r\n            </Dialog>\r\n        </>\r\n    )\r\n}\r\n\r\nconst initialValues = {\r\n    password : '',\r\n    confirmPassword : '',\r\n}\r\nexport const ChangePassword = (props: any) =>{\r\n    const { getDatafunction } = props;\r\n    const classes = useStyle();\r\n    const formikRef = React.useRef<any>(null);\r\n    const [isOpen, setIsOpen] = React.useState(false);\r\n    const { Post } = useService();\r\n    const Snackbar = useSnackbar();\r\n    const [initialFormValues, setInitialFormValues] = React.useState({...initialValues})\r\n\r\n    const changePasswordModel = () =>{\r\n        setIsOpen(!isOpen)\r\n    }\r\n\r\n    const onClose = () =>{\r\n        setIsOpen(!isOpen);\r\n        getDatafunction()\r\n    }\r\n\r\n    const onSubmit = (value: any, helper: any) =>{\r\n        const { confirmPassword } = value\r\n        let postData = {\r\n            password : confirmPassword\r\n        }\r\n        changePasswordData(postData, helper)\r\n    }\r\n\r\n    const changePasswordData = (data: any, { setSubmitting, resetForm }: any) =>{\r\n        Post('app/updateAdminPassword', data)\r\n        .then((res: any) => {\r\n            Snackbar.show(res.message, 'success');\r\n            setSubmitting(false);\r\n            resetForm();\r\n            onClose();\r\n        })\r\n        .catch((err: any) => {\r\n            Snackbar.show(err.message, 'error');\r\n        });\r\n    }\r\n\r\n    return(\r\n        <>\r\n            <Button onClick={changePasswordModel} className={classes.themeButton}>Change</Button>\r\n            <Dialog\r\n                open={isOpen}\r\n                disableBackdropClick\r\n                disableEscapeKeyDown\r\n                fullWidth\r\n                maxWidth='sm'\r\n                aria-labelledby='dialog-title'\r\n            >\r\n                <DialogTitle id='dialog-title' onClose={onClose}>\r\n                    Change Password\r\n                </DialogTitle>\r\n                <Formik\r\n                    innerRef={formikRef}\r\n                    enableReinitialize\r\n                    initialValues={initialFormValues}\r\n                    validationSchema={Yup.object().shape({\r\n                        password : Yup.string().required('Password is required'),\r\n                        confirmPassword : Yup.string().oneOf([Yup.ref('password'),null], 'Password must be same').required('Confirm password is required')\r\n                    })}\r\n                    onSubmit={onSubmit}\r\n                >\r\n                {({ values, errors, touched, handleChange, handleBlur, setFieldValue, submitForm, isSubmitting }) => (\r\n                    <>\r\n                    <DialogContent dividers>\r\n                        <Grid container spacing={2}>\r\n                            <Grid item xs={12}>\r\n                                <TextField \r\n                                    fullWidth \r\n                                    label = 'Password'\r\n                                    variant='outlined' \r\n                                    name = 'password'\r\n                                    type = 'password'\r\n                                    value={values.password}\r\n                                    onBlur={handleBlur}\r\n                                    onChange={handleChange}\r\n                                    error={Boolean(touched.password && errors.password)}\r\n                                    helperText={touched.password && errors.password}\r\n                                />    \r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <TextField \r\n                                    fullWidth \r\n                                    label = 'Confirm Password'\r\n                                    variant='outlined'\r\n                                    name = 'confirmPassword'\r\n                                    type = 'password'\r\n                                    value={values.confirmPassword}\r\n                                    onBlur={handleBlur}\r\n                                    onChange={handleChange}\r\n                                    error={Boolean(touched.confirmPassword && errors.confirmPassword)}\r\n                                    helperText={touched.confirmPassword && errors.confirmPassword}\r\n                                />   \r\n                            </Grid>\r\n                        </Grid>\r\n                    </DialogContent>\r\n\r\n                    <DialogActions>\r\n                        <Button onClick={onClose} variant='outlined' color='secondary'>\r\n                            Cancel\r\n                        </Button>\r\n                        <Button\r\n                        className={classes.themeButton}\r\n                        onClick={() => submitForm()}\r\n                        disabled={isSubmitting}\r\n                        variant='outlined'\r\n                        >\r\n                        {isSubmitting ? (\r\n                            <CircularProgress size={24} style={{ color: 'white' }} />\r\n                        ) : (\r\n                            'ChangePassword'\r\n                        )}\r\n                        </Button>\r\n                    </DialogActions>\r\n                    </>\r\n                )}\r\n                </Formik>\r\n            </Dialog>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AdminProfileDetails;\r\n"],"sourceRoot":""}