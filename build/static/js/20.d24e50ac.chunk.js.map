{"version":3,"sources":["pages/SkinCarePlan/SkinCarePlan.tsx"],"names":["useStyles","makeStyles","theme","root","width","breakpoints","values","lg","maxWidth","margin","padding","spacing","themeButton","color","palette","white","backgroundColor","green","main","dark","dayPaper","height","display","alignItems","justifyContent","lColor","tabCard","marginTop","content","mTop","jCenter","sEvenly","sBetween","iconPadd","actions","ingredientsAvatarStyle","tabRoot","minWidth","tabIndicator","tabTextColorInherit","border","tabPanelRoot","paddingTop","paddingBottom","listItemRoot","noListItemRoot","paperRoot","SkinTypeDrop","id","name","CurrentClimateDrop","SkinIrregularDrop","SubDrop","SkinTextureDrop","getSubSkinIrregular","SkinIrregularValue","find","AddEditDialog","props","isEdit","isOpen","okBtnText","onClose","data","title","onSuccess","classes","Post","useService","Snackbar","useSnackbar","formikRef","useRef","React","useState","skinCareRecipeList","setSkinCareRecipeList","initialFormValues","skin_type","current_climate","skin_irregular","skin_irregular_sub","skin_texture","recipes","Array","fill","map","d","i","day","initialValue","setInitialValue","addData","setSubmitting","resetForm","then","res","show","message","catch","err","response","editData","useEffect","_id","rest","recipe","error","open","disableBackdropClick","disableEscapeKeyDown","fullWidth","aria-labelledby","innerRef","enableReinitialize","initialValues","onSubmit","value","helper","validationSchema","Yup","shape","trim","required","of","errors","touched","handleBlur","handleChange","setFieldValue","submitForm","isSubmitting","dividers","container","item","xs","options","getOptionLabel","option","getOptionSelected","onChange","event","newValue","onBlur","renderInput","params","label","variant","Boolean","helperText","inputProps","recData","md","elevation","component","className","align","recipe_name","onClick","disabled","size","ViewSkincarePlan","formValue","setFormValue","setValue","getDropValues","dropValues","indicator","orientation","textColorInherit","toString","index","SkinCarePlan","ConfModel","useConfModel","isLoading","setIsLoading","page_no","page_limit","stateData","setStateData","pageCount","setPageCount","tableData","setTableData","addEditDialog","setAddEditDialog","viewDialog","setViewDialog","listSkinCarePlan","page_count","onSuccessAction","closeAddEditDialog","prevState","justify","startIcon","hover","arrow","openViewDialog","openEditDialog","openModel","setLoading","closeModel","a","onDelete","length","count","page"],"mappings":"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","file":"static/js/20.d24e50ac.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport {\r\n  makeStyles,\r\n  Avatar,\r\n  Card,\r\n  CardActions,\r\n  CardContent,\r\n  InputLabel,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  FormControl,\r\n  FormHelperText,\r\n  Grid,\r\n  IconButton,\r\n  Paper,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Tooltip,\r\n  Typography,\r\n  TextField,\r\n  Button,\r\n  CircularProgress,\r\n  Select,\r\n  Tab,\r\n} from '@material-ui/core';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport Page from '../../components/Page/Page';\r\nimport DialogTitle from '../../components/DialogTitlle/DialogTitle';\r\nimport { Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport { Pagination, TabContext, TabList, TabPanel } from '@material-ui/lab';\r\nimport CenterFocusStrongIcon from '@material-ui/icons/CenterFocusStrong';\r\nimport { TableLoader, TableNoData } from '../../components/Loader/Loader';\r\nimport useSnackbar from '../../hook/useSnackbar';\r\nimport useService from '../../hook/useService';\r\nimport useConfModel from '../../hook/useConfModel';\r\nimport { SkinCareRecipeViewContent } from '../SkinCareRecipe/SkinCareRecipe';\r\n\r\nconst useStyles = makeStyles((theme: any) => ({\r\n  root: {\r\n    width: theme.breakpoints.values.lg,\r\n    maxWidth: '100%',\r\n    margin: '0 auto',\r\n    padding: theme.spacing(3),\r\n  },\r\n  themeButton: {\r\n    color: theme.palette.white,\r\n    backgroundColor: theme.palette.green.main,\r\n    '&:hover': {\r\n      backgroundColor: theme.palette.green.dark,\r\n    },\r\n  },\r\n  dayPaper: {\r\n    height: '100%',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    backgroundColor: theme.palette.green.main,\r\n    color: 'white',\r\n  },\r\n  lColor: {\r\n    color: 'white',\r\n  },\r\n  tabCard: {\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  content: {\r\n    padding: 0,\r\n  },\r\n  mTop: {\r\n    marginTop: theme.spacing(1.5),\r\n  },\r\n  jCenter: {\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n  },\r\n  sEvenly: {\r\n    display: 'flex',\r\n    justifyContent: 'space-evenly',\r\n  },\r\n  sBetween: {\r\n    display: 'flex',\r\n    justifyContent: 'space-between',\r\n  },\r\n  iconPadd: {\r\n    padding: 5,\r\n  },\r\n  actions: {\r\n    padding: theme.spacing(1),\r\n    justifyContent: 'center',\r\n  },\r\n  ingredientsAvatarStyle: {\r\n    width: theme.spacing(10),\r\n    height: theme.spacing(10),\r\n    margin: 'auto',\r\n    marginTop: '20px',\r\n  },\r\n  //\r\n  tabRoot: {\r\n    minWidth: 72,\r\n  },\r\n  tabIndicator: {\r\n    backgroundColor: theme.palette.green.main,\r\n  },\r\n  tabTextColorInherit: {\r\n    backgroundColor: theme.palette.green.main,\r\n    color: 'white',\r\n    border: '1px solid white'\r\n  },\r\n  tabPanelRoot: {\r\n    paddingTop: 0,\r\n    paddingBottom: 0,\r\n    width: '100%'\r\n  },\r\n  listItemRoot: {\r\n    backgroundColor: '#7ac0af2b',\r\n    margin: '10px 0px'\r\n  },\r\n  noListItemRoot: {\r\n    backgroundColor: '#f500571c',\r\n    margin: '10px 0px'\r\n  },\r\n  paperRoot: {\r\n    display: 'flex'\r\n  },\r\n}));\r\n\r\nconst SkinTypeDrop = [\r\n  { id: 'DRY', name: 'Dry' },\r\n  { id: 'OILY', name: 'Oily' },\r\n  { id: 'COMBINATION', name: 'Combination' },\r\n  { id: 'NORMAL', name: 'Normal' },\r\n];\r\n\r\nconst CurrentClimateDrop = [\r\n  { id: 'HOT', name: 'Hot' },\r\n  { id: 'COLD', name: 'Cold' },\r\n  { id: 'HUMID', name: 'Humid' },\r\n  { id: 'DRY', name: 'Dry' },\r\n];\r\n\r\nconst SkinIrregularDrop = [\r\n  {\r\n    id: 'ACNE', name: 'Acne', SubDrop: [\r\n      { id: 'PIMPLES', name: 'Pimples' },\r\n      { id: 'BLACKHEADS', name: 'Black Heads' },\r\n      { id: 'WHITEHEADS', name: 'White Heads' },\r\n    ]\r\n  },\r\n  {\r\n    id: 'RASHES', name: 'Rashes', SubDrop: [\r\n      { id: 'SCALY', name: 'Scaly' },\r\n      { id: 'ITCHY', name: 'Itchy' },\r\n      { id: 'BUMPY', name: 'Bumpy' },\r\n      { id: 'BOILS', name: 'Boils' },\r\n      { id: 'BLISTERS', name: 'Blisters' },\r\n    ]\r\n  },\r\n  {\r\n    id: 'DISCOLORATION', name: 'Discoloration', SubDrop: [\r\n      { id: 'BLACKISH', name: 'Blackish' },\r\n      { id: 'WHITISH', name: 'Whitish' },\r\n      { id: 'PINKISH', name: 'Pinkish' },\r\n      { id: 'REDDISH', name: 'Reddish' },\r\n      { id: 'SUNSPOTS', name: 'Sun Spots' },\r\n    ]\r\n  },\r\n];\r\n\r\nconst SkinTextureDrop = [\r\n  { id: 'SAGGY', name: 'Saggy', },\r\n  { id: 'FINELINES', name: ' Fine Lines' },\r\n  { id: 'WRINKLES', name: 'Wrinkles' },\r\n  { id: 'NONE', name: 'None' },\r\n];\r\n\r\nconst SkinIssueDrop = [\r\n  { id: 'ACNE', name: 'Acne', },\r\n  { id: 'DRYSKIN', name: 'Dry Skin' },\r\n];\r\n\r\nconst getSubSkinIrregular = (SkinIrregularValue: any) => {\r\n  return SkinIrregularDrop?.find(({ id }: any) => id == SkinIrregularValue)?.SubDrop || []\r\n}\r\n\r\nconst SkinCarePlan = () => {\r\n  const classes = useStyles();\r\n  const { Post } = useService();\r\n  const Snackbar = useSnackbar();\r\n  const ConfModel = useConfModel();\r\n  const [isLoading, setIsLoading] = React.useState(true);\r\n  const [stateData, setStateData] = React.useState({\r\n    page_no: 1,\r\n    page_limit: 10,\r\n  });\r\n  const [pageCount, setPageCount] = React.useState(0);\r\n  const [tableData, setTableData] = React.useState([]);\r\n  const [addEditDialog, setAddEditDialog] = React.useState({\r\n    isOpen: false,\r\n    title: '',\r\n    okBtnText: '',\r\n    isEdit: false,\r\n    data: {},\r\n  });\r\n  const [viewDialog, setViewDialog] = useState({\r\n    isOpen: false,\r\n    title: '',\r\n    data: {},\r\n  });\r\n\r\n  const listSkinCarePlan = () => {\r\n    setIsLoading(true);\r\n    Post('app/listSkinCarePlan', stateData)\r\n      .then((res: any) => {\r\n        setIsLoading(false);\r\n        if (!res.error) {\r\n          setPageCount(res.page_count);\r\n          setTableData(res.data);\r\n        } else {\r\n          Snackbar.show(res.message, 'error');\r\n        }\r\n      })\r\n      .catch((error: any) => {\r\n        setIsLoading(false);\r\n        Snackbar.show(error.message, 'error');\r\n      });\r\n  };\r\n\r\n  const openAddDialog = () => {\r\n    setAddEditDialog((prevState: any) => ({\r\n      ...prevState,\r\n      isOpen: true,\r\n      title: 'Add Skin Care Plan',\r\n      isEdit: false,\r\n      okBtnText: 'Save',\r\n    }));\r\n  };\r\n\r\n  const openEditDialog = (data: any) => {\r\n    setAddEditDialog((prevState: any) => ({\r\n      ...prevState,\r\n      isOpen: true,\r\n      isEdit: true,\r\n      data,\r\n      title: 'Edit Skin care Plan',\r\n      okBtnText: 'Edit',\r\n    }));\r\n  };\r\n\r\n  const openViewDialog = (data: any) => {\r\n    setViewDialog((prevState: any) => ({\r\n      ...prevState,\r\n      isOpen: true,\r\n      data,\r\n      title: 'View Skincare Plan',\r\n    }));\r\n  };\r\n\r\n  const onDelete = (data: any) => {\r\n    const { openModel, setLoading, closeModel } = ConfModel;\r\n    const submitFunction = () => {\r\n      setLoading(true);\r\n      Post('app/deleteSkinCarePlan', { id: data._id })\r\n        .then(async (res: any) => {\r\n          setLoading(false);\r\n          closeModel();\r\n          onSuccessAction();\r\n          Snackbar.show(res.message, 'success');\r\n        })\r\n        .catch((err: any) => {\r\n          setLoading(false);\r\n          Snackbar.show('Internal Server Error', 'error');\r\n        });\r\n    };\r\n    openModel(submitFunction);\r\n  };\r\n\r\n  const onSuccessAction = () => {\r\n    listSkinCarePlan();\r\n    closeAddEditDialog();\r\n  };\r\n\r\n  const closeAddEditDialog = () => {\r\n    setAddEditDialog((prevState: any) => ({ ...prevState, isOpen: false }));\r\n  };\r\n\r\n  const closeViewDialog = () => {\r\n    setViewDialog((prevState: any) => ({ ...prevState, isOpen: false }));\r\n  };\r\n\r\n  const onPageChange = (event: React.ChangeEvent<unknown>, value: number) => {\r\n    setStateData((prevState: any) => ({ ...prevState, page_no: value }));\r\n  };\r\n\r\n  const getDropValues = (dropValues: any, value: string) => {\r\n    return dropValues.find(({ id }: any) => id == value)?.name || ''\r\n  };\r\n\r\n  useEffect(() => {\r\n    listSkinCarePlan();\r\n  }, [stateData]);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Page title='Skin Care Plan' />\r\n\r\n      {/* =======Header====== */}\r\n      <Grid alignItems='flex-end' container justify='space-between' spacing={3}>\r\n        <Grid item>\r\n          <Typography component='h1' variant='h3'>\r\n            Skin Care Plan\r\n          </Typography>\r\n        </Grid>\r\n        <Grid item>\r\n          <Button\r\n            variant='contained'\r\n            onClick={() => openAddDialog()}\r\n            className={classes.themeButton}\r\n            startIcon={<AddIcon />}\r\n          >\r\n            Add\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      {/* =============Search======== */}\r\n      {/* <Grid container spacing={3}>\r\n        <Grid item>\r\n          <Paper elevation={0}>\r\n            <TextField\r\n              fullWidth\r\n              size='small'\r\n              placeholder='Name'\r\n              variant='outlined'\r\n              name='state'\r\n            />\r\n          </Paper>\r\n        </Grid>\r\n      </Grid> */}\r\n\r\n      {/* ========Table With Pagination========= */}\r\n      <Card className={classes.tabCard}>\r\n        <CardContent className={classes.content}>\r\n          <TableContainer>\r\n            <Table>\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell align='center'>#</TableCell>\r\n                  <TableCell align='center'>Skin Type</TableCell>\r\n                  <TableCell align='center'>Current Climate</TableCell>\r\n                  <TableCell align='center'>Skin Irregularities</TableCell>\r\n                  <TableCell align='center'>Sub Skin Irregularities</TableCell>\r\n                  <TableCell align='center'>Skin Texture </TableCell>\r\n                  <TableCell align='center'>Actions</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {!isLoading &&\r\n                  tableData.map((data: any, index: any) => {\r\n                    return (\r\n                      <TableRow hover>\r\n                        <TableCell align='center'>{stateData.page_limit * (stateData.page_no - 1) + index + 1}</TableCell>\r\n                        <TableCell align='center'>{getDropValues(SkinTypeDrop, data?.skin_type)}</TableCell>\r\n                        <TableCell align='center'>{getDropValues(CurrentClimateDrop, data?.current_climate)}</TableCell>\r\n                        <TableCell align='center'>{getDropValues(SkinIrregularDrop, data?.skin_irregular)}</TableCell>\r\n                        <TableCell align='center'>{getDropValues(getSubSkinIrregular(data?.skin_irregular), data?.skin_irregular_sub)}</TableCell>\r\n                        <TableCell align='center'>{getDropValues(SkinTextureDrop, data?.skin_texture)}</TableCell>\r\n\r\n                        <TableCell align='center'>\r\n                          <div className={classes.sEvenly}>\r\n                            <Tooltip title='View' arrow>\r\n                              <IconButton\r\n                                className={classes.iconPadd}\r\n                                onClick={() => openViewDialog(data)}\r\n                              >\r\n                                <CenterFocusStrongIcon color='primary' />\r\n                              </IconButton>\r\n                            </Tooltip>\r\n                            <Tooltip title='Edit' arrow>\r\n                              <IconButton\r\n                                className={classes.iconPadd}\r\n                                onClick={() => openEditDialog(data)}\r\n                              >\r\n                                <EditIcon color='action' />\r\n                              </IconButton>\r\n                            </Tooltip>\r\n                            <Tooltip title='Delete' arrow>\r\n                              <IconButton\r\n                                className={classes.iconPadd}\r\n                                onClick={() => onDelete(data)}\r\n                              >\r\n                                <DeleteIcon color='secondary' />\r\n                              </IconButton>\r\n                            </Tooltip>\r\n                          </div>\r\n                        </TableCell>\r\n                      </TableRow>\r\n                    );\r\n                  })}\r\n                {isLoading && <TableLoader />}\r\n                {!isLoading && tableData.length == 0 && (\r\n                  <TableNoData>No Data Found</TableNoData>\r\n                )}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n        </CardContent>\r\n\r\n        <CardActions className={classes.actions}>\r\n          <Pagination\r\n            count={pageCount}\r\n            page={stateData.page_no}\r\n            onChange={onPageChange}\r\n          />\r\n        </CardActions>\r\n      </Card>\r\n\r\n      {/* ==========Add & Edit Dialoge======== */}\r\n\r\n      <AddEditDialog\r\n        {...addEditDialog}\r\n        onClose={closeAddEditDialog}\r\n        onSuccess={onSuccessAction}\r\n      />\r\n      {viewDialog.isOpen && <ViewSkincarePlan {...viewDialog} onClose={closeViewDialog} />}\r\n    </div>\r\n  );\r\n}\r\n\r\ninterface Recipe {\r\n  id: string;\r\n  day: number;\r\n}\r\n\r\ninterface RecipePlan {\r\n  skin_type: string;\r\n  current_climate: string;\r\n  skin_irregular: string;\r\n  skin_irregular_sub: string;\r\n  skin_texture: string;\r\n  recipes: Recipe[];\r\n}\r\n\r\nconst AddEditDialog = (props: any) => {\r\n  const {\r\n    isEdit,\r\n    isOpen,\r\n    okBtnText = 'OK',\r\n    onClose,\r\n    data,\r\n    title,\r\n    onSuccess,\r\n  } = props;\r\n  const classes = useStyles();\r\n  const { Post } = useService();\r\n  const Snackbar = useSnackbar();\r\n  const formikRef = useRef<any>(null);\r\n  const [skinCareRecipeList, setSkinCareRecipeList] = React.useState<any>([]);\r\n  const initialFormValues: RecipePlan = {\r\n    skin_type: '',\r\n    current_climate: '',\r\n    skin_irregular: '',\r\n    skin_irregular_sub: '',\r\n    skin_texture: '',\r\n    recipes: Array(7).fill(null).map((d, i) => ({ day: i + 1, id: '' })),\r\n  };\r\n  const [initialValue, setInitialValue] = React.useState({\r\n    ...initialFormValues,\r\n  });\r\n\r\n  const listSkinCareRecipeList = () => {\r\n    Post('app/listAllSkinCareRecipe', {})\r\n      .then((response: any) => {\r\n        if (!response.error) {\r\n          setSkinCareRecipeList(response.data);\r\n        } else {\r\n          Snackbar.show(response.message, 'error');\r\n        }\r\n      })\r\n      .catch((error: any) => {\r\n        Snackbar.show(error.message, 'error');\r\n      });\r\n  };\r\n\r\n  const onSubmit = (value: any, helper: any) => {\r\n    helper.setSubmitting(false);\r\n    !isEdit && addData(value, helper);\r\n    isEdit && editData(value, helper);\r\n  };\r\n\r\n  const addData = (data: any, { setSubmitting, resetForm }: any) => {\r\n    setSubmitting(true);\r\n    Post('app/addSkinCarePlan', data)\r\n      .then((res: any) => {\r\n        Snackbar.show(res.message, 'success');\r\n        setSubmitting(false);\r\n        resetForm();\r\n        onSuccess();\r\n      })\r\n      .catch((err: any) => {\r\n        const { message = \"Internal Server Error\" } = err.response.data\r\n        setSubmitting(false);\r\n        Snackbar.show(message, 'error');\r\n      });\r\n  };\r\n\r\n  const editData = (data: any, { setSubmitting, resetForm }: any) => {\r\n    setSubmitting(true);\r\n    Post('app/editSkinCarePlan', data)\r\n      .then((res: any) => {\r\n        Snackbar.show(res.message, 'success');\r\n        setSubmitting(false);\r\n        resetForm();\r\n        onSuccess();\r\n      })\r\n      .catch((err: any) => {\r\n        const { message = \"Internal Server Error\" } = err.response.data\r\n        setSubmitting(false);\r\n        Snackbar.show(message, 'error');\r\n      });\r\n  };\r\n\r\n\r\n  useEffect(() => {\r\n    if (isEdit) {\r\n      const { recipes, _id, ...rest } = data;\r\n      const editData = { ...rest, id: _id };\r\n      editData.recipes = recipes.map((data: any) => {\r\n        data.id = data.recipe._id;\r\n        return data;\r\n      });\r\n      setInitialValue(editData);\r\n    } else {\r\n      setInitialValue(initialFormValues);\r\n    }\r\n  }, [props]);\r\n\r\n  useEffect(() => {\r\n    listSkinCareRecipeList();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <Dialog\r\n        open={isOpen}\r\n        disableBackdropClick\r\n        disableEscapeKeyDown\r\n        fullWidth\r\n        maxWidth='md'\r\n        aria-labelledby='dialog-title'\r\n      >\r\n        <DialogTitle id='dialog-title' onClose={onClose}>\r\n          {title}\r\n        </DialogTitle>\r\n        <Formik\r\n          innerRef={formikRef}\r\n          enableReinitialize\r\n          initialValues={initialValue}\r\n          onSubmit={onSubmit}\r\n          validationSchema={Yup.object().shape({\r\n            skin_type: Yup.string().trim().required('Skin Type is required'),\r\n            current_climate: Yup.string().trim().required('Current Climate is required'),\r\n            skin_irregular: Yup.string().trim().required('Skin Irregularites is required'),\r\n            skin_irregular_sub: Yup.string().trim().required('Sub Skin Irregularites is required'),\r\n            skin_texture: Yup.string().trim().required('Skin Texture is required'),\r\n            recipes: Yup.array().of(\r\n              Yup.object().shape({\r\n                id: Yup.string().trim().required('Recipe is Required'),\r\n                day: Yup.string().trim().required('Day is Required'),\r\n              })\r\n            ),\r\n          })}\r\n        >\r\n          {({\r\n            values,\r\n            errors,\r\n            touched,\r\n            handleChange,\r\n            handleBlur,\r\n            setFieldValue,\r\n            submitForm,\r\n            isSubmitting,\r\n          }) => (\r\n            <>\r\n              <DialogContent dividers>\r\n                <Grid container spacing={2}>\r\n                  <Grid item xs={4}>\r\n                    <Autocomplete\r\n                      options={SkinTypeDrop}\r\n                      value={SkinTypeDrop.find((data: any) => data.id == values.skin_type)}\r\n                      getOptionLabel={(option: any) => option.name}\r\n                      getOptionSelected={(option) => option.id == values.skin_type}\r\n                      onChange={(event: any, newValue: any) => {\r\n                        setFieldValue('skin_type', newValue?.id || '');\r\n                      }}\r\n                      onBlur={handleBlur}\r\n                      renderInput={(params: any) => (\r\n                        <TextField\r\n                          {...params}\r\n                          label='Skin Type'\r\n                          variant='outlined'\r\n                          error={Boolean(touched.skin_type && errors.skin_type)}\r\n                          helperText={touched.skin_type && errors.skin_type}\r\n                          inputProps={{\r\n                            ...params.inputProps,\r\n                          }}\r\n                        />\r\n                      )}\r\n                    />\r\n                  </Grid>\r\n\r\n                  <Grid item xs={4}>\r\n                    <Autocomplete\r\n                      options={CurrentClimateDrop}\r\n                      value={CurrentClimateDrop.find((data: any) => data.id == values.current_climate)}\r\n                      getOptionLabel={(option: any) => option.name}\r\n                      getOptionSelected={(option) => option.id == values.current_climate}\r\n                      onChange={(event: any, newValue: any) => {\r\n                        setFieldValue('current_climate', newValue?.id || '');\r\n                      }}\r\n                      onBlur={handleBlur}\r\n                      renderInput={(params: any) => (\r\n                        <TextField\r\n                          {...params}\r\n                          label='Current Climate'\r\n                          variant='outlined'\r\n                          error={Boolean(touched.current_climate && errors.current_climate)}\r\n                          helperText={touched.current_climate && errors.current_climate}\r\n                          inputProps={{\r\n                            ...params.inputProps,\r\n                          }}\r\n                        />\r\n                      )}\r\n                    />\r\n                  </Grid>\r\n\r\n                  <Grid item xs={4}>\r\n                    <Autocomplete\r\n                      options={SkinTextureDrop}\r\n                      value={SkinTextureDrop.find((data: any) => data.id == values.skin_texture)}\r\n                      getOptionLabel={(option: any) => option.name}\r\n                      getOptionSelected={(option) => option.id == values.skin_texture}\r\n                      onChange={(event: any, newValue: any) => {\r\n                        setFieldValue('skin_texture', newValue?.id || '');\r\n                      }}\r\n                      onBlur={handleBlur}\r\n                      renderInput={(params: any) => (\r\n                        <TextField\r\n                          {...params}\r\n                          label='Skin Texture'\r\n                          variant='outlined'\r\n                          error={Boolean(touched.skin_texture && errors.skin_texture)}\r\n                          helperText={touched.skin_texture && errors.skin_texture}\r\n                          inputProps={{\r\n                            ...params.inputProps,\r\n                          }}\r\n                        />\r\n                      )}\r\n                    />\r\n                  </Grid>\r\n\r\n                  <Grid item xs={6}>\r\n                    <Autocomplete\r\n                      options={SkinIrregularDrop}\r\n                      value={SkinIrregularDrop.find((data: any) => data.id == values.skin_irregular)}\r\n                      getOptionLabel={(option: any) => option.name}\r\n                      getOptionSelected={(option) => option.id == values.skin_irregular}\r\n                      onChange={(event: any, newValue: any) => {\r\n                        setFieldValue('skin_irregular', newValue?.id || '');\r\n                        setFieldValue('skin_irregular_sub', '');\r\n                      }}\r\n                      onBlur={handleBlur}\r\n                      renderInput={(params: any) => (\r\n                        <TextField\r\n                          {...params}\r\n                          label='Skin Irregularites'\r\n                          variant='outlined'\r\n                          error={Boolean(touched.skin_irregular && errors.skin_irregular)}\r\n                          helperText={touched.skin_irregular && errors.skin_irregular}\r\n                          inputProps={{\r\n                            ...params.inputProps,\r\n                          }}\r\n                        />\r\n                      )}\r\n                    />\r\n                  </Grid>\r\n\r\n                  <Grid item xs={6}>\r\n                    <Autocomplete\r\n                      options={getSubSkinIrregular(values.skin_irregular)}\r\n                      value={getSubSkinIrregular(values.skin_irregular).find((data: any) => data.id == values.skin_irregular_sub)}\r\n                      getOptionLabel={(option: any) => option.name}\r\n                      getOptionSelected={(option) => option.id == values.skin_irregular_sub}\r\n                      onChange={(event: any, newValue: any) => {\r\n                        setFieldValue('skin_irregular_sub', newValue?.id || '');\r\n                      }}\r\n                      onBlur={handleBlur}\r\n                      renderInput={(params: any) => (\r\n                        <TextField\r\n                          {...params}\r\n                          label='Sub Skin Irregularites'\r\n                          variant='outlined'\r\n                          error={Boolean(touched.skin_irregular_sub && errors.skin_irregular_sub)}\r\n                          helperText={touched.skin_irregular_sub && errors.skin_irregular_sub}\r\n                          inputProps={{\r\n                            ...params.inputProps,\r\n                          }}\r\n                        />\r\n                      )}\r\n                    />\r\n                  </Grid>\r\n\r\n                  {values.recipes.map((recData: any, i: any) => {\r\n                    return (\r\n                      <>\r\n                        <Grid md={1} item xs={2}>\r\n                          <Paper\r\n                            elevation={0}\r\n                            component='div'\r\n                            className={classes.dayPaper}\r\n                          >\r\n                            <Typography\r\n                              color='inherit'\r\n                              align={'center'}\r\n                            >\r\n                              {`Day - ${recData.day}`}\r\n                            </Typography>\r\n                          </Paper>\r\n                        </Grid>\r\n                        <Grid item md={11} xs={10}>\r\n                          <Autocomplete\r\n                            options={skinCareRecipeList}\r\n                            value={skinCareRecipeList.find(\r\n                              (data: any) => data._id == recData.id\r\n                            )}\r\n                            getOptionLabel={(option: any) => option.recipe_name}\r\n                            getOptionSelected={(option) =>\r\n                              option._id == recData.id\r\n                            }\r\n                            onChange={(event: any, newValue: any) => {\r\n                              setFieldValue(`recipes[${i}].id`, newValue?._id || '');\r\n                            }}\r\n                            onBlur={handleBlur}\r\n                            renderInput={(params: any) => (\r\n                              <TextField\r\n                                {...params}\r\n                                label='Recipe'\r\n                                variant='outlined'\r\n                                error={Boolean(\r\n                                  touched?.recipes &&\r\n                                  touched?.recipes[i]?.id &&\r\n                                  errors?.recipes &&\r\n                                  (errors?.recipes[i] as any)?.id\r\n                                )}\r\n                                helperText={\r\n                                  touched?.recipes &&\r\n                                  touched?.recipes[i]?.id &&\r\n                                  errors?.recipes &&\r\n                                  (errors?.recipes[i] as any)?.id\r\n                                }\r\n                                inputProps={{\r\n                                  ...params.inputProps,\r\n                                }}\r\n                              />\r\n                            )}\r\n                          />\r\n                        </Grid>\r\n                      </>\r\n                    );\r\n                  })}\r\n                </Grid>\r\n              </DialogContent>\r\n\r\n              <DialogActions>\r\n                <Button onClick={onClose} variant='outlined' color='secondary'>\r\n                  Cancel\r\n                </Button>\r\n\r\n                <Button\r\n                  className={classes.themeButton}\r\n                  onClick={() => submitForm()}\r\n                  disabled={isSubmitting}\r\n                  variant='outlined'\r\n                >\r\n                  {isSubmitting ? (\r\n                    <CircularProgress size={24} className={classes.lColor} />\r\n                  ) : (\r\n                    okBtnText\r\n                  )}\r\n                </Button>\r\n              </DialogActions>\r\n            </>\r\n          )}\r\n        </Formik>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst ViewSkincarePlan = (props: any) => {\r\n  const { isOpen, title, onClose, data } = props;\r\n  const classes = useStyles();\r\n  const [formValue, setFormValue] = useState(data);\r\n  const [value, setValue] = React.useState('1');\r\n\r\n  const handleChange = (event: React.ChangeEvent<{}>, newValue: string) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  const getDropValues = (dropValues: any, value: string) => {\r\n    return dropValues.find(({ id }: any) => id == value)?.name || ''\r\n  };\r\n\r\n  useEffect(() => {\r\n    setFormValue(data);\r\n  }, [props]);\r\n\r\n  return (\r\n    <Dialog\r\n      disableBackdropClick\r\n      disableEscapeKeyDown\r\n      fullWidth\r\n      maxWidth='md'\r\n      aria-labelledby='dialog-view-title'\r\n      open={isOpen}\r\n    >\r\n      <DialogTitle id='dialog-view-title' onClose={onClose}>\r\n        {title}\r\n      </DialogTitle>\r\n\r\n      <DialogContent dividers>\r\n        <Paper >\r\n          <Table>\r\n            <TableBody>\r\n              <TableRow >\r\n                <TableCell>Skin Type</TableCell>\r\n                <TableCell><strong>{getDropValues(SkinTypeDrop, formValue?.skin_type)}</strong></TableCell>\r\n              </TableRow>\r\n              <TableRow>\r\n                <TableCell>Current Climate</TableCell>\r\n                <TableCell><strong>{getDropValues(CurrentClimateDrop, data?.current_climate)}</strong></TableCell>\r\n              </TableRow>\r\n              <TableRow>\r\n                <TableCell>Skin Irregularities</TableCell>\r\n                <TableCell><strong>{getDropValues(SkinIrregularDrop, data?.skin_irregular)}</strong></TableCell>\r\n              </TableRow>\r\n              <TableRow>\r\n                <TableCell>Sub Skin Irregularities</TableCell>\r\n                <TableCell><strong>{getDropValues(getSubSkinIrregular(data?.skin_irregular), data?.skin_irregular_sub)}</strong></TableCell>\r\n              </TableRow>\r\n              <TableRow>\r\n                <TableCell>Skin Texture</TableCell>\r\n                <TableCell><strong>{getDropValues(SkinTextureDrop, data?.skin_texture)}</strong></TableCell>\r\n              </TableRow>\r\n            </TableBody>\r\n          </Table>\r\n        </Paper>\r\n\r\n        <Paper className={classes.paperRoot}>\r\n          <TabContext value={value || ''}>\r\n\r\n            <TabList\r\n              classes={{\r\n                indicator: classes.tabIndicator\r\n              }}\r\n              onChange={handleChange}\r\n              orientation=\"vertical\"\r\n              variant=\"standard\"\r\n            >\r\n              {formValue?.recipes?.map((item: any) =>\r\n                <Tab\r\n                  classes={{ root: classes.tabRoot, textColorInherit: classes.tabTextColorInherit }}\r\n                  label={`Day - ${item.day}`}\r\n                  value={item.day.toString()} />\r\n              )}\r\n            </TabList>\r\n\r\n            {formValue?.recipes?.map((item: any, index: any) =>\r\n              <TabPanel key={index} className={classes.tabPanelRoot} value={item.day.toString()}>\r\n                <SkinCareRecipeViewContent data={item.recipe} />\r\n              </TabPanel>)}\r\n          </TabContext>\r\n        </Paper>\r\n\r\n      </DialogContent>\r\n\r\n      <DialogActions>\r\n        <Button onClick={onClose} variant='outlined' color='secondary'>\r\n          Close\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default SkinCarePlan;\r\n"],"sourceRoot":""}